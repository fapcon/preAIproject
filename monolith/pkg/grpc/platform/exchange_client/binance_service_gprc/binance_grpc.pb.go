// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: binance.proto

package binance_service_gprc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BinanceServiceGRPCClient is the client API for BinanceServiceGRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BinanceServiceGRPCClient interface {
	CancelOrder(ctx context.Context, in *GetOrderIn, opts ...grpc.CallOption) (*OrderOut, error)
	GetOrder(ctx context.Context, in *GetOrderIn, opts ...grpc.CallOption) (*OrderOut, error)
	GetOrderHistory(ctx context.Context, in *EIn, opts ...grpc.CallOption) (*EOut, error)
	GetOpenOrders(ctx context.Context, in *EIn, opts ...grpc.CallOption) (*EOut, error)
	GetAccount(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAccountOut, error)
	GetBalances(ctx context.Context, in *EIn, opts ...grpc.CallOption) (*GetBalancesOut, error)
	GetTicker(ctx context.Context, in *GetTickerIn, opts ...grpc.CallOption) (*GetTickerOut, error)
	GetCandles(ctx context.Context, in *GetCandlesIn, opts ...grpc.CallOption) (*GetCandlesOut, error)
}

type binanceServiceGRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewBinanceServiceGRPCClient(cc grpc.ClientConnInterface) BinanceServiceGRPCClient {
	return &binanceServiceGRPCClient{cc}
}

func (c *binanceServiceGRPCClient) CancelOrder(ctx context.Context, in *GetOrderIn, opts ...grpc.CallOption) (*OrderOut, error) {
	out := new(OrderOut)
	err := c.cc.Invoke(ctx, "/binance.BinanceServiceGRPC/CancelOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *binanceServiceGRPCClient) GetOrder(ctx context.Context, in *GetOrderIn, opts ...grpc.CallOption) (*OrderOut, error) {
	out := new(OrderOut)
	err := c.cc.Invoke(ctx, "/binance.BinanceServiceGRPC/GetOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *binanceServiceGRPCClient) GetOrderHistory(ctx context.Context, in *EIn, opts ...grpc.CallOption) (*EOut, error) {
	out := new(EOut)
	err := c.cc.Invoke(ctx, "/binance.BinanceServiceGRPC/GetOrderHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *binanceServiceGRPCClient) GetOpenOrders(ctx context.Context, in *EIn, opts ...grpc.CallOption) (*EOut, error) {
	out := new(EOut)
	err := c.cc.Invoke(ctx, "/binance.BinanceServiceGRPC/GetOpenOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *binanceServiceGRPCClient) GetAccount(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAccountOut, error) {
	out := new(GetAccountOut)
	err := c.cc.Invoke(ctx, "/binance.BinanceServiceGRPC/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *binanceServiceGRPCClient) GetBalances(ctx context.Context, in *EIn, opts ...grpc.CallOption) (*GetBalancesOut, error) {
	out := new(GetBalancesOut)
	err := c.cc.Invoke(ctx, "/binance.BinanceServiceGRPC/GetBalances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *binanceServiceGRPCClient) GetTicker(ctx context.Context, in *GetTickerIn, opts ...grpc.CallOption) (*GetTickerOut, error) {
	out := new(GetTickerOut)
	err := c.cc.Invoke(ctx, "/binance.BinanceServiceGRPC/GetTicker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *binanceServiceGRPCClient) GetCandles(ctx context.Context, in *GetCandlesIn, opts ...grpc.CallOption) (*GetCandlesOut, error) {
	out := new(GetCandlesOut)
	err := c.cc.Invoke(ctx, "/binance.BinanceServiceGRPC/GetCandles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BinanceServiceGRPCServer is the server API for BinanceServiceGRPC service.
// All implementations must embed UnimplementedBinanceServiceGRPCServer
// for forward compatibility
type BinanceServiceGRPCServer interface {
	CancelOrder(context.Context, *GetOrderIn) (*OrderOut, error)
	GetOrder(context.Context, *GetOrderIn) (*OrderOut, error)
	GetOrderHistory(context.Context, *EIn) (*EOut, error)
	GetOpenOrders(context.Context, *EIn) (*EOut, error)
	GetAccount(context.Context, *Empty) (*GetAccountOut, error)
	GetBalances(context.Context, *EIn) (*GetBalancesOut, error)
	GetTicker(context.Context, *GetTickerIn) (*GetTickerOut, error)
	GetCandles(context.Context, *GetCandlesIn) (*GetCandlesOut, error)
	mustEmbedUnimplementedBinanceServiceGRPCServer()
}

// UnimplementedBinanceServiceGRPCServer must be embedded to have forward compatible implementations.
type UnimplementedBinanceServiceGRPCServer struct {
}

func (UnimplementedBinanceServiceGRPCServer) CancelOrder(context.Context, *GetOrderIn) (*OrderOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrder not implemented")
}
func (UnimplementedBinanceServiceGRPCServer) GetOrder(context.Context, *GetOrderIn) (*OrderOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedBinanceServiceGRPCServer) GetOrderHistory(context.Context, *EIn) (*EOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderHistory not implemented")
}
func (UnimplementedBinanceServiceGRPCServer) GetOpenOrders(context.Context, *EIn) (*EOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpenOrders not implemented")
}
func (UnimplementedBinanceServiceGRPCServer) GetAccount(context.Context, *Empty) (*GetAccountOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedBinanceServiceGRPCServer) GetBalances(context.Context, *EIn) (*GetBalancesOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalances not implemented")
}
func (UnimplementedBinanceServiceGRPCServer) GetTicker(context.Context, *GetTickerIn) (*GetTickerOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicker not implemented")
}
func (UnimplementedBinanceServiceGRPCServer) GetCandles(context.Context, *GetCandlesIn) (*GetCandlesOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCandles not implemented")
}
func (UnimplementedBinanceServiceGRPCServer) mustEmbedUnimplementedBinanceServiceGRPCServer() {}

// UnsafeBinanceServiceGRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BinanceServiceGRPCServer will
// result in compilation errors.
type UnsafeBinanceServiceGRPCServer interface {
	mustEmbedUnimplementedBinanceServiceGRPCServer()
}

func RegisterBinanceServiceGRPCServer(s grpc.ServiceRegistrar, srv BinanceServiceGRPCServer) {
	s.RegisterService(&BinanceServiceGRPC_ServiceDesc, srv)
}

func _BinanceServiceGRPC_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinanceServiceGRPCServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binance.BinanceServiceGRPC/CancelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinanceServiceGRPCServer).CancelOrder(ctx, req.(*GetOrderIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _BinanceServiceGRPC_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinanceServiceGRPCServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binance.BinanceServiceGRPC/GetOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinanceServiceGRPCServer).GetOrder(ctx, req.(*GetOrderIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _BinanceServiceGRPC_GetOrderHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinanceServiceGRPCServer).GetOrderHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binance.BinanceServiceGRPC/GetOrderHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinanceServiceGRPCServer).GetOrderHistory(ctx, req.(*EIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _BinanceServiceGRPC_GetOpenOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinanceServiceGRPCServer).GetOpenOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binance.BinanceServiceGRPC/GetOpenOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinanceServiceGRPCServer).GetOpenOrders(ctx, req.(*EIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _BinanceServiceGRPC_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinanceServiceGRPCServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binance.BinanceServiceGRPC/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinanceServiceGRPCServer).GetAccount(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BinanceServiceGRPC_GetBalances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinanceServiceGRPCServer).GetBalances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binance.BinanceServiceGRPC/GetBalances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinanceServiceGRPCServer).GetBalances(ctx, req.(*EIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _BinanceServiceGRPC_GetTicker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTickerIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinanceServiceGRPCServer).GetTicker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binance.BinanceServiceGRPC/GetTicker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinanceServiceGRPCServer).GetTicker(ctx, req.(*GetTickerIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _BinanceServiceGRPC_GetCandles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCandlesIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinanceServiceGRPCServer).GetCandles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binance.BinanceServiceGRPC/GetCandles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinanceServiceGRPCServer).GetCandles(ctx, req.(*GetCandlesIn))
	}
	return interceptor(ctx, in, info, handler)
}

// BinanceServiceGRPC_ServiceDesc is the grpc.ServiceDesc for BinanceServiceGRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BinanceServiceGRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "binance.BinanceServiceGRPC",
	HandlerType: (*BinanceServiceGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CancelOrder",
			Handler:    _BinanceServiceGRPC_CancelOrder_Handler,
		},
		{
			MethodName: "GetOrder",
			Handler:    _BinanceServiceGRPC_GetOrder_Handler,
		},
		{
			MethodName: "GetOrderHistory",
			Handler:    _BinanceServiceGRPC_GetOrderHistory_Handler,
		},
		{
			MethodName: "GetOpenOrders",
			Handler:    _BinanceServiceGRPC_GetOpenOrders_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _BinanceServiceGRPC_GetAccount_Handler,
		},
		{
			MethodName: "GetBalances",
			Handler:    _BinanceServiceGRPC_GetBalances_Handler,
		},
		{
			MethodName: "GetTicker",
			Handler:    _BinanceServiceGRPC_GetTicker_Handler,
		},
		{
			MethodName: "GetCandles",
			Handler:    _BinanceServiceGRPC_GetCandles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "binance.proto",
}
