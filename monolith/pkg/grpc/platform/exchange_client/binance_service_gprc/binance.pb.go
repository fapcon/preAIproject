// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: binance.proto

package binance_service_gprc

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_binance_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_binance_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_binance_proto_rawDescGZIP(), []int{0}
}

type GetOrderIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pair    string `protobuf:"bytes,1,opt,name=Pair,proto3" json:"Pair,omitempty"`
	OrderID int64  `protobuf:"varint,2,opt,name=OrderID,proto3" json:"OrderID,omitempty"`
}

func (x *GetOrderIn) Reset() {
	*x = GetOrderIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_binance_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrderIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderIn) ProtoMessage() {}

func (x *GetOrderIn) ProtoReflect() protoreflect.Message {
	mi := &file_binance_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderIn.ProtoReflect.Descriptor instead.
func (*GetOrderIn) Descriptor() ([]byte, []int) {
	return file_binance_proto_rawDescGZIP(), []int{1}
}

func (x *GetOrderIn) GetPair() string {
	if x != nil {
		return x.Pair
	}
	return ""
}

func (x *GetOrderIn) GetOrderID() int64 {
	if x != nil {
		return x.OrderID
	}
	return 0
}

type OrderOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientOrderID     string   `protobuf:"bytes,1,opt,name=ClientOrderID,proto3" json:"ClientOrderID,omitempty"`
	OrderID           int64    `protobuf:"varint,2,opt,name=OrderID,proto3" json:"OrderID,omitempty"`
	Price             *Decimal `protobuf:"bytes,3,opt,name=Price,proto3" json:"Price,omitempty"`
	Amount            *Decimal `protobuf:"bytes,4,opt,name=Amount,proto3" json:"Amount,omitempty"`
	Quantity          *Decimal `protobuf:"bytes,5,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
	Pair              string   `protobuf:"bytes,6,opt,name=Pair,proto3" json:"Pair,omitempty"`
	Status            int64    `protobuf:"varint,7,opt,name=Status,proto3" json:"Status,omitempty"`
	Side              int64    `protobuf:"varint,8,opt,name=Side,proto3" json:"Side,omitempty"`
	Type              int64    `protobuf:"varint,9,opt,name=Type,proto3" json:"Type,omitempty"`
	ExchangeOrderType int64    `protobuf:"varint,10,opt,name=ExchangeOrderType,proto3" json:"ExchangeOrderType,omitempty"`
	ErrorCode         int64    `protobuf:"varint,11,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Message           string   `protobuf:"bytes,12,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *OrderOut) Reset() {
	*x = OrderOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_binance_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderOut) ProtoMessage() {}

func (x *OrderOut) ProtoReflect() protoreflect.Message {
	mi := &file_binance_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderOut.ProtoReflect.Descriptor instead.
func (*OrderOut) Descriptor() ([]byte, []int) {
	return file_binance_proto_rawDescGZIP(), []int{2}
}

func (x *OrderOut) GetClientOrderID() string {
	if x != nil {
		return x.ClientOrderID
	}
	return ""
}

func (x *OrderOut) GetOrderID() int64 {
	if x != nil {
		return x.OrderID
	}
	return 0
}

func (x *OrderOut) GetPrice() *Decimal {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *OrderOut) GetAmount() *Decimal {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *OrderOut) GetQuantity() *Decimal {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *OrderOut) GetPair() string {
	if x != nil {
		return x.Pair
	}
	return ""
}

func (x *OrderOut) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *OrderOut) GetSide() int64 {
	if x != nil {
		return x.Side
	}
	return 0
}

func (x *OrderOut) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *OrderOut) GetExchangeOrderType() int64 {
	if x != nil {
		return x.ExchangeOrderType
	}
	return 0
}

func (x *OrderOut) GetErrorCode() int64 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *OrderOut) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type EIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EIn) Reset() {
	*x = EIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_binance_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EIn) ProtoMessage() {}

func (x *EIn) ProtoReflect() protoreflect.Message {
	mi := &file_binance_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EIn.ProtoReflect.Descriptor instead.
func (*EIn) Descriptor() ([]byte, []int) {
	return file_binance_proto_rawDescGZIP(), []int{3}
}

type EOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode int64 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
}

func (x *EOut) Reset() {
	*x = EOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_binance_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EOut) ProtoMessage() {}

func (x *EOut) ProtoReflect() protoreflect.Message {
	mi := &file_binance_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EOut.ProtoReflect.Descriptor instead.
func (*EOut) Descriptor() ([]byte, []int) {
	return file_binance_proto_rawDescGZIP(), []int{4}
}

func (x *EOut) GetErrorCode() int64 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

type GetAccountOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode  int64          `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Data       *Account       `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
	DataMargin *AccountMargin `protobuf:"bytes,3,opt,name=DataMargin,proto3" json:"DataMargin,omitempty"`
	Message    string         `protobuf:"bytes,4,opt,name=Message,proto3" json:"Message,omitempty"`
	Success    bool           `protobuf:"varint,5,opt,name=Success,proto3" json:"Success,omitempty"`
}

func (x *GetAccountOut) Reset() {
	*x = GetAccountOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_binance_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountOut) ProtoMessage() {}

func (x *GetAccountOut) ProtoReflect() protoreflect.Message {
	mi := &file_binance_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountOut.ProtoReflect.Descriptor instead.
func (*GetAccountOut) Descriptor() ([]byte, []int) {
	return file_binance_proto_rawDescGZIP(), []int{5}
}

func (x *GetAccountOut) GetErrorCode() int64 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *GetAccountOut) GetData() *Account {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetAccountOut) GetDataMargin() *AccountMargin {
	if x != nil {
		return x.DataMargin
	}
	return nil
}

func (x *GetAccountOut) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetAccountOut) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CanTrade    bool       `protobuf:"varint,1,opt,name=CanTrade,proto3" json:"CanTrade,omitempty"`
	CanDeposit  bool       `protobuf:"varint,2,opt,name=CanDeposit,proto3" json:"CanDeposit,omitempty"`
	CanWithdraw bool       `protobuf:"varint,3,opt,name=CanWithdraw,proto3" json:"CanWithdraw,omitempty"`
	Permissions []int64    `protobuf:"varint,4,rep,packed,name=Permissions,proto3" json:"Permissions,omitempty"`
	Balances    []*Balance `protobuf:"bytes,5,rep,name=Balances,proto3" json:"Balances,omitempty"`
}

func (x *Account) Reset() {
	*x = Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_binance_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_binance_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_binance_proto_rawDescGZIP(), []int{6}
}

func (x *Account) GetCanTrade() bool {
	if x != nil {
		return x.CanTrade
	}
	return false
}

func (x *Account) GetCanDeposit() bool {
	if x != nil {
		return x.CanDeposit
	}
	return false
}

func (x *Account) GetCanWithdraw() bool {
	if x != nil {
		return x.CanWithdraw
	}
	return false
}

func (x *Account) GetPermissions() []int64 {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *Account) GetBalances() []*Balance {
	if x != nil {
		return x.Balances
	}
	return nil
}

type AccountMargin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BorrowEnabled   bool             `protobuf:"varint,1,opt,name=BorrowEnabled,proto3" json:"BorrowEnabled,omitempty"`
	TradeEnabled    bool             `protobuf:"varint,2,opt,name=TradeEnabled,proto3" json:"TradeEnabled,omitempty"`
	TransferEnabled bool             `protobuf:"varint,3,opt,name=TransferEnabled,proto3" json:"TransferEnabled,omitempty"`
	Balances        []*BalanceMargin `protobuf:"bytes,4,rep,name=Balances,proto3" json:"Balances,omitempty"`
}

func (x *AccountMargin) Reset() {
	*x = AccountMargin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_binance_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountMargin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountMargin) ProtoMessage() {}

func (x *AccountMargin) ProtoReflect() protoreflect.Message {
	mi := &file_binance_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountMargin.ProtoReflect.Descriptor instead.
func (*AccountMargin) Descriptor() ([]byte, []int) {
	return file_binance_proto_rawDescGZIP(), []int{7}
}

func (x *AccountMargin) GetBorrowEnabled() bool {
	if x != nil {
		return x.BorrowEnabled
	}
	return false
}

func (x *AccountMargin) GetTradeEnabled() bool {
	if x != nil {
		return x.TradeEnabled
	}
	return false
}

func (x *AccountMargin) GetTransferEnabled() bool {
	if x != nil {
		return x.TransferEnabled
	}
	return false
}

func (x *AccountMargin) GetBalances() []*BalanceMargin {
	if x != nil {
		return x.Balances
	}
	return nil
}

type BalanceMargin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Currency string   `protobuf:"bytes,1,opt,name=Currency,proto3" json:"Currency,omitempty"`
	Borrowed *Decimal `protobuf:"bytes,2,opt,name=Borrowed,proto3" json:"Borrowed,omitempty"`
	Free     *Decimal `protobuf:"bytes,3,opt,name=Free,proto3" json:"Free,omitempty"`
	Interest *Decimal `protobuf:"bytes,4,opt,name=Interest,proto3" json:"Interest,omitempty"`
	Locked   *Decimal `protobuf:"bytes,5,opt,name=Locked,proto3" json:"Locked,omitempty"`
	NetAsset *Decimal `protobuf:"bytes,6,opt,name=NetAsset,proto3" json:"NetAsset,omitempty"`
}

func (x *BalanceMargin) Reset() {
	*x = BalanceMargin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_binance_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalanceMargin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceMargin) ProtoMessage() {}

func (x *BalanceMargin) ProtoReflect() protoreflect.Message {
	mi := &file_binance_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceMargin.ProtoReflect.Descriptor instead.
func (*BalanceMargin) Descriptor() ([]byte, []int) {
	return file_binance_proto_rawDescGZIP(), []int{8}
}

func (x *BalanceMargin) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *BalanceMargin) GetBorrowed() *Decimal {
	if x != nil {
		return x.Borrowed
	}
	return nil
}

func (x *BalanceMargin) GetFree() *Decimal {
	if x != nil {
		return x.Free
	}
	return nil
}

func (x *BalanceMargin) GetInterest() *Decimal {
	if x != nil {
		return x.Interest
	}
	return nil
}

func (x *BalanceMargin) GetLocked() *Decimal {
	if x != nil {
		return x.Locked
	}
	return nil
}

func (x *BalanceMargin) GetNetAsset() *Decimal {
	if x != nil {
		return x.NetAsset
	}
	return nil
}

type Balance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Currency string   `protobuf:"bytes,1,opt,name=Currency,proto3" json:"Currency,omitempty"`
	Amount   *Decimal `protobuf:"bytes,2,opt,name=Amount,proto3" json:"Amount,omitempty"`
	Locked   *Decimal `protobuf:"bytes,3,opt,name=Locked,proto3" json:"Locked,omitempty"`
}

func (x *Balance) Reset() {
	*x = Balance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_binance_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Balance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Balance) ProtoMessage() {}

func (x *Balance) ProtoReflect() protoreflect.Message {
	mi := &file_binance_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Balance.ProtoReflect.Descriptor instead.
func (*Balance) Descriptor() ([]byte, []int) {
	return file_binance_proto_rawDescGZIP(), []int{9}
}

func (x *Balance) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Balance) GetAmount() *Decimal {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *Balance) GetLocked() *Decimal {
	if x != nil {
		return x.Locked
	}
	return nil
}

type GetBalancesOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode         int64      `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Success           bool       `protobuf:"varint,2,opt,name=Success,proto3" json:"Success,omitempty"`
	DataSpotBalance   []*Balance `protobuf:"bytes,3,rep,name=DataSpotBalance,proto3" json:"DataSpotBalance,omitempty"`
	DataMarginBalance []*Balance `protobuf:"bytes,4,rep,name=DataMarginBalance,proto3" json:"DataMarginBalance,omitempty"`
}

func (x *GetBalancesOut) Reset() {
	*x = GetBalancesOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_binance_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBalancesOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBalancesOut) ProtoMessage() {}

func (x *GetBalancesOut) ProtoReflect() protoreflect.Message {
	mi := &file_binance_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBalancesOut.ProtoReflect.Descriptor instead.
func (*GetBalancesOut) Descriptor() ([]byte, []int) {
	return file_binance_proto_rawDescGZIP(), []int{10}
}

func (x *GetBalancesOut) GetErrorCode() int64 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *GetBalancesOut) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetBalancesOut) GetDataSpotBalance() []*Balance {
	if x != nil {
		return x.DataSpotBalance
	}
	return nil
}

func (x *GetBalancesOut) GetDataMarginBalance() []*Balance {
	if x != nil {
		return x.DataMarginBalance
	}
	return nil
}

type GetTickerIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeID int64 `protobuf:"varint,1,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
}

func (x *GetTickerIn) Reset() {
	*x = GetTickerIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_binance_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTickerIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTickerIn) ProtoMessage() {}

func (x *GetTickerIn) ProtoReflect() protoreflect.Message {
	mi := &file_binance_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTickerIn.ProtoReflect.Descriptor instead.
func (*GetTickerIn) Descriptor() ([]byte, []int) {
	return file_binance_proto_rawDescGZIP(), []int{11}
}

func (x *GetTickerIn) GetExchangeID() int64 {
	if x != nil {
		return x.ExchangeID
	}
	return 0
}

type GetTickerOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode int64               `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Data      map[string]*Decimal `protobuf:"bytes,2,rep,name=Data,proto3" json:"Data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetTickerOut) Reset() {
	*x = GetTickerOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_binance_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTickerOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTickerOut) ProtoMessage() {}

func (x *GetTickerOut) ProtoReflect() protoreflect.Message {
	mi := &file_binance_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTickerOut.ProtoReflect.Descriptor instead.
func (*GetTickerOut) Descriptor() ([]byte, []int) {
	return file_binance_proto_rawDescGZIP(), []int{12}
}

func (x *GetTickerOut) GetErrorCode() int64 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *GetTickerOut) GetData() map[string]*Decimal {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetCandlesIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol    string `protobuf:"bytes,1,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
	Interval  string `protobuf:"bytes,2,opt,name=Interval,proto3" json:"Interval,omitempty"`
	Limit     int64  `protobuf:"varint,3,opt,name=Limit,proto3" json:"Limit,omitempty"`
	StartTime int64  `protobuf:"varint,4,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime   int64  `protobuf:"varint,5,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
}

func (x *GetCandlesIn) Reset() {
	*x = GetCandlesIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_binance_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCandlesIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCandlesIn) ProtoMessage() {}

func (x *GetCandlesIn) ProtoReflect() protoreflect.Message {
	mi := &file_binance_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCandlesIn.ProtoReflect.Descriptor instead.
func (*GetCandlesIn) Descriptor() ([]byte, []int) {
	return file_binance_proto_rawDescGZIP(), []int{13}
}

func (x *GetCandlesIn) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *GetCandlesIn) GetInterval() string {
	if x != nil {
		return x.Interval
	}
	return ""
}

func (x *GetCandlesIn) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetCandlesIn) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *GetCandlesIn) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type GetCandlesOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode int64          `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Candles   []*CandlesData `protobuf:"bytes,2,rep,name=Candles,proto3" json:"Candles,omitempty"`
}

func (x *GetCandlesOut) Reset() {
	*x = GetCandlesOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_binance_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCandlesOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCandlesOut) ProtoMessage() {}

func (x *GetCandlesOut) ProtoReflect() protoreflect.Message {
	mi := &file_binance_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCandlesOut.ProtoReflect.Descriptor instead.
func (*GetCandlesOut) Descriptor() ([]byte, []int) {
	return file_binance_proto_rawDescGZIP(), []int{14}
}

func (x *GetCandlesOut) GetErrorCode() int64 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *GetCandlesOut) GetCandles() []*CandlesData {
	if x != nil {
		return x.Candles
	}
	return nil
}

type CandlesData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenTime                 *timestamp.Timestamp `protobuf:"bytes,1,opt,name=OpenTime,proto3" json:"OpenTime,omitempty"`
	Open                     *Decimal             `protobuf:"bytes,2,opt,name=Open,proto3" json:"Open,omitempty"`
	High                     *Decimal             `protobuf:"bytes,3,opt,name=High,proto3" json:"High,omitempty"`
	Low                      *Decimal             `protobuf:"bytes,4,opt,name=Low,proto3" json:"Low,omitempty"`
	Close                    *Decimal             `protobuf:"bytes,5,opt,name=Close,proto3" json:"Close,omitempty"`
	Volume                   *Decimal             `protobuf:"bytes,6,opt,name=Volume,proto3" json:"Volume,omitempty"`
	CloseTime                *timestamp.Timestamp `protobuf:"bytes,7,opt,name=CloseTime,proto3" json:"CloseTime,omitempty"`
	QuoteAssetVolume         *Decimal             `protobuf:"bytes,8,opt,name=QuoteAssetVolume,proto3" json:"QuoteAssetVolume,omitempty"`
	TradeNum                 int64                `protobuf:"varint,9,opt,name=TradeNum,proto3" json:"TradeNum,omitempty"`
	TakerBuyBaseAssetVolume  *Decimal             `protobuf:"bytes,10,opt,name=TakerBuyBaseAssetVolume,proto3" json:"TakerBuyBaseAssetVolume,omitempty"`
	TakerBuyQuoteAssetVolume *Decimal             `protobuf:"bytes,11,opt,name=TakerBuyQuoteAssetVolume,proto3" json:"TakerBuyQuoteAssetVolume,omitempty"`
}

func (x *CandlesData) Reset() {
	*x = CandlesData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_binance_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CandlesData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CandlesData) ProtoMessage() {}

func (x *CandlesData) ProtoReflect() protoreflect.Message {
	mi := &file_binance_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CandlesData.ProtoReflect.Descriptor instead.
func (*CandlesData) Descriptor() ([]byte, []int) {
	return file_binance_proto_rawDescGZIP(), []int{15}
}

func (x *CandlesData) GetOpenTime() *timestamp.Timestamp {
	if x != nil {
		return x.OpenTime
	}
	return nil
}

func (x *CandlesData) GetOpen() *Decimal {
	if x != nil {
		return x.Open
	}
	return nil
}

func (x *CandlesData) GetHigh() *Decimal {
	if x != nil {
		return x.High
	}
	return nil
}

func (x *CandlesData) GetLow() *Decimal {
	if x != nil {
		return x.Low
	}
	return nil
}

func (x *CandlesData) GetClose() *Decimal {
	if x != nil {
		return x.Close
	}
	return nil
}

func (x *CandlesData) GetVolume() *Decimal {
	if x != nil {
		return x.Volume
	}
	return nil
}

func (x *CandlesData) GetCloseTime() *timestamp.Timestamp {
	if x != nil {
		return x.CloseTime
	}
	return nil
}

func (x *CandlesData) GetQuoteAssetVolume() *Decimal {
	if x != nil {
		return x.QuoteAssetVolume
	}
	return nil
}

func (x *CandlesData) GetTradeNum() int64 {
	if x != nil {
		return x.TradeNum
	}
	return 0
}

func (x *CandlesData) GetTakerBuyBaseAssetVolume() *Decimal {
	if x != nil {
		return x.TakerBuyBaseAssetVolume
	}
	return nil
}

func (x *CandlesData) GetTakerBuyQuoteAssetVolume() *Decimal {
	if x != nil {
		return x.TakerBuyQuoteAssetVolume
	}
	return nil
}

type Decimal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num  int64 `protobuf:"varint,1,opt,name=Num,proto3" json:"Num,omitempty"`   //целая часть
	Exp  int32 `protobuf:"varint,2,opt,name=Exp,proto3" json:"Exp,omitempty"`   //экспоненциальная часть
	Sign bool  `protobuf:"varint,3,opt,name=Sign,proto3" json:"Sign,omitempty"` //+-
}

func (x *Decimal) Reset() {
	*x = Decimal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_binance_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Decimal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Decimal) ProtoMessage() {}

func (x *Decimal) ProtoReflect() protoreflect.Message {
	mi := &file_binance_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Decimal.ProtoReflect.Descriptor instead.
func (*Decimal) Descriptor() ([]byte, []int) {
	return file_binance_proto_rawDescGZIP(), []int{16}
}

func (x *Decimal) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *Decimal) GetExp() int32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *Decimal) GetSign() bool {
	if x != nil {
		return x.Sign
	}
	return false
}

var File_binance_proto protoreflect.FileDescriptor

var file_binance_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x3a, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x50, 0x61, 0x69, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x22, 0x84,
	0x03, 0x0a, 0x08, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x05, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x05, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a,
	0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x52, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x50,
	0x61, 0x69, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x69, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x64, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x53, 0x69, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2c, 0x0a, 0x11, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x05, 0x0a, 0x03, 0x45, 0x49, 0x6e, 0x22, 0x24, 0x0a, 0x04,
	0x45, 0x4f, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4f, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x52, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x22, 0xb7, 0x01, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x43, 0x61, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x43, 0x61, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x43, 0x61, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x43, 0x61, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x43, 0x61, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x20,
	0x0a, 0x0b, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x0b, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x2c, 0x0a, 0x08, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0xb7,
	0x01, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x12, 0x24, 0x0a, 0x0d, 0x42, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x42, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x08, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x08,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x85, 0x02, 0x0a, 0x0d, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2c, 0x0a, 0x08, 0x42, 0x6f, 0x72, 0x72, 0x6f, 0x77,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x08, 0x42, 0x6f, 0x72, 0x72,
	0x6f, 0x77, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x46, 0x72, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x52, 0x04, 0x46, 0x72, 0x65, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x08,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x4c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x06, 0x4c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x12, 0x2c, 0x0a, 0x08, 0x4e, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x08, 0x4e, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x22, 0x79, 0x0a, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x28, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x28, 0x0a, 0x06, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x52, 0x06, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x22, 0xc4, 0x01, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x4f, 0x75, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3a, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x53, 0x70,
	0x6f, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x53, 0x70, 0x6f, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x3e, 0x0a, 0x11, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x11, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x22, 0x2d, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x49,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x44, 0x22, 0xac, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x4f,
	0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x33, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x4f, 0x75, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x49, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x90, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x49,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x5d, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x73, 0x4f, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x43, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x73, 0x22, 0xb5, 0x04, 0x0a, 0x0b, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x36, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x08, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x4f, 0x70,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x04, 0x4f, 0x70, 0x65, 0x6e,
	0x12, 0x24, 0x0a, 0x04, 0x48, 0x69, 0x67, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x52, 0x04, 0x48, 0x69, 0x67, 0x68, 0x12, 0x22, 0x0a, 0x03, 0x4c, 0x6f, 0x77, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x03, 0x4c, 0x6f, 0x77, 0x12, 0x26, 0x0a, 0x05, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x05, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x52, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x10, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x52, 0x10, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x75, 0x6d,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x75, 0x6d,
	0x12, 0x4a, 0x0a, 0x17, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x42, 0x75, 0x79, 0x42, 0x61, 0x73, 0x65,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x52, 0x17, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x42, 0x75, 0x79, 0x42, 0x61, 0x73,
	0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x18,
	0x54, 0x61, 0x6b, 0x65, 0x72, 0x42, 0x75, 0x79, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x52, 0x18, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x42, 0x75, 0x79, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x41, 0x0a, 0x07, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x4e, 0x75, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x78, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x45, 0x78, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x67,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x53, 0x69, 0x67, 0x6e, 0x32, 0xd0, 0x03,
	0x0a, 0x12, 0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x47, 0x52, 0x50, 0x43, 0x12, 0x37, 0x0a, 0x0b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x13, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x1a, 0x11, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x22, 0x00, 0x12, 0x34, 0x0a,
	0x08, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x13, 0x2e, 0x62, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x1a, 0x11,
	0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4f, 0x75,
	0x74, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x0c, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x45, 0x49, 0x6e, 0x1a, 0x0d, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x45,
	0x4f, 0x75, 0x74, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x0c, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x45, 0x49, 0x6e, 0x1a, 0x0d, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x45,
	0x4f, 0x75, 0x74, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x0e, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x22, 0x00, 0x12, 0x36, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x0c, 0x2e, 0x62,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x45, 0x49, 0x6e, 0x1a, 0x17, 0x2e, 0x62, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x4f, 0x75, 0x74, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x12, 0x14, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x1a, 0x15, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x22,
	0x00, 0x12, 0x3d, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x12,
	0x15, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x1a, 0x16, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x4f, 0x75, 0x74, 0x22, 0x00,
	0x42, 0x18, 0x5a, 0x16, 0x2e, 0x2f, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x70, 0x72, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_binance_proto_rawDescOnce sync.Once
	file_binance_proto_rawDescData = file_binance_proto_rawDesc
)

func file_binance_proto_rawDescGZIP() []byte {
	file_binance_proto_rawDescOnce.Do(func() {
		file_binance_proto_rawDescData = protoimpl.X.CompressGZIP(file_binance_proto_rawDescData)
	})
	return file_binance_proto_rawDescData
}

var file_binance_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_binance_proto_goTypes = []interface{}{
	(*Empty)(nil),               // 0: binance.Empty
	(*GetOrderIn)(nil),          // 1: binance.GetOrderIn
	(*OrderOut)(nil),            // 2: binance.OrderOut
	(*EIn)(nil),                 // 3: binance.EIn
	(*EOut)(nil),                // 4: binance.EOut
	(*GetAccountOut)(nil),       // 5: binance.GetAccountOut
	(*Account)(nil),             // 6: binance.Account
	(*AccountMargin)(nil),       // 7: binance.AccountMargin
	(*BalanceMargin)(nil),       // 8: binance.BalanceMargin
	(*Balance)(nil),             // 9: binance.Balance
	(*GetBalancesOut)(nil),      // 10: binance.GetBalancesOut
	(*GetTickerIn)(nil),         // 11: binance.GetTickerIn
	(*GetTickerOut)(nil),        // 12: binance.GetTickerOut
	(*GetCandlesIn)(nil),        // 13: binance.GetCandlesIn
	(*GetCandlesOut)(nil),       // 14: binance.GetCandlesOut
	(*CandlesData)(nil),         // 15: binance.CandlesData
	(*Decimal)(nil),             // 16: binance.Decimal
	nil,                         // 17: binance.GetTickerOut.DataEntry
	(*timestamp.Timestamp)(nil), // 18: google.protobuf.Timestamp
}
var file_binance_proto_depIdxs = []int32{
	16, // 0: binance.OrderOut.Price:type_name -> binance.Decimal
	16, // 1: binance.OrderOut.Amount:type_name -> binance.Decimal
	16, // 2: binance.OrderOut.Quantity:type_name -> binance.Decimal
	6,  // 3: binance.GetAccountOut.Data:type_name -> binance.Account
	7,  // 4: binance.GetAccountOut.DataMargin:type_name -> binance.AccountMargin
	9,  // 5: binance.Account.Balances:type_name -> binance.Balance
	8,  // 6: binance.AccountMargin.Balances:type_name -> binance.BalanceMargin
	16, // 7: binance.BalanceMargin.Borrowed:type_name -> binance.Decimal
	16, // 8: binance.BalanceMargin.Free:type_name -> binance.Decimal
	16, // 9: binance.BalanceMargin.Interest:type_name -> binance.Decimal
	16, // 10: binance.BalanceMargin.Locked:type_name -> binance.Decimal
	16, // 11: binance.BalanceMargin.NetAsset:type_name -> binance.Decimal
	16, // 12: binance.Balance.Amount:type_name -> binance.Decimal
	16, // 13: binance.Balance.Locked:type_name -> binance.Decimal
	9,  // 14: binance.GetBalancesOut.DataSpotBalance:type_name -> binance.Balance
	9,  // 15: binance.GetBalancesOut.DataMarginBalance:type_name -> binance.Balance
	17, // 16: binance.GetTickerOut.Data:type_name -> binance.GetTickerOut.DataEntry
	15, // 17: binance.GetCandlesOut.Candles:type_name -> binance.CandlesData
	18, // 18: binance.CandlesData.OpenTime:type_name -> google.protobuf.Timestamp
	16, // 19: binance.CandlesData.Open:type_name -> binance.Decimal
	16, // 20: binance.CandlesData.High:type_name -> binance.Decimal
	16, // 21: binance.CandlesData.Low:type_name -> binance.Decimal
	16, // 22: binance.CandlesData.Close:type_name -> binance.Decimal
	16, // 23: binance.CandlesData.Volume:type_name -> binance.Decimal
	18, // 24: binance.CandlesData.CloseTime:type_name -> google.protobuf.Timestamp
	16, // 25: binance.CandlesData.QuoteAssetVolume:type_name -> binance.Decimal
	16, // 26: binance.CandlesData.TakerBuyBaseAssetVolume:type_name -> binance.Decimal
	16, // 27: binance.CandlesData.TakerBuyQuoteAssetVolume:type_name -> binance.Decimal
	16, // 28: binance.GetTickerOut.DataEntry.value:type_name -> binance.Decimal
	1,  // 29: binance.BinanceServiceGRPC.CancelOrder:input_type -> binance.GetOrderIn
	1,  // 30: binance.BinanceServiceGRPC.GetOrder:input_type -> binance.GetOrderIn
	3,  // 31: binance.BinanceServiceGRPC.GetOrderHistory:input_type -> binance.EIn
	3,  // 32: binance.BinanceServiceGRPC.GetOpenOrders:input_type -> binance.EIn
	0,  // 33: binance.BinanceServiceGRPC.GetAccount:input_type -> binance.Empty
	3,  // 34: binance.BinanceServiceGRPC.GetBalances:input_type -> binance.EIn
	11, // 35: binance.BinanceServiceGRPC.GetTicker:input_type -> binance.GetTickerIn
	13, // 36: binance.BinanceServiceGRPC.GetCandles:input_type -> binance.GetCandlesIn
	2,  // 37: binance.BinanceServiceGRPC.CancelOrder:output_type -> binance.OrderOut
	2,  // 38: binance.BinanceServiceGRPC.GetOrder:output_type -> binance.OrderOut
	4,  // 39: binance.BinanceServiceGRPC.GetOrderHistory:output_type -> binance.EOut
	4,  // 40: binance.BinanceServiceGRPC.GetOpenOrders:output_type -> binance.EOut
	5,  // 41: binance.BinanceServiceGRPC.GetAccount:output_type -> binance.GetAccountOut
	10, // 42: binance.BinanceServiceGRPC.GetBalances:output_type -> binance.GetBalancesOut
	12, // 43: binance.BinanceServiceGRPC.GetTicker:output_type -> binance.GetTickerOut
	14, // 44: binance.BinanceServiceGRPC.GetCandles:output_type -> binance.GetCandlesOut
	37, // [37:45] is the sub-list for method output_type
	29, // [29:37] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_binance_proto_init() }
func file_binance_proto_init() {
	if File_binance_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_binance_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_binance_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrderIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_binance_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_binance_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_binance_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_binance_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_binance_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_binance_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountMargin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_binance_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalanceMargin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_binance_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Balance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_binance_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBalancesOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_binance_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTickerIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_binance_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTickerOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_binance_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCandlesIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_binance_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCandlesOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_binance_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CandlesData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_binance_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Decimal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_binance_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_binance_proto_goTypes,
		DependencyIndexes: file_binance_proto_depIdxs,
		MessageInfos:      file_binance_proto_msgTypes,
	}.Build()
	File_binance_proto = out.File
	file_binance_proto_rawDesc = nil
	file_binance_proto_goTypes = nil
	file_binance_proto_depIdxs = nil
}
