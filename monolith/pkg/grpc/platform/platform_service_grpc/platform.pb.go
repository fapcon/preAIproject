// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: platform.proto

package platform_service_grpc

import (
	any1 "github.com/golang/protobuf/ptypes/any"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_platform_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_platform_proto_rawDescGZIP(), []int{0}
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorMessage string `protobuf:"bytes,1,opt,name=ErrorMessage,proto3" json:"ErrorMessage,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_platform_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_platform_proto_rawDescGZIP(), []int{1}
}

func (x *Error) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// struct from exchange_list.go
type ExchangeTicker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         int64   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Pair       string  `protobuf:"bytes,2,opt,name=Pair,proto3" json:"Pair,omitempty"`
	Price      float32 `protobuf:"fixed32,3,opt,name=Price,proto3" json:"Price,omitempty"`
	ExchangeID int64   `protobuf:"varint,4,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
}

func (x *ExchangeTicker) Reset() {
	*x = ExchangeTicker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeTicker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeTicker) ProtoMessage() {}

func (x *ExchangeTicker) ProtoReflect() protoreflect.Message {
	mi := &file_platform_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeTicker.ProtoReflect.Descriptor instead.
func (*ExchangeTicker) Descriptor() ([]byte, []int) {
	return file_platform_proto_rawDescGZIP(), []int{2}
}

func (x *ExchangeTicker) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ExchangeTicker) GetPair() string {
	if x != nil {
		return x.Pair
	}
	return ""
}

func (x *ExchangeTicker) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *ExchangeTicker) GetExchangeID() int64 {
	if x != nil {
		return x.ExchangeID
	}
	return 0
}

type GetTickerOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode int64             `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Data      []*ExchangeTicker `protobuf:"bytes,2,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *GetTickerOut) Reset() {
	*x = GetTickerOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTickerOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTickerOut) ProtoMessage() {}

func (x *GetTickerOut) ProtoReflect() protoreflect.Message {
	mi := &file_platform_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTickerOut.ProtoReflect.Descriptor instead.
func (*GetTickerOut) Descriptor() ([]byte, []int) {
	return file_platform_proto_rawDescGZIP(), []int{3}
}

func (x *GetTickerOut) GetErrorCode() int64 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *GetTickerOut) GetData() []*ExchangeTicker {
	if x != nil {
		return x.Data
	}
	return nil
}

type ExchangeListOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode int64           `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Data      []*ExchangeList `protobuf:"bytes,2,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *ExchangeListOut) Reset() {
	*x = ExchangeListOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeListOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeListOut) ProtoMessage() {}

func (x *ExchangeListOut) ProtoReflect() protoreflect.Message {
	mi := &file_platform_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeListOut.ProtoReflect.Descriptor instead.
func (*ExchangeListOut) Descriptor() ([]byte, []int) {
	return file_platform_proto_rawDescGZIP(), []int{4}
}

func (x *ExchangeListOut) GetErrorCode() int64 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *ExchangeListOut) GetData() []*ExchangeList {
	if x != nil {
		return x.Data
	}
	return nil
}

// struct from exchange_list.go
type ExchangeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          int64                `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name        string               `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Description string               `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	Slug        string               `protobuf:"bytes,4,opt,name=Slug,proto3" json:"Slug,omitempty"`
	CreatedAt   *timestamp.Timestamp `protobuf:"bytes,5,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt   *timestamp.Timestamp `protobuf:"bytes,6,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	DeletedAt   *timestamp.Timestamp `protobuf:"bytes,7,opt,name=DeletedAt,proto3" json:"DeletedAt,omitempty"`
}

func (x *ExchangeList) Reset() {
	*x = ExchangeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeList) ProtoMessage() {}

func (x *ExchangeList) ProtoReflect() protoreflect.Message {
	mi := &file_platform_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeList.ProtoReflect.Descriptor instead.
func (*ExchangeList) Descriptor() ([]byte, []int) {
	return file_platform_proto_rawDescGZIP(), []int{5}
}

func (x *ExchangeList) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ExchangeList) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExchangeList) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ExchangeList) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *ExchangeList) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ExchangeList) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ExchangeList) GetDeletedAt() *timestamp.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

type ExchangeListID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeListID int64 `protobuf:"varint,1,opt,name=exchangeListID,proto3" json:"exchangeListID,omitempty"`
}

func (x *ExchangeListID) Reset() {
	*x = ExchangeListID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeListID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeListID) ProtoMessage() {}

func (x *ExchangeListID) ProtoReflect() protoreflect.Message {
	mi := &file_platform_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeListID.ProtoReflect.Descriptor instead.
func (*ExchangeListID) Descriptor() ([]byte, []int) {
	return file_platform_proto_rawDescGZIP(), []int{6}
}

func (x *ExchangeListID) GetExchangeListID() int64 {
	if x != nil {
		return x.ExchangeListID
	}
	return 0
}

type ExchangeAddIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID      int64  `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	Slug        string `protobuf:"bytes,4,opt,name=Slug,proto3" json:"Slug,omitempty"`
}

func (x *ExchangeAddIn) Reset() {
	*x = ExchangeAddIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeAddIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeAddIn) ProtoMessage() {}

func (x *ExchangeAddIn) ProtoReflect() protoreflect.Message {
	mi := &file_platform_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeAddIn.ProtoReflect.Descriptor instead.
func (*ExchangeAddIn) Descriptor() ([]byte, []int) {
	return file_platform_proto_rawDescGZIP(), []int{7}
}

func (x *ExchangeAddIn) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *ExchangeAddIn) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExchangeAddIn) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ExchangeAddIn) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

type ExchangeOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode int64 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Success   bool  `protobuf:"varint,2,opt,name=Success,proto3" json:"Success,omitempty"`
}

func (x *ExchangeOut) Reset() {
	*x = ExchangeOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeOut) ProtoMessage() {}

func (x *ExchangeOut) ProtoReflect() protoreflect.Message {
	mi := &file_platform_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeOut.ProtoReflect.Descriptor instead.
func (*ExchangeOut) Descriptor() ([]byte, []int) {
	return file_platform_proto_rawDescGZIP(), []int{8}
}

func (x *ExchangeOut) GetErrorCode() int64 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *ExchangeOut) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ExchangeUserKeyAddIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeID int64  `protobuf:"varint,1,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	UserID     int64  `protobuf:"varint,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	APIKey     string `protobuf:"bytes,3,opt,name=APIKey,proto3" json:"APIKey,omitempty"`
	SecretKey  string `protobuf:"bytes,4,opt,name=SecretKey,proto3" json:"SecretKey,omitempty"`
}

func (x *ExchangeUserKeyAddIn) Reset() {
	*x = ExchangeUserKeyAddIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeUserKeyAddIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeUserKeyAddIn) ProtoMessage() {}

func (x *ExchangeUserKeyAddIn) ProtoReflect() protoreflect.Message {
	mi := &file_platform_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeUserKeyAddIn.ProtoReflect.Descriptor instead.
func (*ExchangeUserKeyAddIn) Descriptor() ([]byte, []int) {
	return file_platform_proto_rawDescGZIP(), []int{9}
}

func (x *ExchangeUserKeyAddIn) GetExchangeID() int64 {
	if x != nil {
		return x.ExchangeID
	}
	return 0
}

func (x *ExchangeUserKeyAddIn) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *ExchangeUserKeyAddIn) GetAPIKey() string {
	if x != nil {
		return x.APIKey
	}
	return ""
}

func (x *ExchangeUserKeyAddIn) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

type ExchangeUserKeyIDIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeUserKeyID int64 `protobuf:"varint,1,opt,name=exchangeUserKeyID,proto3" json:"exchangeUserKeyID,omitempty"`
	UserID            int64 `protobuf:"varint,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (x *ExchangeUserKeyIDIn) Reset() {
	*x = ExchangeUserKeyIDIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeUserKeyIDIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeUserKeyIDIn) ProtoMessage() {}

func (x *ExchangeUserKeyIDIn) ProtoReflect() protoreflect.Message {
	mi := &file_platform_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeUserKeyIDIn.ProtoReflect.Descriptor instead.
func (*ExchangeUserKeyIDIn) Descriptor() ([]byte, []int) {
	return file_platform_proto_rawDescGZIP(), []int{10}
}

func (x *ExchangeUserKeyIDIn) GetExchangeUserKeyID() int64 {
	if x != nil {
		return x.ExchangeUserKeyID
	}
	return 0
}

func (x *ExchangeUserKeyIDIn) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type ExchangeUserListIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID int64 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (x *ExchangeUserListIn) Reset() {
	*x = ExchangeUserListIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeUserListIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeUserListIn) ProtoMessage() {}

func (x *ExchangeUserListIn) ProtoReflect() protoreflect.Message {
	mi := &file_platform_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeUserListIn.ProtoReflect.Descriptor instead.
func (*ExchangeUserListIn) Descriptor() ([]byte, []int) {
	return file_platform_proto_rawDescGZIP(), []int{11}
}

func (x *ExchangeUserListIn) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type ExchangeUserListOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode int64                `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Data      []*ExchangeUserKeyID `protobuf:"bytes,2,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *ExchangeUserListOut) Reset() {
	*x = ExchangeUserListOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeUserListOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeUserListOut) ProtoMessage() {}

func (x *ExchangeUserListOut) ProtoReflect() protoreflect.Message {
	mi := &file_platform_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeUserListOut.ProtoReflect.Descriptor instead.
func (*ExchangeUserListOut) Descriptor() ([]byte, []int) {
	return file_platform_proto_rawDescGZIP(), []int{12}
}

func (x *ExchangeUserListOut) GetErrorCode() int64 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *ExchangeUserListOut) GetData() []*ExchangeUserKeyID {
	if x != nil {
		return x.Data
	}
	return nil
}

// struct from exchange_user_key.go
type ExchangeUserKeyID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            int64          `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	ExchangeID    int64          `protobuf:"varint,2,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	UserID        int64          `protobuf:"varint,3,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Label         string         `protobuf:"bytes,4,opt,name=Label,proto3" json:"Label,omitempty"`
	MakeOrder     bool           `protobuf:"varint,5,opt,name=MakeOrder,proto3" json:"MakeOrder,omitempty"`
	APIKey        string         `protobuf:"bytes,6,opt,name=APIKey,proto3" json:"APIKey,omitempty"`
	SecretKey     string         `protobuf:"bytes,7,opt,name=SecretKey,proto3" json:"SecretKey,omitempty"`
	StatisticData *StatisticData `protobuf:"bytes,8,opt,name=StatisticData,proto3" json:"StatisticData,omitempty"`
}

func (x *ExchangeUserKeyID) Reset() {
	*x = ExchangeUserKeyID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeUserKeyID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeUserKeyID) ProtoMessage() {}

func (x *ExchangeUserKeyID) ProtoReflect() protoreflect.Message {
	mi := &file_platform_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeUserKeyID.ProtoReflect.Descriptor instead.
func (*ExchangeUserKeyID) Descriptor() ([]byte, []int) {
	return file_platform_proto_rawDescGZIP(), []int{13}
}

func (x *ExchangeUserKeyID) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ExchangeUserKeyID) GetExchangeID() int64 {
	if x != nil {
		return x.ExchangeID
	}
	return 0
}

func (x *ExchangeUserKeyID) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *ExchangeUserKeyID) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ExchangeUserKeyID) GetMakeOrder() bool {
	if x != nil {
		return x.MakeOrder
	}
	return false
}

func (x *ExchangeUserKeyID) GetAPIKey() string {
	if x != nil {
		return x.APIKey
	}
	return ""
}

func (x *ExchangeUserKeyID) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *ExchangeUserKeyID) GetStatisticData() *StatisticData {
	if x != nil {
		return x.StatisticData
	}
	return nil
}

// struct from exchange_user_key.go
type StatisticData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SumSell *Decimal `protobuf:"bytes,1,opt,name=SumSell,proto3" json:"SumSell,omitempty"`
	SumBuy  *Decimal `protobuf:"bytes,2,opt,name=SumBuy,proto3" json:"SumBuy,omitempty"`
	Profit  *Decimal `protobuf:"bytes,3,opt,name=Profit,proto3" json:"Profit,omitempty"`
	ToSell  *Decimal `protobuf:"bytes,4,opt,name=ToSell,proto3" json:"ToSell,omitempty"`
	ToEarn  *Decimal `protobuf:"bytes,5,opt,name=ToEarn,proto3" json:"ToEarn,omitempty"`
	Earned  *Decimal `protobuf:"bytes,6,opt,name=Earned,proto3" json:"Earned,omitempty"`
}

func (x *StatisticData) Reset() {
	*x = StatisticData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatisticData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatisticData) ProtoMessage() {}

func (x *StatisticData) ProtoReflect() protoreflect.Message {
	mi := &file_platform_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatisticData.ProtoReflect.Descriptor instead.
func (*StatisticData) Descriptor() ([]byte, []int) {
	return file_platform_proto_rawDescGZIP(), []int{14}
}

func (x *StatisticData) GetSumSell() *Decimal {
	if x != nil {
		return x.SumSell
	}
	return nil
}

func (x *StatisticData) GetSumBuy() *Decimal {
	if x != nil {
		return x.SumBuy
	}
	return nil
}

func (x *StatisticData) GetProfit() *Decimal {
	if x != nil {
		return x.Profit
	}
	return nil
}

func (x *StatisticData) GetToSell() *Decimal {
	if x != nil {
		return x.ToSell
	}
	return nil
}

func (x *StatisticData) GetToEarn() *Decimal {
	if x != nil {
		return x.ToEarn
	}
	return nil
}

func (x *StatisticData) GetEarned() *Decimal {
	if x != nil {
		return x.Earned
	}
	return nil
}

type WebhookProcessIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slug          string `protobuf:"bytes,1,opt,name=Slug,proto3" json:"Slug,omitempty"`
	XForwardedFor string `protobuf:"bytes,2,opt,name=XForwardedFor,proto3" json:"XForwardedFor,omitempty"`
	RemoteAddr    string `protobuf:"bytes,3,opt,name=RemoteAddr,proto3" json:"RemoteAddr,omitempty"`
}

func (x *WebhookProcessIn) Reset() {
	*x = WebhookProcessIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebhookProcessIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookProcessIn) ProtoMessage() {}

func (x *WebhookProcessIn) ProtoReflect() protoreflect.Message {
	mi := &file_platform_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookProcessIn.ProtoReflect.Descriptor instead.
func (*WebhookProcessIn) Descriptor() ([]byte, []int) {
	return file_platform_proto_rawDescGZIP(), []int{15}
}

func (x *WebhookProcessIn) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *WebhookProcessIn) GetXForwardedFor() string {
	if x != nil {
		return x.XForwardedFor
	}
	return ""
}

func (x *WebhookProcessIn) GetRemoteAddr() string {
	if x != nil {
		return x.RemoteAddr
	}
	return ""
}

type WebhookProcessOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode int64 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Success   bool  `protobuf:"varint,2,opt,name=Success,proto3" json:"Success,omitempty"`
}

func (x *WebhookProcessOut) Reset() {
	*x = WebhookProcessOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebhookProcessOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookProcessOut) ProtoMessage() {}

func (x *WebhookProcessOut) ProtoReflect() protoreflect.Message {
	mi := &file_platform_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookProcessOut.ProtoReflect.Descriptor instead.
func (*WebhookProcessOut) Descriptor() ([]byte, []int) {
	return file_platform_proto_rawDescGZIP(), []int{16}
}

func (x *WebhookProcessOut) GetErrorCode() int64 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *WebhookProcessOut) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type WriteOrderIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeOrder *OrderOut           `protobuf:"bytes,1,opt,name=ExchangeOrder,proto3" json:"ExchangeOrder,omitempty"`
	Webhook       *WebhookProcessDTO  `protobuf:"bytes,2,opt,name=Webhook,proto3" json:"Webhook,omitempty"`
	Bot           *Bot                `protobuf:"bytes,3,opt,name=Bot,proto3" json:"Bot,omitempty"`
	BuyOrder      *ExchangeOrderDTO   `protobuf:"bytes,4,opt,name=BuyOrder,proto3" json:"BuyOrder,omitempty"`
	Side          int64               `protobuf:"varint,5,opt,name=Side,proto3" json:"Side,omitempty"`
	OrderType     int64               `protobuf:"varint,6,opt,name=OrderType,proto3" json:"OrderType,omitempty"`
	Signal        *Signal             `protobuf:"bytes,7,opt,name=Signal,proto3" json:"Signal,omitempty"`
	Message       string              `protobuf:"bytes,8,opt,name=Message,proto3" json:"Message,omitempty"`
	UnitedOrders  int64               `protobuf:"varint,9,opt,name=UnitedOrders,proto3" json:"UnitedOrders,omitempty"`
	Key           *ExchangeUserKeyDTO `protobuf:"bytes,10,opt,name=Key,proto3" json:"Key,omitempty"`
}

func (x *WriteOrderIn) Reset() {
	*x = WriteOrderIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteOrderIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteOrderIn) ProtoMessage() {}

func (x *WriteOrderIn) ProtoReflect() protoreflect.Message {
	mi := &file_platform_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteOrderIn.ProtoReflect.Descriptor instead.
func (*WriteOrderIn) Descriptor() ([]byte, []int) {
	return file_platform_proto_rawDescGZIP(), []int{17}
}

func (x *WriteOrderIn) GetExchangeOrder() *OrderOut {
	if x != nil {
		return x.ExchangeOrder
	}
	return nil
}

func (x *WriteOrderIn) GetWebhook() *WebhookProcessDTO {
	if x != nil {
		return x.Webhook
	}
	return nil
}

func (x *WriteOrderIn) GetBot() *Bot {
	if x != nil {
		return x.Bot
	}
	return nil
}

func (x *WriteOrderIn) GetBuyOrder() *ExchangeOrderDTO {
	if x != nil {
		return x.BuyOrder
	}
	return nil
}

func (x *WriteOrderIn) GetSide() int64 {
	if x != nil {
		return x.Side
	}
	return 0
}

func (x *WriteOrderIn) GetOrderType() int64 {
	if x != nil {
		return x.OrderType
	}
	return 0
}

func (x *WriteOrderIn) GetSignal() *Signal {
	if x != nil {
		return x.Signal
	}
	return nil
}

func (x *WriteOrderIn) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *WriteOrderIn) GetUnitedOrders() int64 {
	if x != nil {
		return x.UnitedOrders
	}
	return 0
}

func (x *WriteOrderIn) GetKey() *ExchangeUserKeyDTO {
	if x != nil {
		return x.Key
	}
	return nil
}

// struct from exchanger_interface.go
type OrderOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientOrderID     string   `protobuf:"bytes,1,opt,name=ClientOrderID,proto3" json:"ClientOrderID,omitempty"`
	OrderID           int64    `protobuf:"varint,2,opt,name=OrderID,proto3" json:"OrderID,omitempty"`
	Price             *Decimal `protobuf:"bytes,3,opt,name=Price,proto3" json:"Price,omitempty"`
	Amount            *Decimal `protobuf:"bytes,4,opt,name=Amount,proto3" json:"Amount,omitempty"`
	Quantity          *Decimal `protobuf:"bytes,5,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
	Pair              string   `protobuf:"bytes,6,opt,name=Pair,proto3" json:"Pair,omitempty"`
	Status            int64    `protobuf:"varint,7,opt,name=Status,proto3" json:"Status,omitempty"`
	Side              int64    `protobuf:"varint,8,opt,name=Side,proto3" json:"Side,omitempty"`
	Type              int64    `protobuf:"varint,9,opt,name=Type,proto3" json:"Type,omitempty"`
	ExchangeOrderType int64    `protobuf:"varint,10,opt,name=ExchangeOrderType,proto3" json:"ExchangeOrderType,omitempty"`
	ErrorCode         int64    `protobuf:"varint,11,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Message           string   `protobuf:"bytes,12,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *OrderOut) Reset() {
	*x = OrderOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderOut) ProtoMessage() {}

func (x *OrderOut) ProtoReflect() protoreflect.Message {
	mi := &file_platform_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderOut.ProtoReflect.Descriptor instead.
func (*OrderOut) Descriptor() ([]byte, []int) {
	return file_platform_proto_rawDescGZIP(), []int{18}
}

func (x *OrderOut) GetClientOrderID() string {
	if x != nil {
		return x.ClientOrderID
	}
	return ""
}

func (x *OrderOut) GetOrderID() int64 {
	if x != nil {
		return x.OrderID
	}
	return 0
}

func (x *OrderOut) GetPrice() *Decimal {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *OrderOut) GetAmount() *Decimal {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *OrderOut) GetQuantity() *Decimal {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *OrderOut) GetPair() string {
	if x != nil {
		return x.Pair
	}
	return ""
}

func (x *OrderOut) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *OrderOut) GetSide() int64 {
	if x != nil {
		return x.Side
	}
	return 0
}

func (x *OrderOut) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *OrderOut) GetExchangeOrderType() int64 {
	if x != nil {
		return x.ExchangeOrderType
	}
	return 0
}

func (x *OrderOut) GetErrorCode() int64 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *OrderOut) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// struct from webhook_process_dto.go
type WebhookProcessDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            int64                `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	UUID          string               `protobuf:"bytes,2,opt,name=UUID,proto3" json:"UUID,omitempty"`
	BotUUID       string               `protobuf:"bytes,3,opt,name=BotUUID,proto3" json:"BotUUID,omitempty"`
	OrderID       int64                `protobuf:"varint,4,opt,name=OrderID,proto3" json:"OrderID,omitempty"`
	OrderUUID     string               `protobuf:"bytes,5,opt,name=OrderUUID,proto3" json:"OrderUUID,omitempty"`
	BotID         int64                `protobuf:"varint,6,opt,name=BotID,proto3" json:"BotID,omitempty"`
	UserID        int64                `protobuf:"varint,7,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Slug          string               `protobuf:"bytes,8,opt,name=Slug,proto3" json:"Slug,omitempty"`
	Status        int64                `protobuf:"varint,9,opt,name=Status,proto3" json:"Status,omitempty"`
	Message       string               `protobuf:"bytes,10,opt,name=Message,proto3" json:"Message,omitempty"`
	XForwardedFor string               `protobuf:"bytes,11,opt,name=XForwardedFor,proto3" json:"XForwardedFor,omitempty"`
	RemoteAddr    string               `protobuf:"bytes,12,opt,name=RemoteAddr,proto3" json:"RemoteAddr,omitempty"`
	CreatedAt     *timestamp.Timestamp `protobuf:"bytes,13,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt     *timestamp.Timestamp `protobuf:"bytes,14,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	DeletedAt     *NullTime            `protobuf:"bytes,15,opt,name=DeletedAt,proto3" json:"DeletedAt,omitempty"`
}

func (x *WebhookProcessDTO) Reset() {
	*x = WebhookProcessDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebhookProcessDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookProcessDTO) ProtoMessage() {}

func (x *WebhookProcessDTO) ProtoReflect() protoreflect.Message {
	mi := &file_platform_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookProcessDTO.ProtoReflect.Descriptor instead.
func (*WebhookProcessDTO) Descriptor() ([]byte, []int) {
	return file_platform_proto_rawDescGZIP(), []int{19}
}

func (x *WebhookProcessDTO) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *WebhookProcessDTO) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *WebhookProcessDTO) GetBotUUID() string {
	if x != nil {
		return x.BotUUID
	}
	return ""
}

func (x *WebhookProcessDTO) GetOrderID() int64 {
	if x != nil {
		return x.OrderID
	}
	return 0
}

func (x *WebhookProcessDTO) GetOrderUUID() string {
	if x != nil {
		return x.OrderUUID
	}
	return ""
}

func (x *WebhookProcessDTO) GetBotID() int64 {
	if x != nil {
		return x.BotID
	}
	return 0
}

func (x *WebhookProcessDTO) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *WebhookProcessDTO) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *WebhookProcessDTO) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *WebhookProcessDTO) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *WebhookProcessDTO) GetXForwardedFor() string {
	if x != nil {
		return x.XForwardedFor
	}
	return ""
}

func (x *WebhookProcessDTO) GetRemoteAddr() string {
	if x != nil {
		return x.RemoteAddr
	}
	return ""
}

func (x *WebhookProcessDTO) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *WebhookProcessDTO) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *WebhookProcessDTO) GetDeletedAt() *NullTime {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

// types.NullTime
type NullTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time  *timestamp.Timestamp `protobuf:"bytes,1,opt,name=Time,proto3" json:"Time,omitempty"`
	Valid bool                 `protobuf:"varint,2,opt,name=Valid,proto3" json:"Valid,omitempty"`
}

func (x *NullTime) Reset() {
	*x = NullTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NullTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NullTime) ProtoMessage() {}

func (x *NullTime) ProtoReflect() protoreflect.Message {
	mi := &file_platform_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NullTime.ProtoReflect.Descriptor instead.
func (*NullTime) Descriptor() ([]byte, []int) {
	return file_platform_proto_rawDescGZIP(), []int{20}
}

func (x *NullTime) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *NullTime) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

// struct from bot.go
type Bot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                   int64                `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Kind                 int64                `protobuf:"varint,2,opt,name=Kind,proto3" json:"Kind,omitempty"`
	UserID               int64                `protobuf:"varint,3,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Name                 string               `protobuf:"bytes,4,opt,name=Name,proto3" json:"Name,omitempty"`
	Description          string               `protobuf:"bytes,5,opt,name=Description,proto3" json:"Description,omitempty"`
	PairID               int64                `protobuf:"varint,6,opt,name=PairID,proto3" json:"PairID,omitempty"`
	FixedAmount          float32              `protobuf:"fixed32,7,opt,name=FixedAmount,proto3" json:"FixedAmount,omitempty"`
	ExchangeType         int64                `protobuf:"varint,8,opt,name=ExchangeType,proto3" json:"ExchangeType,omitempty"`
	ExchangeID           int64                `protobuf:"varint,9,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	OrderType            int64                `protobuf:"varint,10,opt,name=OrderType,proto3" json:"OrderType,omitempty"`
	SellPercent          float32              `protobuf:"fixed32,11,opt,name=SellPercent,proto3" json:"SellPercent,omitempty"`
	CommissionPercent    float32              `protobuf:"fixed32,12,opt,name=CommissionPercent,proto3" json:"CommissionPercent,omitempty"`
	UUID                 string               `protobuf:"bytes,13,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Active               bool                 `protobuf:"varint,14,opt,name=Active,proto3" json:"Active,omitempty"`
	LimitOrder           bool                 `protobuf:"varint,15,opt,name=LimitOrder,proto3" json:"LimitOrder,omitempty"`
	LimitSellPercent     float32              `protobuf:"fixed32,16,opt,name=LimitSellPercent,proto3" json:"LimitSellPercent,omitempty"`
	LimitBuyPercent      float32              `protobuf:"fixed32,17,opt,name=LimitBuyPercent,proto3" json:"LimitBuyPercent,omitempty"`
	AutoSell             bool                 `protobuf:"varint,18,opt,name=AutoSell,proto3" json:"AutoSell,omitempty"`
	AutoLimitSellPercent float32              `protobuf:"fixed32,19,opt,name=AutoLimitSellPercent,proto3" json:"AutoLimitSellPercent,omitempty"`
	OrderCountLimit      bool                 `protobuf:"varint,20,opt,name=OrderCountLimit,proto3" json:"OrderCountLimit,omitempty"`
	OrderCount           int64                `protobuf:"varint,21,opt,name=OrderCount,proto3" json:"OrderCount,omitempty"`
	Pairs                []*StrategyPair      `protobuf:"bytes,22,rep,name=Pairs,proto3" json:"Pairs,omitempty"`
	CreatedAt            *timestamp.Timestamp `protobuf:"bytes,23,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt            *timestamp.Timestamp `protobuf:"bytes,24,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	DeletedAt            *timestamp.Timestamp `protobuf:"bytes,25,opt,name=DeletedAt,proto3" json:"DeletedAt,omitempty"`
}

func (x *Bot) Reset() {
	*x = Bot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bot) ProtoMessage() {}

func (x *Bot) ProtoReflect() protoreflect.Message {
	mi := &file_platform_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bot.ProtoReflect.Descriptor instead.
func (*Bot) Descriptor() ([]byte, []int) {
	return file_platform_proto_rawDescGZIP(), []int{21}
}

func (x *Bot) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Bot) GetKind() int64 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *Bot) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *Bot) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Bot) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Bot) GetPairID() int64 {
	if x != nil {
		return x.PairID
	}
	return 0
}

func (x *Bot) GetFixedAmount() float32 {
	if x != nil {
		return x.FixedAmount
	}
	return 0
}

func (x *Bot) GetExchangeType() int64 {
	if x != nil {
		return x.ExchangeType
	}
	return 0
}

func (x *Bot) GetExchangeID() int64 {
	if x != nil {
		return x.ExchangeID
	}
	return 0
}

func (x *Bot) GetOrderType() int64 {
	if x != nil {
		return x.OrderType
	}
	return 0
}

func (x *Bot) GetSellPercent() float32 {
	if x != nil {
		return x.SellPercent
	}
	return 0
}

func (x *Bot) GetCommissionPercent() float32 {
	if x != nil {
		return x.CommissionPercent
	}
	return 0
}

func (x *Bot) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *Bot) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *Bot) GetLimitOrder() bool {
	if x != nil {
		return x.LimitOrder
	}
	return false
}

func (x *Bot) GetLimitSellPercent() float32 {
	if x != nil {
		return x.LimitSellPercent
	}
	return 0
}

func (x *Bot) GetLimitBuyPercent() float32 {
	if x != nil {
		return x.LimitBuyPercent
	}
	return 0
}

func (x *Bot) GetAutoSell() bool {
	if x != nil {
		return x.AutoSell
	}
	return false
}

func (x *Bot) GetAutoLimitSellPercent() float32 {
	if x != nil {
		return x.AutoLimitSellPercent
	}
	return 0
}

func (x *Bot) GetOrderCountLimit() bool {
	if x != nil {
		return x.OrderCountLimit
	}
	return false
}

func (x *Bot) GetOrderCount() int64 {
	if x != nil {
		return x.OrderCount
	}
	return 0
}

func (x *Bot) GetPairs() []*StrategyPair {
	if x != nil {
		return x.Pairs
	}
	return nil
}

func (x *Bot) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Bot) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Bot) GetDeletedAt() *timestamp.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

// struct from strategy_pair.go
type StrategyPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	StrategyID int64 `protobuf:"varint,2,opt,name=StrategyID,proto3" json:"StrategyID,omitempty"`
	PairID     int64 `protobuf:"varint,3,opt,name=PairID,proto3" json:"PairID,omitempty"`
}

func (x *StrategyPair) Reset() {
	*x = StrategyPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StrategyPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrategyPair) ProtoMessage() {}

func (x *StrategyPair) ProtoReflect() protoreflect.Message {
	mi := &file_platform_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrategyPair.ProtoReflect.Descriptor instead.
func (*StrategyPair) Descriptor() ([]byte, []int) {
	return file_platform_proto_rawDescGZIP(), []int{22}
}

func (x *StrategyPair) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *StrategyPair) GetStrategyID() int64 {
	if x != nil {
		return x.StrategyID
	}
	return 0
}

func (x *StrategyPair) GetPairID() int64 {
	if x != nil {
		return x.PairID
	}
	return 0
}

// struct from exchange_order_dto.go
type ExchangeOrderDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                int64                `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	UUID              string               `protobuf:"bytes,2,opt,name=UUID,proto3" json:"UUID,omitempty"`
	BotUUID           string               `protobuf:"bytes,3,opt,name=BotUUID,proto3" json:"BotUUID,omitempty"`
	OrderType         int64                `protobuf:"varint,4,opt,name=OrderType,proto3" json:"OrderType,omitempty"`
	ExchangeOrderType int64                `protobuf:"varint,5,opt,name=ExchangeOrderType,proto3" json:"ExchangeOrderType,omitempty"`
	Side              int64                `protobuf:"varint,6,opt,name=Side,proto3" json:"Side,omitempty"`
	ExchangeOrderID   int64                `protobuf:"varint,7,opt,name=ExchangeOrderID,proto3" json:"ExchangeOrderID,omitempty"`
	UnitedOrders      int64                `protobuf:"varint,8,opt,name=UnitedOrders,proto3" json:"UnitedOrders,omitempty"`
	UserID            int64                `protobuf:"varint,9,opt,name=UserID,proto3" json:"UserID,omitempty"`
	ExchangeID        int64                `protobuf:"varint,10,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	PairID            int64                `protobuf:"varint,11,opt,name=PairID,proto3" json:"PairID,omitempty"`
	BuyOrderID        int64                `protobuf:"varint,12,opt,name=BuyOrderID,proto3" json:"BuyOrderID,omitempty"`
	ApiKeyID          int64                `protobuf:"varint,13,opt,name=ApiKeyID,proto3" json:"ApiKeyID,omitempty"`
	Pair              string               `protobuf:"bytes,14,opt,name=Pair,proto3" json:"Pair,omitempty"`
	Amount            *Decimal             `protobuf:"bytes,15,opt,name=Amount,proto3" json:"Amount,omitempty"`
	Quantity          *Decimal             `protobuf:"bytes,16,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
	Price             *Decimal             `protobuf:"bytes,17,opt,name=Price,proto3" json:"Price,omitempty"`
	BuyPrice          *Decimal             `protobuf:"bytes,18,opt,name=BuyPrice,proto3" json:"BuyPrice,omitempty"`
	Status            int64                `protobuf:"varint,19,opt,name=Status,proto3" json:"Status,omitempty"`
	WebHookUUID       string               `protobuf:"bytes,20,opt,name=WebHookUUID,proto3" json:"WebHookUUID,omitempty"`
	Message           string               `protobuf:"bytes,21,opt,name=Message,proto3" json:"Message,omitempty"`
	CreatedAt         *timestamp.Timestamp `protobuf:"bytes,22,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt         *timestamp.Timestamp `protobuf:"bytes,23,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	DeletedAt         *NullTime            `protobuf:"bytes,24,opt,name=DeletedAt,proto3" json:"DeletedAt,omitempty"`
}

func (x *ExchangeOrderDTO) Reset() {
	*x = ExchangeOrderDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeOrderDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeOrderDTO) ProtoMessage() {}

func (x *ExchangeOrderDTO) ProtoReflect() protoreflect.Message {
	mi := &file_platform_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeOrderDTO.ProtoReflect.Descriptor instead.
func (*ExchangeOrderDTO) Descriptor() ([]byte, []int) {
	return file_platform_proto_rawDescGZIP(), []int{23}
}

func (x *ExchangeOrderDTO) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ExchangeOrderDTO) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *ExchangeOrderDTO) GetBotUUID() string {
	if x != nil {
		return x.BotUUID
	}
	return ""
}

func (x *ExchangeOrderDTO) GetOrderType() int64 {
	if x != nil {
		return x.OrderType
	}
	return 0
}

func (x *ExchangeOrderDTO) GetExchangeOrderType() int64 {
	if x != nil {
		return x.ExchangeOrderType
	}
	return 0
}

func (x *ExchangeOrderDTO) GetSide() int64 {
	if x != nil {
		return x.Side
	}
	return 0
}

func (x *ExchangeOrderDTO) GetExchangeOrderID() int64 {
	if x != nil {
		return x.ExchangeOrderID
	}
	return 0
}

func (x *ExchangeOrderDTO) GetUnitedOrders() int64 {
	if x != nil {
		return x.UnitedOrders
	}
	return 0
}

func (x *ExchangeOrderDTO) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *ExchangeOrderDTO) GetExchangeID() int64 {
	if x != nil {
		return x.ExchangeID
	}
	return 0
}

func (x *ExchangeOrderDTO) GetPairID() int64 {
	if x != nil {
		return x.PairID
	}
	return 0
}

func (x *ExchangeOrderDTO) GetBuyOrderID() int64 {
	if x != nil {
		return x.BuyOrderID
	}
	return 0
}

func (x *ExchangeOrderDTO) GetApiKeyID() int64 {
	if x != nil {
		return x.ApiKeyID
	}
	return 0
}

func (x *ExchangeOrderDTO) GetPair() string {
	if x != nil {
		return x.Pair
	}
	return ""
}

func (x *ExchangeOrderDTO) GetAmount() *Decimal {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *ExchangeOrderDTO) GetQuantity() *Decimal {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *ExchangeOrderDTO) GetPrice() *Decimal {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *ExchangeOrderDTO) GetBuyPrice() *Decimal {
	if x != nil {
		return x.BuyPrice
	}
	return nil
}

func (x *ExchangeOrderDTO) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ExchangeOrderDTO) GetWebHookUUID() string {
	if x != nil {
		return x.WebHookUUID
	}
	return ""
}

func (x *ExchangeOrderDTO) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ExchangeOrderDTO) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ExchangeOrderDTO) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ExchangeOrderDTO) GetDeletedAt() *NullTime {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

type Signal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderType int64    `protobuf:"varint,1,opt,name=OrderType,proto3" json:"OrderType,omitempty"`
	Pair      string   `protobuf:"bytes,2,opt,name=Pair,proto3" json:"Pair,omitempty"`
	PairID    int64    `protobuf:"varint,3,opt,name=PairID,proto3" json:"PairID,omitempty"`
	PairPrice *Decimal `protobuf:"bytes,4,opt,name=PairPrice,proto3" json:"PairPrice,omitempty"`
	BotUUID   string   `protobuf:"bytes,5,opt,name=BotUUID,proto3" json:"BotUUID,omitempty"`
}

func (x *Signal) Reset() {
	*x = Signal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signal) ProtoMessage() {}

func (x *Signal) ProtoReflect() protoreflect.Message {
	mi := &file_platform_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signal.ProtoReflect.Descriptor instead.
func (*Signal) Descriptor() ([]byte, []int) {
	return file_platform_proto_rawDescGZIP(), []int{24}
}

func (x *Signal) GetOrderType() int64 {
	if x != nil {
		return x.OrderType
	}
	return 0
}

func (x *Signal) GetPair() string {
	if x != nil {
		return x.Pair
	}
	return ""
}

func (x *Signal) GetPairID() int64 {
	if x != nil {
		return x.PairID
	}
	return 0
}

func (x *Signal) GetPairPrice() *Decimal {
	if x != nil {
		return x.PairPrice
	}
	return nil
}

func (x *Signal) GetBotUUID() string {
	if x != nil {
		return x.BotUUID
	}
	return ""
}

// struct from exchange_user_key_dto.go
type ExchangeUserKeyDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         int64                `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	ExchangeID int64                `protobuf:"varint,2,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	UserID     int64                `protobuf:"varint,3,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Label      string               `protobuf:"bytes,4,opt,name=Label,proto3" json:"Label,omitempty"`
	MakeOrder  bool                 `protobuf:"varint,5,opt,name=MakeOrder,proto3" json:"MakeOrder,omitempty"`
	APIKey     string               `protobuf:"bytes,6,opt,name=APIKey,proto3" json:"APIKey,omitempty"`
	SecretKey  string               `protobuf:"bytes,7,opt,name=SecretKey,proto3" json:"SecretKey,omitempty"`
	CreatedAt  *timestamp.Timestamp `protobuf:"bytes,8,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt  *timestamp.Timestamp `protobuf:"bytes,9,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	DeletedAt  *NullTime            `protobuf:"bytes,10,opt,name=DeletedAt,proto3" json:"DeletedAt,omitempty"`
}

func (x *ExchangeUserKeyDTO) Reset() {
	*x = ExchangeUserKeyDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeUserKeyDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeUserKeyDTO) ProtoMessage() {}

func (x *ExchangeUserKeyDTO) ProtoReflect() protoreflect.Message {
	mi := &file_platform_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeUserKeyDTO.ProtoReflect.Descriptor instead.
func (*ExchangeUserKeyDTO) Descriptor() ([]byte, []int) {
	return file_platform_proto_rawDescGZIP(), []int{25}
}

func (x *ExchangeUserKeyDTO) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ExchangeUserKeyDTO) GetExchangeID() int64 {
	if x != nil {
		return x.ExchangeID
	}
	return 0
}

func (x *ExchangeUserKeyDTO) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *ExchangeUserKeyDTO) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ExchangeUserKeyDTO) GetMakeOrder() bool {
	if x != nil {
		return x.MakeOrder
	}
	return false
}

func (x *ExchangeUserKeyDTO) GetAPIKey() string {
	if x != nil {
		return x.APIKey
	}
	return ""
}

func (x *ExchangeUserKeyDTO) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *ExchangeUserKeyDTO) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ExchangeUserKeyDTO) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ExchangeUserKeyDTO) GetDeletedAt() *NullTime {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

// for RPC method CancelOrder
type OrderIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExClient *any1.Any           `protobuf:"bytes,1,opt,name=ExClient,proto3" json:"ExClient,omitempty"`
	Webhook  *WebhookProcessDTO  `protobuf:"bytes,2,opt,name=Webhook,proto3" json:"Webhook,omitempty"`
	Bot      *Bot                `protobuf:"bytes,3,opt,name=Bot,proto3" json:"Bot,omitempty"`
	Signal   *Signal             `protobuf:"bytes,4,opt,name=Signal,proto3" json:"Signal,omitempty"`
	Key      *ExchangeUserKeyDTO `protobuf:"bytes,5,opt,name=Key,proto3" json:"Key,omitempty"`
	BuyOrder *ExchangeOrderDTO   `protobuf:"bytes,6,opt,name=BuyOrder,proto3" json:"BuyOrder,omitempty"`
}

func (x *OrderIn) Reset() {
	*x = OrderIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderIn) ProtoMessage() {}

func (x *OrderIn) ProtoReflect() protoreflect.Message {
	mi := &file_platform_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderIn.ProtoReflect.Descriptor instead.
func (*OrderIn) Descriptor() ([]byte, []int) {
	return file_platform_proto_rawDescGZIP(), []int{26}
}

func (x *OrderIn) GetExClient() *any1.Any {
	if x != nil {
		return x.ExClient
	}
	return nil
}

func (x *OrderIn) GetWebhook() *WebhookProcessDTO {
	if x != nil {
		return x.Webhook
	}
	return nil
}

func (x *OrderIn) GetBot() *Bot {
	if x != nil {
		return x.Bot
	}
	return nil
}

func (x *OrderIn) GetSignal() *Signal {
	if x != nil {
		return x.Signal
	}
	return nil
}

func (x *OrderIn) GetKey() *ExchangeUserKeyDTO {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *OrderIn) GetBuyOrder() *ExchangeOrderDTO {
	if x != nil {
		return x.BuyOrder
	}
	return nil
}

type CancelOrderOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeOrders []*OrderOut         `protobuf:"bytes,1,rep,name=ExchangeOrders,proto3" json:"ExchangeOrders,omitempty"`
	PlatformOrders []*ExchangeOrderDTO `protobuf:"bytes,2,rep,name=PlatformOrders,proto3" json:"PlatformOrders,omitempty"`
}

func (x *CancelOrderOut) Reset() {
	*x = CancelOrderOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelOrderOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelOrderOut) ProtoMessage() {}

func (x *CancelOrderOut) ProtoReflect() protoreflect.Message {
	mi := &file_platform_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelOrderOut.ProtoReflect.Descriptor instead.
func (*CancelOrderOut) Descriptor() ([]byte, []int) {
	return file_platform_proto_rawDescGZIP(), []int{27}
}

func (x *CancelOrderOut) GetExchangeOrders() []*OrderOut {
	if x != nil {
		return x.ExchangeOrders
	}
	return nil
}

func (x *CancelOrderOut) GetPlatformOrders() []*ExchangeOrderDTO {
	if x != nil {
		return x.PlatformOrders
	}
	return nil
}

// for RPC method UpdateWebhookStatus
type UpdateWebhookStatusIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bot      *Bot               `protobuf:"bytes,1,opt,name=Bot,proto3" json:"Bot,omitempty"`
	WebHook  *WebhookProcessDTO `protobuf:"bytes,2,opt,name=WebHook,proto3" json:"WebHook,omitempty"`
	OrderDTO *ExchangeOrderDTO  `protobuf:"bytes,3,opt,name=OrderDTO,proto3" json:"OrderDTO,omitempty"`
	Message  string             `protobuf:"bytes,4,opt,name=Message,proto3" json:"Message,omitempty"`
	Status   int64              `protobuf:"varint,5,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *UpdateWebhookStatusIn) Reset() {
	*x = UpdateWebhookStatusIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWebhookStatusIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWebhookStatusIn) ProtoMessage() {}

func (x *UpdateWebhookStatusIn) ProtoReflect() protoreflect.Message {
	mi := &file_platform_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWebhookStatusIn.ProtoReflect.Descriptor instead.
func (*UpdateWebhookStatusIn) Descriptor() ([]byte, []int) {
	return file_platform_proto_rawDescGZIP(), []int{28}
}

func (x *UpdateWebhookStatusIn) GetBot() *Bot {
	if x != nil {
		return x.Bot
	}
	return nil
}

func (x *UpdateWebhookStatusIn) GetWebHook() *WebhookProcessDTO {
	if x != nil {
		return x.WebHook
	}
	return nil
}

func (x *UpdateWebhookStatusIn) GetOrderDTO() *ExchangeOrderDTO {
	if x != nil {
		return x.OrderDTO
	}
	return nil
}

func (x *UpdateWebhookStatusIn) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateWebhookStatusIn) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

// for RPC method GetBot
type GetBotIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BotUUID string `protobuf:"bytes,1,opt,name=BotUUID,proto3" json:"BotUUID,omitempty"`
}

func (x *GetBotIn) Reset() {
	*x = GetBotIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBotIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBotIn) ProtoMessage() {}

func (x *GetBotIn) ProtoReflect() protoreflect.Message {
	mi := &file_platform_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBotIn.ProtoReflect.Descriptor instead.
func (*GetBotIn) Descriptor() ([]byte, []int) {
	return file_platform_proto_rawDescGZIP(), []int{29}
}

func (x *GetBotIn) GetBotUUID() string {
	if x != nil {
		return x.BotUUID
	}
	return ""
}

type GetBotOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bot   *Bot   `protobuf:"bytes,1,opt,name=Bot,proto3" json:"Bot,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *GetBotOut) Reset() {
	*x = GetBotOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBotOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBotOut) ProtoMessage() {}

func (x *GetBotOut) ProtoReflect() protoreflect.Message {
	mi := &file_platform_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBotOut.ProtoReflect.Descriptor instead.
func (*GetBotOut) Descriptor() ([]byte, []int) {
	return file_platform_proto_rawDescGZIP(), []int{30}
}

func (x *GetBotOut) GetBot() *Bot {
	if x != nil {
		return x.Bot
	}
	return nil
}

func (x *GetBotOut) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// for RPC method CreateWebhookProcess
type CreateWebhookProcessIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bot              *Bot              `protobuf:"bytes,1,opt,name=Bot,proto3" json:"Bot,omitempty"`
	WebHookProcessIn *WebhookProcessIn `protobuf:"bytes,2,opt,name=WebHookProcessIn,proto3" json:"WebHookProcessIn,omitempty"`
}

func (x *CreateWebhookProcessIn) Reset() {
	*x = CreateWebhookProcessIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWebhookProcessIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWebhookProcessIn) ProtoMessage() {}

func (x *CreateWebhookProcessIn) ProtoReflect() protoreflect.Message {
	mi := &file_platform_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWebhookProcessIn.ProtoReflect.Descriptor instead.
func (*CreateWebhookProcessIn) Descriptor() ([]byte, []int) {
	return file_platform_proto_rawDescGZIP(), []int{31}
}

func (x *CreateWebhookProcessIn) GetBot() *Bot {
	if x != nil {
		return x.Bot
	}
	return nil
}

func (x *CreateWebhookProcessIn) GetWebHookProcessIn() *WebhookProcessIn {
	if x != nil {
		return x.WebHookProcessIn
	}
	return nil
}

type CreateWebhookProcessOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebhookProcessDTO *WebhookProcessDTO `protobuf:"bytes,1,opt,name=WebhookProcessDTO,proto3" json:"WebhookProcessDTO,omitempty"`
	Error             string             `protobuf:"bytes,2,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *CreateWebhookProcessOut) Reset() {
	*x = CreateWebhookProcessOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWebhookProcessOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWebhookProcessOut) ProtoMessage() {}

func (x *CreateWebhookProcessOut) ProtoReflect() protoreflect.Message {
	mi := &file_platform_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWebhookProcessOut.ProtoReflect.Descriptor instead.
func (*CreateWebhookProcessOut) Descriptor() ([]byte, []int) {
	return file_platform_proto_rawDescGZIP(), []int{32}
}

func (x *CreateWebhookProcessOut) GetWebhookProcessDTO() *WebhookProcessDTO {
	if x != nil {
		return x.WebhookProcessDTO
	}
	return nil
}

func (x *CreateWebhookProcessOut) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// for RPC method GetUserKeys
type GetUserKeysIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeID int64 `protobuf:"varint,1,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	UserID     int64 `protobuf:"varint,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (x *GetUserKeysIn) Reset() {
	*x = GetUserKeysIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserKeysIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserKeysIn) ProtoMessage() {}

func (x *GetUserKeysIn) ProtoReflect() protoreflect.Message {
	mi := &file_platform_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserKeysIn.ProtoReflect.Descriptor instead.
func (*GetUserKeysIn) Descriptor() ([]byte, []int) {
	return file_platform_proto_rawDescGZIP(), []int{33}
}

func (x *GetUserKeysIn) GetExchangeID() int64 {
	if x != nil {
		return x.ExchangeID
	}
	return 0
}

func (x *GetUserKeysIn) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type GetUserKeysOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeUserKeyDTO []*ExchangeUserKeyDTO `protobuf:"bytes,1,rep,name=ExchangeUserKeyDTO,proto3" json:"ExchangeUserKeyDTO,omitempty"`
	Error              string                `protobuf:"bytes,2,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *GetUserKeysOut) Reset() {
	*x = GetUserKeysOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserKeysOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserKeysOut) ProtoMessage() {}

func (x *GetUserKeysOut) ProtoReflect() protoreflect.Message {
	mi := &file_platform_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserKeysOut.ProtoReflect.Descriptor instead.
func (*GetUserKeysOut) Descriptor() ([]byte, []int) {
	return file_platform_proto_rawDescGZIP(), []int{34}
}

func (x *GetUserKeysOut) GetExchangeUserKeyDTO() []*ExchangeUserKeyDTO {
	if x != nil {
		return x.ExchangeUserKeyDTO
	}
	return nil
}

func (x *GetUserKeysOut) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// for RPC method WriteWebhookHistory
type WebhookProcessHistoryDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          int64                `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	UserID      int64                `protobuf:"varint,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	ExchangeID  int64                `protobuf:"varint,3,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	WebhookUUID string               `protobuf:"bytes,4,opt,name=WebhookUUID,proto3" json:"WebhookUUID,omitempty"`
	Status      int64                `protobuf:"varint,5,opt,name=Status,proto3" json:"Status,omitempty"`
	Message     *NullString          `protobuf:"bytes,6,opt,name=Message,proto3" json:"Message,omitempty"`
	CreatedAt   *timestamp.Timestamp `protobuf:"bytes,7,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt   *timestamp.Timestamp `protobuf:"bytes,8,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	DeletedAt   *NullTime            `protobuf:"bytes,9,opt,name=DeletedAt,proto3" json:"DeletedAt,omitempty"`
}

func (x *WebhookProcessHistoryDTO) Reset() {
	*x = WebhookProcessHistoryDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebhookProcessHistoryDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookProcessHistoryDTO) ProtoMessage() {}

func (x *WebhookProcessHistoryDTO) ProtoReflect() protoreflect.Message {
	mi := &file_platform_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookProcessHistoryDTO.ProtoReflect.Descriptor instead.
func (*WebhookProcessHistoryDTO) Descriptor() ([]byte, []int) {
	return file_platform_proto_rawDescGZIP(), []int{35}
}

func (x *WebhookProcessHistoryDTO) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *WebhookProcessHistoryDTO) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *WebhookProcessHistoryDTO) GetExchangeID() int64 {
	if x != nil {
		return x.ExchangeID
	}
	return 0
}

func (x *WebhookProcessHistoryDTO) GetWebhookUUID() string {
	if x != nil {
		return x.WebhookUUID
	}
	return ""
}

func (x *WebhookProcessHistoryDTO) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *WebhookProcessHistoryDTO) GetMessage() *NullString {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *WebhookProcessHistoryDTO) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *WebhookProcessHistoryDTO) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *WebhookProcessHistoryDTO) GetDeletedAt() *NullTime {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

type NullString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	String_ string `protobuf:"bytes,1,opt,name=String,proto3" json:"String,omitempty"`
	Valid   bool   `protobuf:"varint,2,opt,name=Valid,proto3" json:"Valid,omitempty"`
}

func (x *NullString) Reset() {
	*x = NullString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NullString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NullString) ProtoMessage() {}

func (x *NullString) ProtoReflect() protoreflect.Message {
	mi := &file_platform_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NullString.ProtoReflect.Descriptor instead.
func (*NullString) Descriptor() ([]byte, []int) {
	return file_platform_proto_rawDescGZIP(), []int{36}
}

func (x *NullString) GetString_() string {
	if x != nil {
		return x.String_
	}
	return ""
}

func (x *NullString) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

// for RPC method WriteOrderLog
type ExchangeOrderLogDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         int64                `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	UUID       string               `protobuf:"bytes,2,opt,name=UUID,proto3" json:"UUID,omitempty"`
	OrderID    int64                `protobuf:"varint,3,opt,name=OrderID,proto3" json:"OrderID,omitempty"`
	ExchangeID int64                `protobuf:"varint,4,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	Pair       string               `protobuf:"bytes,5,opt,name=Pair,proto3" json:"Pair,omitempty"`
	Quantity   *Decimal             `protobuf:"bytes,6,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
	Amount     *Decimal             `protobuf:"bytes,7,opt,name=Amount,proto3" json:"Amount,omitempty"`
	Price      *Decimal             `protobuf:"bytes,8,opt,name=Price,proto3" json:"Price,omitempty"`
	Status     int64                `protobuf:"varint,9,opt,name=Status,proto3" json:"Status,omitempty"`
	CreatedAt  *timestamp.Timestamp `protobuf:"bytes,10,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt  *timestamp.Timestamp `protobuf:"bytes,11,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	DeletedAt  *NullTime            `protobuf:"bytes,12,opt,name=DeletedAt,proto3" json:"DeletedAt,omitempty"`
}

func (x *ExchangeOrderLogDTO) Reset() {
	*x = ExchangeOrderLogDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeOrderLogDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeOrderLogDTO) ProtoMessage() {}

func (x *ExchangeOrderLogDTO) ProtoReflect() protoreflect.Message {
	mi := &file_platform_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeOrderLogDTO.ProtoReflect.Descriptor instead.
func (*ExchangeOrderLogDTO) Descriptor() ([]byte, []int) {
	return file_platform_proto_rawDescGZIP(), []int{37}
}

func (x *ExchangeOrderLogDTO) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ExchangeOrderLogDTO) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *ExchangeOrderLogDTO) GetOrderID() int64 {
	if x != nil {
		return x.OrderID
	}
	return 0
}

func (x *ExchangeOrderLogDTO) GetExchangeID() int64 {
	if x != nil {
		return x.ExchangeID
	}
	return 0
}

func (x *ExchangeOrderLogDTO) GetPair() string {
	if x != nil {
		return x.Pair
	}
	return ""
}

func (x *ExchangeOrderLogDTO) GetQuantity() *Decimal {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *ExchangeOrderLogDTO) GetAmount() *Decimal {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *ExchangeOrderLogDTO) GetPrice() *Decimal {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *ExchangeOrderLogDTO) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ExchangeOrderLogDTO) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ExchangeOrderLogDTO) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ExchangeOrderLogDTO) GetDeletedAt() *NullTime {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

// for RPC method OrderSellLimit
type OrderSellLimitIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderIn      *OrderIn `protobuf:"bytes,1,opt,name=OrderIn,proto3" json:"OrderIn,omitempty"`
	Quantity     *Decimal `protobuf:"bytes,2,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
	Price        *Decimal `protobuf:"bytes,3,opt,name=Price,proto3" json:"Price,omitempty"`
	UnitedOrders int64    `protobuf:"varint,4,opt,name=UnitedOrders,proto3" json:"UnitedOrders,omitempty"`
}

func (x *OrderSellLimitIn) Reset() {
	*x = OrderSellLimitIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderSellLimitIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderSellLimitIn) ProtoMessage() {}

func (x *OrderSellLimitIn) ProtoReflect() protoreflect.Message {
	mi := &file_platform_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderSellLimitIn.ProtoReflect.Descriptor instead.
func (*OrderSellLimitIn) Descriptor() ([]byte, []int) {
	return file_platform_proto_rawDescGZIP(), []int{38}
}

func (x *OrderSellLimitIn) GetOrderIn() *OrderIn {
	if x != nil {
		return x.OrderIn
	}
	return nil
}

func (x *OrderSellLimitIn) GetQuantity() *Decimal {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *OrderSellLimitIn) GetPrice() *Decimal {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *OrderSellLimitIn) GetUnitedOrders() int64 {
	if x != nil {
		return x.UnitedOrders
	}
	return 0
}

// for RPC method PutOrder
type PutOrderOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode int64 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Success   bool  `protobuf:"varint,2,opt,name=Success,proto3" json:"Success,omitempty"`
}

func (x *PutOrderOut) Reset() {
	*x = PutOrderOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutOrderOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutOrderOut) ProtoMessage() {}

func (x *PutOrderOut) ProtoReflect() protoreflect.Message {
	mi := &file_platform_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutOrderOut.ProtoReflect.Descriptor instead.
func (*PutOrderOut) Descriptor() ([]byte, []int) {
	return file_platform_proto_rawDescGZIP(), []int{39}
}

func (x *PutOrderOut) GetErrorCode() int64 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *PutOrderOut) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// for RPC method GetBotWebhooks
type GetBotRelationIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BotUUID string `protobuf:"bytes,1,opt,name=BotUUID,proto3" json:"BotUUID,omitempty"`
}

func (x *GetBotRelationIn) Reset() {
	*x = GetBotRelationIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBotRelationIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBotRelationIn) ProtoMessage() {}

func (x *GetBotRelationIn) ProtoReflect() protoreflect.Message {
	mi := &file_platform_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBotRelationIn.ProtoReflect.Descriptor instead.
func (*GetBotRelationIn) Descriptor() ([]byte, []int) {
	return file_platform_proto_rawDescGZIP(), []int{40}
}

func (x *GetBotRelationIn) GetBotUUID() string {
	if x != nil {
		return x.BotUUID
	}
	return ""
}

type GetWebhooksOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode int64             `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Success   bool              `protobuf:"varint,2,opt,name=Success,proto3" json:"Success,omitempty"`
	Data      []*WebhookProcess `protobuf:"bytes,3,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *GetWebhooksOut) Reset() {
	*x = GetWebhooksOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWebhooksOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWebhooksOut) ProtoMessage() {}

func (x *GetWebhooksOut) ProtoReflect() protoreflect.Message {
	mi := &file_platform_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWebhooksOut.ProtoReflect.Descriptor instead.
func (*GetWebhooksOut) Descriptor() ([]byte, []int) {
	return file_platform_proto_rawDescGZIP(), []int{41}
}

func (x *GetWebhooksOut) GetErrorCode() int64 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *GetWebhooksOut) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetWebhooksOut) GetData() []*WebhookProcess {
	if x != nil {
		return x.Data
	}
	return nil
}

// struct from webhook_process.go
type WebhookProcess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            int64                    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	UUID          string                   `protobuf:"bytes,2,opt,name=UUID,proto3" json:"UUID,omitempty"`
	BotUUID       string                   `protobuf:"bytes,3,opt,name=BotUUID,proto3" json:"BotUUID,omitempty"`
	OrderID       int64                    `protobuf:"varint,4,opt,name=OrderID,proto3" json:"OrderID,omitempty"`
	BotID         int64                    `protobuf:"varint,5,opt,name=BotID,proto3" json:"BotID,omitempty"`
	UserID        int64                    `protobuf:"varint,6,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Slug          string                   `protobuf:"bytes,7,opt,name=Slug,proto3" json:"Slug,omitempty"`
	Status        int64                    `protobuf:"varint,8,opt,name=Status,proto3" json:"Status,omitempty"`
	StatusMsg     string                   `protobuf:"bytes,9,opt,name=StatusMsg,proto3" json:"StatusMsg,omitempty"`
	Message       string                   `protobuf:"bytes,10,opt,name=Message,proto3" json:"Message,omitempty"`
	OrderUUID     string                   `protobuf:"bytes,11,opt,name=OrderUUID,proto3" json:"OrderUUID,omitempty"`
	XForwardedFor string                   `protobuf:"bytes,12,opt,name=XForwardedFor,proto3" json:"XForwardedFor,omitempty"`
	History       []*WebhookProcessHistory `protobuf:"bytes,13,rep,name=History,proto3" json:"History,omitempty"`
	CreatedAt     *timestamp.Timestamp     `protobuf:"bytes,14,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt     *timestamp.Timestamp     `protobuf:"bytes,15,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	DeletedAt     *timestamp.Timestamp     `protobuf:"bytes,16,opt,name=DeletedAt,proto3" json:"DeletedAt,omitempty"`
}

func (x *WebhookProcess) Reset() {
	*x = WebhookProcess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebhookProcess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookProcess) ProtoMessage() {}

func (x *WebhookProcess) ProtoReflect() protoreflect.Message {
	mi := &file_platform_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookProcess.ProtoReflect.Descriptor instead.
func (*WebhookProcess) Descriptor() ([]byte, []int) {
	return file_platform_proto_rawDescGZIP(), []int{42}
}

func (x *WebhookProcess) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *WebhookProcess) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *WebhookProcess) GetBotUUID() string {
	if x != nil {
		return x.BotUUID
	}
	return ""
}

func (x *WebhookProcess) GetOrderID() int64 {
	if x != nil {
		return x.OrderID
	}
	return 0
}

func (x *WebhookProcess) GetBotID() int64 {
	if x != nil {
		return x.BotID
	}
	return 0
}

func (x *WebhookProcess) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *WebhookProcess) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *WebhookProcess) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *WebhookProcess) GetStatusMsg() string {
	if x != nil {
		return x.StatusMsg
	}
	return ""
}

func (x *WebhookProcess) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *WebhookProcess) GetOrderUUID() string {
	if x != nil {
		return x.OrderUUID
	}
	return ""
}

func (x *WebhookProcess) GetXForwardedFor() string {
	if x != nil {
		return x.XForwardedFor
	}
	return ""
}

func (x *WebhookProcess) GetHistory() []*WebhookProcessHistory {
	if x != nil {
		return x.History
	}
	return nil
}

func (x *WebhookProcess) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *WebhookProcess) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *WebhookProcess) GetDeletedAt() *timestamp.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

// struct from webhook_process_history.go
type WebhookProcessHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID        string               `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	OrderID     int64                `protobuf:"varint,2,opt,name=OrderID,proto3" json:"OrderID,omitempty"`
	UserID      int64                `protobuf:"varint,3,opt,name=UserID,proto3" json:"UserID,omitempty"`
	ExchangeID  int64                `protobuf:"varint,4,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	Pair        string               `protobuf:"bytes,5,opt,name=Pair,proto3" json:"Pair,omitempty"`
	WebhookUUID string               `protobuf:"bytes,6,opt,name=WebhookUUID,proto3" json:"WebhookUUID,omitempty"`
	WebhookID   int64                `protobuf:"varint,7,opt,name=WebhookID,proto3" json:"WebhookID,omitempty"`
	Status      int64                `protobuf:"varint,8,opt,name=Status,proto3" json:"Status,omitempty"`
	StatusMsg   string               `protobuf:"bytes,9,opt,name=StatusMsg,proto3" json:"StatusMsg,omitempty"`
	CreatedAt   *timestamp.Timestamp `protobuf:"bytes,10,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt   *timestamp.Timestamp `protobuf:"bytes,11,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
}

func (x *WebhookProcessHistory) Reset() {
	*x = WebhookProcessHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebhookProcessHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookProcessHistory) ProtoMessage() {}

func (x *WebhookProcessHistory) ProtoReflect() protoreflect.Message {
	mi := &file_platform_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookProcessHistory.ProtoReflect.Descriptor instead.
func (*WebhookProcessHistory) Descriptor() ([]byte, []int) {
	return file_platform_proto_rawDescGZIP(), []int{43}
}

func (x *WebhookProcessHistory) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *WebhookProcessHistory) GetOrderID() int64 {
	if x != nil {
		return x.OrderID
	}
	return 0
}

func (x *WebhookProcessHistory) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *WebhookProcessHistory) GetExchangeID() int64 {
	if x != nil {
		return x.ExchangeID
	}
	return 0
}

func (x *WebhookProcessHistory) GetPair() string {
	if x != nil {
		return x.Pair
	}
	return ""
}

func (x *WebhookProcessHistory) GetWebhookUUID() string {
	if x != nil {
		return x.WebhookUUID
	}
	return ""
}

func (x *WebhookProcessHistory) GetWebhookID() int64 {
	if x != nil {
		return x.WebhookID
	}
	return 0
}

func (x *WebhookProcessHistory) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *WebhookProcessHistory) GetStatusMsg() string {
	if x != nil {
		return x.StatusMsg
	}
	return ""
}

func (x *WebhookProcessHistory) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *WebhookProcessHistory) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// for RPC method GetBotInfo
type GetBotInfoIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BotUUID string `protobuf:"bytes,1,opt,name=BotUUID,proto3" json:"BotUUID,omitempty"`
	UserID  int64  `protobuf:"varint,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (x *GetBotInfoIn) Reset() {
	*x = GetBotInfoIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBotInfoIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBotInfoIn) ProtoMessage() {}

func (x *GetBotInfoIn) ProtoReflect() protoreflect.Message {
	mi := &file_platform_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBotInfoIn.ProtoReflect.Descriptor instead.
func (*GetBotInfoIn) Descriptor() ([]byte, []int) {
	return file_platform_proto_rawDescGZIP(), []int{44}
}

func (x *GetBotInfoIn) GetBotUUID() string {
	if x != nil {
		return x.BotUUID
	}
	return ""
}

func (x *GetBotInfoIn) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type GetBotInfoOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode int64           `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Success   bool            `protobuf:"varint,2,opt,name=Success,proto3" json:"Success,omitempty"`
	Data      *GetBotInfoData `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *GetBotInfoOut) Reset() {
	*x = GetBotInfoOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBotInfoOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBotInfoOut) ProtoMessage() {}

func (x *GetBotInfoOut) ProtoReflect() protoreflect.Message {
	mi := &file_platform_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBotInfoOut.ProtoReflect.Descriptor instead.
func (*GetBotInfoOut) Descriptor() ([]byte, []int) {
	return file_platform_proto_rawDescGZIP(), []int{45}
}

func (x *GetBotInfoOut) GetErrorCode() int64 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *GetBotInfoOut) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetBotInfoOut) GetData() *GetBotInfoData {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetBotInfoData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bot      *Bot              `protobuf:"bytes,1,opt,name=Bot,proto3" json:"Bot,omitempty"`
	Orders   []*ExchangeOrder  `protobuf:"bytes,2,rep,name=Orders,proto3" json:"Orders,omitempty"`
	Webhooks []*WebhookProcess `protobuf:"bytes,3,rep,name=Webhooks,proto3" json:"Webhooks,omitempty"`
}

func (x *GetBotInfoData) Reset() {
	*x = GetBotInfoData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBotInfoData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBotInfoData) ProtoMessage() {}

func (x *GetBotInfoData) ProtoReflect() protoreflect.Message {
	mi := &file_platform_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBotInfoData.ProtoReflect.Descriptor instead.
func (*GetBotInfoData) Descriptor() ([]byte, []int) {
	return file_platform_proto_rawDescGZIP(), []int{46}
}

func (x *GetBotInfoData) GetBot() *Bot {
	if x != nil {
		return x.Bot
	}
	return nil
}

func (x *GetBotInfoData) GetOrders() []*ExchangeOrder {
	if x != nil {
		return x.Orders
	}
	return nil
}

func (x *GetBotInfoData) GetWebhooks() []*WebhookProcess {
	if x != nil {
		return x.Webhooks
	}
	return nil
}

// struct from exchange_order.go
type ExchangeOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           int64                `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	UUID         string               `protobuf:"bytes,2,opt,name=UUID,proto3" json:"UUID,omitempty"`
	OrderID      int64                `protobuf:"varint,3,opt,name=OrderID,proto3" json:"OrderID,omitempty"`
	UserID       int64                `protobuf:"varint,4,opt,name=UserID,proto3" json:"UserID,omitempty"`
	ExchangeID   int64                `protobuf:"varint,5,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	UnitedOrders int64                `protobuf:"varint,6,opt,name=UnitedOrders,proto3" json:"UnitedOrders,omitempty"`
	OrderType    int64                `protobuf:"varint,7,opt,name=OrderType,proto3" json:"OrderType,omitempty"`
	OrderTypeMsg string               `protobuf:"bytes,8,opt,name=OrderTypeMsg,proto3" json:"OrderTypeMsg,omitempty"`
	Pair         string               `protobuf:"bytes,9,opt,name=Pair,proto3" json:"Pair,omitempty"`
	Amount       *Decimal             `protobuf:"bytes,10,opt,name=Amount,proto3" json:"Amount,omitempty"`
	Quantity     *Decimal             `protobuf:"bytes,11,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
	Price        *Decimal             `protobuf:"bytes,12,opt,name=Price,proto3" json:"Price,omitempty"`
	Side         int64                `protobuf:"varint,13,opt,name=Side,proto3" json:"Side,omitempty"`
	SideMsg      string               `protobuf:"bytes,14,opt,name=SideMsg,proto3" json:"SideMsg,omitempty"`
	History      []*ExchangeOrderLog  `protobuf:"bytes,15,rep,name=History,proto3" json:"History,omitempty"`
	SumBuy       int64                `protobuf:"varint,16,opt,name=SumBuy,proto3" json:"SumBuy,omitempty"`
	ApiKeyID     int64                `protobuf:"varint,17,opt,name=ApiKeyID,proto3" json:"ApiKeyID,omitempty"`
	CreatedAt    *timestamp.Timestamp `protobuf:"bytes,18,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt    *timestamp.Timestamp `protobuf:"bytes,19,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	DeletedAt    *NullTime            `protobuf:"bytes,20,opt,name=DeletedAt,proto3" json:"DeletedAt,omitempty"`
}

func (x *ExchangeOrder) Reset() {
	*x = ExchangeOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeOrder) ProtoMessage() {}

func (x *ExchangeOrder) ProtoReflect() protoreflect.Message {
	mi := &file_platform_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeOrder.ProtoReflect.Descriptor instead.
func (*ExchangeOrder) Descriptor() ([]byte, []int) {
	return file_platform_proto_rawDescGZIP(), []int{47}
}

func (x *ExchangeOrder) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ExchangeOrder) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *ExchangeOrder) GetOrderID() int64 {
	if x != nil {
		return x.OrderID
	}
	return 0
}

func (x *ExchangeOrder) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *ExchangeOrder) GetExchangeID() int64 {
	if x != nil {
		return x.ExchangeID
	}
	return 0
}

func (x *ExchangeOrder) GetUnitedOrders() int64 {
	if x != nil {
		return x.UnitedOrders
	}
	return 0
}

func (x *ExchangeOrder) GetOrderType() int64 {
	if x != nil {
		return x.OrderType
	}
	return 0
}

func (x *ExchangeOrder) GetOrderTypeMsg() string {
	if x != nil {
		return x.OrderTypeMsg
	}
	return ""
}

func (x *ExchangeOrder) GetPair() string {
	if x != nil {
		return x.Pair
	}
	return ""
}

func (x *ExchangeOrder) GetAmount() *Decimal {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *ExchangeOrder) GetQuantity() *Decimal {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *ExchangeOrder) GetPrice() *Decimal {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *ExchangeOrder) GetSide() int64 {
	if x != nil {
		return x.Side
	}
	return 0
}

func (x *ExchangeOrder) GetSideMsg() string {
	if x != nil {
		return x.SideMsg
	}
	return ""
}

func (x *ExchangeOrder) GetHistory() []*ExchangeOrderLog {
	if x != nil {
		return x.History
	}
	return nil
}

func (x *ExchangeOrder) GetSumBuy() int64 {
	if x != nil {
		return x.SumBuy
	}
	return 0
}

func (x *ExchangeOrder) GetApiKeyID() int64 {
	if x != nil {
		return x.ApiKeyID
	}
	return 0
}

func (x *ExchangeOrder) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ExchangeOrder) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ExchangeOrder) GetDeletedAt() *NullTime {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

// struct from exchange_order_log.go
type ExchangeOrderLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID       string               `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	OrderID    int64                `protobuf:"varint,2,opt,name=OrderID,proto3" json:"OrderID,omitempty"`
	UserID     int64                `protobuf:"varint,3,opt,name=UserID,proto3" json:"UserID,omitempty"`
	ExchangeID int64                `protobuf:"varint,4,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	Pair       string               `protobuf:"bytes,5,opt,name=Pair,proto3" json:"Pair,omitempty"`
	Quantity   *Decimal             `protobuf:"bytes,6,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
	Price      *Decimal             `protobuf:"bytes,7,opt,name=Price,proto3" json:"Price,omitempty"`
	Status     int64                `protobuf:"varint,8,opt,name=Status,proto3" json:"Status,omitempty"`
	StatusMsg  string               `protobuf:"bytes,9,opt,name=StatusMsg,proto3" json:"StatusMsg,omitempty"`
	CreatedAt  *timestamp.Timestamp `protobuf:"bytes,10,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
}

func (x *ExchangeOrderLog) Reset() {
	*x = ExchangeOrderLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeOrderLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeOrderLog) ProtoMessage() {}

func (x *ExchangeOrderLog) ProtoReflect() protoreflect.Message {
	mi := &file_platform_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeOrderLog.ProtoReflect.Descriptor instead.
func (*ExchangeOrderLog) Descriptor() ([]byte, []int) {
	return file_platform_proto_rawDescGZIP(), []int{48}
}

func (x *ExchangeOrderLog) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *ExchangeOrderLog) GetOrderID() int64 {
	if x != nil {
		return x.OrderID
	}
	return 0
}

func (x *ExchangeOrderLog) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *ExchangeOrderLog) GetExchangeID() int64 {
	if x != nil {
		return x.ExchangeID
	}
	return 0
}

func (x *ExchangeOrderLog) GetPair() string {
	if x != nil {
		return x.Pair
	}
	return ""
}

func (x *ExchangeOrderLog) GetQuantity() *Decimal {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *ExchangeOrderLog) GetPrice() *Decimal {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *ExchangeOrderLog) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ExchangeOrderLog) GetStatusMsg() string {
	if x != nil {
		return x.StatusMsg
	}
	return ""
}

func (x *ExchangeOrderLog) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

// for RPC method GetWebhookInfo
type GetWebhookInfoIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebhookUUID string `protobuf:"bytes,1,opt,name=WebhookUUID,proto3" json:"WebhookUUID,omitempty"`
	UserID      int64  `protobuf:"varint,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (x *GetWebhookInfoIn) Reset() {
	*x = GetWebhookInfoIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWebhookInfoIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWebhookInfoIn) ProtoMessage() {}

func (x *GetWebhookInfoIn) ProtoReflect() protoreflect.Message {
	mi := &file_platform_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWebhookInfoIn.ProtoReflect.Descriptor instead.
func (*GetWebhookInfoIn) Descriptor() ([]byte, []int) {
	return file_platform_proto_rawDescGZIP(), []int{49}
}

func (x *GetWebhookInfoIn) GetWebhookUUID() string {
	if x != nil {
		return x.WebhookUUID
	}
	return ""
}

func (x *GetWebhookInfoIn) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type GetWebhookInfoOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode int64               `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Success   bool                `protobuf:"varint,2,opt,name=Success,proto3" json:"Success,omitempty"`
	Data      *GetWebhookInfoData `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *GetWebhookInfoOut) Reset() {
	*x = GetWebhookInfoOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWebhookInfoOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWebhookInfoOut) ProtoMessage() {}

func (x *GetWebhookInfoOut) ProtoReflect() protoreflect.Message {
	mi := &file_platform_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWebhookInfoOut.ProtoReflect.Descriptor instead.
func (*GetWebhookInfoOut) Descriptor() ([]byte, []int) {
	return file_platform_proto_rawDescGZIP(), []int{50}
}

func (x *GetWebhookInfoOut) GetErrorCode() int64 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *GetWebhookInfoOut) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetWebhookInfoOut) GetData() *GetWebhookInfoData {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetWebhookInfoData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Webhook *WebhookProcess  `protobuf:"bytes,1,opt,name=Webhook,proto3" json:"Webhook,omitempty"`
	Orders  []*ExchangeOrder `protobuf:"bytes,2,rep,name=Orders,proto3" json:"Orders,omitempty"`
}

func (x *GetWebhookInfoData) Reset() {
	*x = GetWebhookInfoData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWebhookInfoData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWebhookInfoData) ProtoMessage() {}

func (x *GetWebhookInfoData) ProtoReflect() protoreflect.Message {
	mi := &file_platform_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWebhookInfoData.ProtoReflect.Descriptor instead.
func (*GetWebhookInfoData) Descriptor() ([]byte, []int) {
	return file_platform_proto_rawDescGZIP(), []int{51}
}

func (x *GetWebhookInfoData) GetWebhook() *WebhookProcess {
	if x != nil {
		return x.Webhook
	}
	return nil
}

func (x *GetWebhookInfoData) GetOrders() []*ExchangeOrder {
	if x != nil {
		return x.Orders
	}
	return nil
}

type GetUserRelationIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID int64 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (x *GetUserRelationIn) Reset() {
	*x = GetUserRelationIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserRelationIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserRelationIn) ProtoMessage() {}

func (x *GetUserRelationIn) ProtoReflect() protoreflect.Message {
	mi := &file_platform_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserRelationIn.ProtoReflect.Descriptor instead.
func (*GetUserRelationIn) Descriptor() ([]byte, []int) {
	return file_platform_proto_rawDescGZIP(), []int{52}
}

func (x *GetUserRelationIn) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type StatisticOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*ExchangeUserKey `protobuf:"bytes,1,rep,name=Keys,proto3" json:"Keys,omitempty"`
}

func (x *StatisticOut) Reset() {
	*x = StatisticOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatisticOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatisticOut) ProtoMessage() {}

func (x *StatisticOut) ProtoReflect() protoreflect.Message {
	mi := &file_platform_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatisticOut.ProtoReflect.Descriptor instead.
func (*StatisticOut) Descriptor() ([]byte, []int) {
	return file_platform_proto_rawDescGZIP(), []int{53}
}

func (x *StatisticOut) GetKeys() []*ExchangeUserKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

// struct from exchange_user_key_dto.go
type ExchangeUserKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            int64          `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	ExchangeID    int64          `protobuf:"varint,2,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	UserID        int64          `protobuf:"varint,3,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Label         string         `protobuf:"bytes,4,opt,name=Label,proto3" json:"Label,omitempty"`
	MakeOrder     bool           `protobuf:"varint,5,opt,name=MakeOrder,proto3" json:"MakeOrder,omitempty"`
	APIKey        string         `protobuf:"bytes,6,opt,name=APIKey,proto3" json:"APIKey,omitempty"`
	SecretKey     string         `protobuf:"bytes,7,opt,name=SecretKey,proto3" json:"SecretKey,omitempty"`
	StatisticData *StatisticData `protobuf:"bytes,8,opt,name=StatisticData,proto3" json:"StatisticData,omitempty"`
}

func (x *ExchangeUserKey) Reset() {
	*x = ExchangeUserKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeUserKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeUserKey) ProtoMessage() {}

func (x *ExchangeUserKey) ProtoReflect() protoreflect.Message {
	mi := &file_platform_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeUserKey.ProtoReflect.Descriptor instead.
func (*ExchangeUserKey) Descriptor() ([]byte, []int) {
	return file_platform_proto_rawDescGZIP(), []int{54}
}

func (x *ExchangeUserKey) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ExchangeUserKey) GetExchangeID() int64 {
	if x != nil {
		return x.ExchangeID
	}
	return 0
}

func (x *ExchangeUserKey) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *ExchangeUserKey) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ExchangeUserKey) GetMakeOrder() bool {
	if x != nil {
		return x.MakeOrder
	}
	return false
}

func (x *ExchangeUserKey) GetAPIKey() string {
	if x != nil {
		return x.APIKey
	}
	return ""
}

func (x *ExchangeUserKey) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *ExchangeUserKey) GetStatisticData() *StatisticData {
	if x != nil {
		return x.StatisticData
	}
	return nil
}

// по сути двумя нижними сущностями можно представить слайс из указателей.
type AddOrdersStatisticIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Orders []*ExchangeOrderPointer `protobuf:"bytes,1,rep,name=Orders,proto3" json:"Orders,omitempty"`
}

func (x *AddOrdersStatisticIn) Reset() {
	*x = AddOrdersStatisticIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOrdersStatisticIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOrdersStatisticIn) ProtoMessage() {}

func (x *AddOrdersStatisticIn) ProtoReflect() protoreflect.Message {
	mi := &file_platform_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOrdersStatisticIn.ProtoReflect.Descriptor instead.
func (*AddOrdersStatisticIn) Descriptor() ([]byte, []int) {
	return file_platform_proto_rawDescGZIP(), []int{55}
}

func (x *AddOrdersStatisticIn) GetOrders() []*ExchangeOrderPointer {
	if x != nil {
		return x.Orders
	}
	return nil
}

type ExchangeOrderPointer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order *ExchangeOrder `protobuf:"bytes,1,opt,name=Order,proto3,oneof" json:"Order,omitempty"`
}

func (x *ExchangeOrderPointer) Reset() {
	*x = ExchangeOrderPointer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeOrderPointer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeOrderPointer) ProtoMessage() {}

func (x *ExchangeOrderPointer) ProtoReflect() protoreflect.Message {
	mi := &file_platform_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeOrderPointer.ProtoReflect.Descriptor instead.
func (*ExchangeOrderPointer) Descriptor() ([]byte, []int) {
	return file_platform_proto_rawDescGZIP(), []int{56}
}

func (x *ExchangeOrderPointer) GetOrder() *ExchangeOrder {
	if x != nil {
		return x.Order
	}
	return nil
}

type GetOrdersOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode int64            `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Success   bool             `protobuf:"varint,2,opt,name=Success,proto3" json:"Success,omitempty"`
	Data      []*ExchangeOrder `protobuf:"bytes,3,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *GetOrdersOut) Reset() {
	*x = GetOrdersOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrdersOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrdersOut) ProtoMessage() {}

func (x *GetOrdersOut) ProtoReflect() protoreflect.Message {
	mi := &file_platform_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrdersOut.ProtoReflect.Descriptor instead.
func (*GetOrdersOut) Descriptor() ([]byte, []int) {
	return file_platform_proto_rawDescGZIP(), []int{57}
}

func (x *GetOrdersOut) GetErrorCode() int64 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *GetOrdersOut) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetOrdersOut) GetData() []*ExchangeOrder {
	if x != nil {
		return x.Data
	}
	return nil
}

type Decimal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num  int64 `protobuf:"varint,1,opt,name=Num,proto3" json:"Num,omitempty"`   //целая часть
	Exp  int32 `protobuf:"varint,2,opt,name=Exp,proto3" json:"Exp,omitempty"`   //экспоненциальная часть
	Sign bool  `protobuf:"varint,3,opt,name=Sign,proto3" json:"Sign,omitempty"` //+-
}

func (x *Decimal) Reset() {
	*x = Decimal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Decimal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Decimal) ProtoMessage() {}

func (x *Decimal) ProtoReflect() protoreflect.Message {
	mi := &file_platform_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Decimal.ProtoReflect.Descriptor instead.
func (*Decimal) Descriptor() ([]byte, []int) {
	return file_platform_proto_rawDescGZIP(), []int{58}
}

func (x *Decimal) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *Decimal) GetExp() int32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *Decimal) GetSign() bool {
	if x != nil {
		return x.Sign
	}
	return false
}

var File_platform_proto protoreflect.FileDescriptor

var file_platform_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x15, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2b, 0x0a, 0x05,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x6a, 0x0a, 0x0e, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x50,
	0x61, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x69, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x44, 0x22, 0x67, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x4f, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x68,
	0x0a, 0x0f, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x75,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x37, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x96, 0x02, 0x0a, 0x0c, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53,
	0x6c, 0x75, 0x67, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a,
	0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0x38, 0x0a, 0x0e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x44, 0x22, 0x71, 0x0a, 0x0d, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6c,
	0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x22, 0x45,
	0x0a, 0x0b, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x75, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x14, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x22, 0x5b, 0x0a, 0x13,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x49,
	0x44, 0x49, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x2c, 0x0a, 0x12, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x71, 0x0a, 0x13, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b,
	0x65, 0x79, 0x49, 0x44, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x91, 0x02, 0x0a, 0x11, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x49, 0x44,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1c,
	0x0a, 0x09, 0x4d, 0x61, 0x6b, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x4d, 0x61, 0x6b, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x50,
	0x49, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b,
	0x65, 0x79, 0x12, 0x4a, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x22, 0xe1,
	0x02, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x38, 0x0a, 0x07, 0x53, 0x75, 0x6d, 0x53, 0x65, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x52, 0x07, 0x53, 0x75, 0x6d, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x36, 0x0a, 0x06, 0x53, 0x75,
	0x6d, 0x42, 0x75, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x06, 0x53, 0x75, 0x6d, 0x42,
	0x75, 0x79, 0x12, 0x36, 0x0a, 0x06, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x52, 0x06, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x36, 0x0a, 0x06, 0x54, 0x6f,
	0x53, 0x65, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x06, 0x54, 0x6f, 0x53, 0x65,
	0x6c, 0x6c, 0x12, 0x36, 0x0a, 0x06, 0x54, 0x6f, 0x45, 0x61, 0x72, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x52, 0x06, 0x54, 0x6f, 0x45, 0x61, 0x72, 0x6e, 0x12, 0x36, 0x0a, 0x06, 0x45, 0x61,
	0x72, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x06, 0x45, 0x61, 0x72, 0x6e,
	0x65, 0x64, 0x22, 0x6c, 0x0a, 0x10, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x58, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x58, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x46, 0x6f, 0x72,
	0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x22, 0x4b, 0x0a, 0x11, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x4f, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xf0, 0x03,
	0x0a, 0x0c, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x12, 0x45,
	0x0a, 0x0d, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x52, 0x0d, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x07, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x57,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x54, 0x4f,
	0x52, 0x07, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x2c, 0x0a, 0x03, 0x42, 0x6f, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x42,
	0x6f, 0x74, 0x52, 0x03, 0x42, 0x6f, 0x74, 0x12, 0x43, 0x0a, 0x08, 0x42, 0x75, 0x79, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44,
	0x54, 0x4f, 0x52, 0x08, 0x42, 0x75, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x53, 0x69, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x53, 0x69, 0x64, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35,
	0x0a, 0x06, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x06, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x55, 0x6e, 0x69, 0x74, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x55, 0x6e, 0x69, 0x74, 0x65, 0x64, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x3b, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x44, 0x54, 0x4f, 0x52, 0x03, 0x4b, 0x65, 0x79,
	0x22, 0xae, 0x03, 0x0a, 0x08, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x34, 0x0a,
	0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x05, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x08, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x08, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x69, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x69, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x53, 0x69, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0xf6, 0x03, 0x0a, 0x11, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x44, 0x54, 0x4f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x42,
	0x6f, 0x74, 0x55, 0x55, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x42, 0x6f,
	0x74, 0x55, 0x55, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x12, 0x14, 0x0a,
	0x05, 0x42, 0x6f, 0x74, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x42, 0x6f,
	0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x53,
	0x6c, 0x75, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x12,
	0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x58, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x46,
	0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x58, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x38, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3d, 0x0a, 0x09, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x50, 0x0a, 0x08, 0x4e, 0x75,
	0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x22, 0x88, 0x07, 0x0a,
	0x03, 0x42, 0x6f, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x69, 0x72, 0x49, 0x44,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x50, 0x61, 0x69, 0x72, 0x49, 0x44, 0x12, 0x20,
	0x0a, 0x0b, 0x46, 0x69, 0x78, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0b, 0x46, 0x69, 0x78, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x6c, 0x6c, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x53, 0x65, 0x6c, 0x6c, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x11, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2a,
	0x0a, 0x10, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53,
	0x65, 0x6c, 0x6c, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x42, 0x75, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0f, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x75, 0x79, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x65, 0x6c, 0x6c,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x65, 0x6c, 0x6c,
	0x12, 0x32, 0x0a, 0x14, 0x41, 0x75, 0x74, 0x6f, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x65, 0x6c,
	0x6c, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14,
	0x41, 0x75, 0x74, 0x6f, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39,
	0x0a, 0x05, 0x50, 0x61, 0x69, 0x72, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x50, 0x61,
	0x69, 0x72, 0x52, 0x05, 0x50, 0x61, 0x69, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a,
	0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x56, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x50, 0x61, 0x69, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x69, 0x72, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x50, 0x61, 0x69, 0x72, 0x49, 0x44, 0x22,
	0x8b, 0x07, 0x0a, 0x10, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x44, 0x54, 0x4f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x6f, 0x74, 0x55,
	0x55, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x42, 0x6f, 0x74, 0x55, 0x55,
	0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2c, 0x0a, 0x11, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x53, 0x69, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x53, 0x69,
	0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c,
	0x55, 0x6e, 0x69, 0x74, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x55, 0x6e, 0x69, 0x74, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x69, 0x72,
	0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x50, 0x61, 0x69, 0x72, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x75, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x42, 0x75, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04,
	0x50, 0x61, 0x69, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x69, 0x72,
	0x12, 0x36, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x08, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x42, 0x75,
	0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x08, 0x42, 0x75,
	0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x57, 0x65, 0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x55, 0x55, 0x49, 0x44, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x57, 0x65, 0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x55, 0x55, 0x49, 0x44,
	0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3d,
	0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xaa, 0x01,
	0x0a, 0x06, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x69, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x69, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61,
	0x69, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x50, 0x61, 0x69, 0x72,
	0x49, 0x44, 0x12, 0x3c, 0x0a, 0x09, 0x50, 0x61, 0x69, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x09, 0x50, 0x61, 0x69, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x42, 0x6f, 0x74, 0x55, 0x55, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x42, 0x6f, 0x74, 0x55, 0x55, 0x49, 0x44, 0x22, 0xf9, 0x02, 0x0a, 0x12, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x44, 0x54,
	0x4f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x1c, 0x0a, 0x09, 0x4d, 0x61, 0x6b, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x4d, 0x61, 0x6b, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41,
	0x50, 0x49, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b,
	0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x4b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a,
	0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3d, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xe6, 0x02, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x6e, 0x12, 0x30, 0x0a, 0x08, 0x45, 0x78, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x08, 0x45, 0x78, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x07, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x54, 0x4f, 0x52,
	0x07, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x2c, 0x0a, 0x03, 0x42, 0x6f, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x6f,
	0x74, 0x52, 0x03, 0x42, 0x6f, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x06, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x3b, 0x0a,
	0x03, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b,
	0x65, 0x79, 0x44, 0x54, 0x4f, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x43, 0x0a, 0x08, 0x42, 0x75,
	0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x44, 0x54, 0x4f, 0x52, 0x08, 0x42, 0x75, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22,
	0xaa, 0x01, 0x0a, 0x0e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4f,
	0x75, 0x74, 0x12, 0x47, 0x0a, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x52, 0x0e, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x4f, 0x0a, 0x0e, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x54, 0x4f, 0x52, 0x0e, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x22, 0x80, 0x02, 0x0a,
	0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x12, 0x2c, 0x0a, 0x03, 0x42, 0x6f, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x6f, 0x74, 0x52,
	0x03, 0x42, 0x6f, 0x74, 0x12, 0x42, 0x0a, 0x07, 0x57, 0x65, 0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x54, 0x4f, 0x52,
	0x07, 0x57, 0x65, 0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x12, 0x43, 0x0a, 0x08, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x44, 0x54, 0x4f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x44, 0x54, 0x4f, 0x52, 0x08, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x54, 0x4f, 0x12, 0x18, 0x0a,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x24, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x42,
	0x6f, 0x74, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x42, 0x6f,
	0x74, 0x55, 0x55, 0x49, 0x44, 0x22, 0x4f, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x4f,
	0x75, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x42, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x6f, 0x74, 0x52, 0x03, 0x42, 0x6f, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x9b, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49,
	0x6e, 0x12, 0x2c, 0x0a, 0x03, 0x42, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x6f, 0x74, 0x52, 0x03, 0x42, 0x6f, 0x74, 0x12,
	0x53, 0x0a, 0x10, 0x57, 0x65, 0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x49, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x49, 0x6e, 0x52, 0x10, 0x57, 0x65, 0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x49, 0x6e, 0x22, 0x87, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4f, 0x75, 0x74,
	0x12, 0x56, 0x0a, 0x11, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x44, 0x54, 0x4f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x44, 0x54, 0x4f, 0x52, 0x11, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x54, 0x4f, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x47,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x73, 0x49, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x81, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x73, 0x4f, 0x75, 0x74, 0x12, 0x59, 0x0a, 0x12, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x44, 0x54, 0x4f,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x44, 0x54,
	0x4f, 0x52, 0x12, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b,
	0x65, 0x79, 0x44, 0x54, 0x4f, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x8c, 0x03, 0x0a, 0x18,
	0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x54, 0x4f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44,
	0x12, 0x20, 0x0a, 0x0b, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x55, 0x55, 0x49, 0x44, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x55, 0x55,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x38, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3d, 0x0a, 0x09, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x3a, 0x0a, 0x0a, 0x4e, 0x75,
	0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x22, 0xfc, 0x03, 0x0a, 0x13, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x44, 0x54, 0x4f, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12,
	0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55,
	0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04,
	0x50, 0x61, 0x69, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x69, 0x72,
	0x12, 0x3a, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x52, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x06,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x06, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3d, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xe2, 0x01, 0x0a, 0x10, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x65, 0x6c, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x52, 0x07, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x6e, 0x12, 0x3a, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x34, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52,
	0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x55, 0x6e, 0x69, 0x74, 0x65, 0x64,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x55, 0x6e,
	0x69, 0x74, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x22, 0x45, 0x0a, 0x0b, 0x50, 0x75,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x22, 0x2c, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x6f, 0x74, 0x55, 0x55, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x42, 0x6f, 0x74, 0x55, 0x55, 0x49, 0x44, 0x22,
	0x83, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x4f,
	0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x39, 0x0a, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0xb4, 0x04, 0x0a, 0x0e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07,
	0x42, 0x6f, 0x74, 0x55, 0x55, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x42,
	0x6f, 0x74, 0x55, 0x55, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x14, 0x0a, 0x05, 0x42, 0x6f, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x42, 0x6f, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12,
	0x0a, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53, 0x6c,
	0x75, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44,
	0x12, 0x24, 0x0a, 0x0d, 0x58, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x46, 0x6f,
	0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x58, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x12, 0x46, 0x0a, 0x07, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x07, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x38,
	0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xfb, 0x02, 0x0a,
	0x15, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04,
	0x50, 0x61, 0x69, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x69, 0x72,
	0x12, 0x20, 0x0a, 0x0b, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x55, 0x55, 0x49, 0x44, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x55, 0x55,
	0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x44, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4d, 0x73, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x38, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x40, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x6f,
	0x74, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x42, 0x6f, 0x74,
	0x55, 0x55, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x82, 0x01, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4f, 0x75, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x39, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74,
	0x42, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x44, 0x61, 0x74,
	0x61, 0x22, 0xbf, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x03, 0x42, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x6f, 0x74, 0x52, 0x03, 0x42,
	0x6f, 0x74, 0x12, 0x3c, 0x0a, 0x06, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x06, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x41, 0x0a, 0x08, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x08, 0x57, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x73, 0x22, 0x81, 0x06, 0x0a, 0x0d, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x55,
	0x6e, 0x69, 0x74, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x55, 0x6e, 0x69, 0x74, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x73, 0x67, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x73,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x69, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x50, 0x61, 0x69, 0x72, 0x12, 0x36, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a,
	0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52,
	0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x53, 0x69, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x53,
	0x69, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x69, 0x64, 0x65, 0x4d, 0x73, 0x67, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x53, 0x69, 0x64, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x41, 0x0a,
	0x07, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x52, 0x07, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x53, 0x75, 0x6d, 0x42, 0x75, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x53, 0x75, 0x6d, 0x42, 0x75, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x70, 0x69, 0x4b,
	0x65, 0x79, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x41, 0x70, 0x69, 0x4b,
	0x65, 0x79, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38,
	0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3d, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xee, 0x02, 0x0a, 0x10, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44,
	0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x69, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x50, 0x61, 0x69, 0x72, 0x12, 0x3a, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x38,
	0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x4c, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x57,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x55, 0x55, 0x49, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x8a, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x57, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x4f, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x3d, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x93, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x07, 0x57, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x07, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x3c, 0x0a, 0x06, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x22, 0x2b, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x4a, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x4f, 0x75, 0x74, 0x12, 0x3a, 0x0a, 0x04, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x4b, 0x65,
	0x79, 0x73, 0x22, 0x8f, 0x02, 0x0a, 0x0f, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x14,
	0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x61, 0x6b, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x4d, 0x61, 0x6b, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x4a, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x5b, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x49, 0x6e, 0x12, 0x43, 0x0a, 0x06,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x06, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x22, 0x61, 0x0a, 0x14, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x05, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x22, 0x80, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x4f, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x38, 0x0a,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x41, 0x0a, 0x07, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x4e, 0x75, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x78, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x45, 0x78, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x67, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x53, 0x69, 0x67, 0x6e, 0x32, 0x8b, 0x16, 0x0a, 0x13, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x52,
	0x50, 0x43, 0x12, 0x50, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12,
	0x1c, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x23, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x4f,
	0x75, 0x74, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x26, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x12,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x25, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x44, 0x1a, 0x1c, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0b, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x64, 0x64, 0x12, 0x24, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x1a, 0x22,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f,
	0x75, 0x74, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x12, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x41, 0x64, 0x64, 0x12, 0x2b, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b,
	0x65, 0x79, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x1a, 0x22, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x75, 0x74, 0x22, 0x00, 0x12, 0x58, 0x0a,
	0x09, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x2b, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b,
	0x65, 0x79, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x1a, 0x1c, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x15, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x2a, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x49, 0x44, 0x49, 0x6e, 0x1a, 0x1c, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x13,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x29, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x1a, 0x2a,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x0e,
	0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x27,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x1a, 0x28, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4f, 0x75,
	0x74, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x1e, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x6e, 0x1a, 0x25, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x13, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x2c, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e,
	0x1a, 0x1c, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x4d, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x12, 0x1f, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x1a, 0x20, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x4f, 0x75, 0x74, 0x22, 0x00, 0x12,
	0x77, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2d, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x1a, 0x2e, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x4f, 0x75, 0x74, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x24, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x73, 0x49, 0x6e, 0x1a, 0x25, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79,
	0x73, 0x4f, 0x75, 0x74, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x13, 0x57, 0x72, 0x69, 0x74, 0x65, 0x57,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2f, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x54, 0x4f, 0x1a, 0x1c,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5b,
	0x0a, 0x0d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x12,
	0x2a, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x44, 0x54, 0x4f, 0x1a, 0x1c, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0a, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x23, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x1a, 0x1c,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x00, 0x12, 0x59,
	0x0a, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x27, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65,
	0x6c, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x1a, 0x1c, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x08, 0x50, 0x75, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x6e, 0x1a, 0x22, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x75,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x42, 0x6f, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x27, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x1a, 0x25, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47,
	0x65, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x4f, 0x75, 0x74, 0x22, 0x00, 0x12,
	0x59, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x49, 0x6e, 0x1a, 0x24, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6f,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4f, 0x75, 0x74, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x1a, 0x28, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65,
	0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x4f, 0x75, 0x74, 0x22,
	0x00, 0x12, 0x64, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x57, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x28, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x1a, 0x25,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x73, 0x4f, 0x75, 0x74, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x27, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x1a, 0x23, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x4f, 0x75, 0x74, 0x22, 0x00, 0x12, 0x68, 0x0a,
	0x12, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x12, 0x2b, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x49, 0x6e,
	0x1a, 0x23, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x4f, 0x75, 0x74, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x42, 0x6f,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x27, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x1a, 0x23, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x4f, 0x75, 0x74, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x28, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x1a, 0x23, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x4f, 0x75, 0x74, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x11, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x1a, 0x23, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x4f, 0x75, 0x74, 0x22, 0x00, 0x12, 0x68,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x28, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x1a, 0x23, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x4f, 0x75, 0x74, 0x22, 0x00, 0x42, 0x19, 0x5a, 0x17, 0x2e, 0x2f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67,
	0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_platform_proto_rawDescOnce sync.Once
	file_platform_proto_rawDescData = file_platform_proto_rawDesc
)

func file_platform_proto_rawDescGZIP() []byte {
	file_platform_proto_rawDescOnce.Do(func() {
		file_platform_proto_rawDescData = protoimpl.X.CompressGZIP(file_platform_proto_rawDescData)
	})
	return file_platform_proto_rawDescData
}

var file_platform_proto_msgTypes = make([]protoimpl.MessageInfo, 59)
var file_platform_proto_goTypes = []interface{}{
	(*Empty)(nil),                    // 0: platform_service_grpc.Empty
	(*Error)(nil),                    // 1: platform_service_grpc.Error
	(*ExchangeTicker)(nil),           // 2: platform_service_grpc.ExchangeTicker
	(*GetTickerOut)(nil),             // 3: platform_service_grpc.GetTickerOut
	(*ExchangeListOut)(nil),          // 4: platform_service_grpc.ExchangeListOut
	(*ExchangeList)(nil),             // 5: platform_service_grpc.ExchangeList
	(*ExchangeListID)(nil),           // 6: platform_service_grpc.exchangeListID
	(*ExchangeAddIn)(nil),            // 7: platform_service_grpc.ExchangeAddIn
	(*ExchangeOut)(nil),              // 8: platform_service_grpc.ExchangeOut
	(*ExchangeUserKeyAddIn)(nil),     // 9: platform_service_grpc.ExchangeUserKeyAddIn
	(*ExchangeUserKeyIDIn)(nil),      // 10: platform_service_grpc.exchangeUserKeyIDIn
	(*ExchangeUserListIn)(nil),       // 11: platform_service_grpc.ExchangeUserListIn
	(*ExchangeUserListOut)(nil),      // 12: platform_service_grpc.ExchangeUserListOut
	(*ExchangeUserKeyID)(nil),        // 13: platform_service_grpc.exchangeUserKeyID
	(*StatisticData)(nil),            // 14: platform_service_grpc.StatisticData
	(*WebhookProcessIn)(nil),         // 15: platform_service_grpc.WebhookProcessIn
	(*WebhookProcessOut)(nil),        // 16: platform_service_grpc.WebhookProcessOut
	(*WriteOrderIn)(nil),             // 17: platform_service_grpc.WriteOrderIn
	(*OrderOut)(nil),                 // 18: platform_service_grpc.OrderOut
	(*WebhookProcessDTO)(nil),        // 19: platform_service_grpc.WebhookProcessDTO
	(*NullTime)(nil),                 // 20: platform_service_grpc.NullTime
	(*Bot)(nil),                      // 21: platform_service_grpc.Bot
	(*StrategyPair)(nil),             // 22: platform_service_grpc.StrategyPair
	(*ExchangeOrderDTO)(nil),         // 23: platform_service_grpc.ExchangeOrderDTO
	(*Signal)(nil),                   // 24: platform_service_grpc.Signal
	(*ExchangeUserKeyDTO)(nil),       // 25: platform_service_grpc.ExchangeUserKeyDTO
	(*OrderIn)(nil),                  // 26: platform_service_grpc.OrderIn
	(*CancelOrderOut)(nil),           // 27: platform_service_grpc.CancelOrderOut
	(*UpdateWebhookStatusIn)(nil),    // 28: platform_service_grpc.UpdateWebhookStatusIn
	(*GetBotIn)(nil),                 // 29: platform_service_grpc.GetBotIn
	(*GetBotOut)(nil),                // 30: platform_service_grpc.GetBotOut
	(*CreateWebhookProcessIn)(nil),   // 31: platform_service_grpc.CreateWebhookProcessIn
	(*CreateWebhookProcessOut)(nil),  // 32: platform_service_grpc.CreateWebhookProcessOut
	(*GetUserKeysIn)(nil),            // 33: platform_service_grpc.GetUserKeysIn
	(*GetUserKeysOut)(nil),           // 34: platform_service_grpc.GetUserKeysOut
	(*WebhookProcessHistoryDTO)(nil), // 35: platform_service_grpc.WebhookProcessHistoryDTO
	(*NullString)(nil),               // 36: platform_service_grpc.NullString
	(*ExchangeOrderLogDTO)(nil),      // 37: platform_service_grpc.ExchangeOrderLogDTO
	(*OrderSellLimitIn)(nil),         // 38: platform_service_grpc.OrderSellLimitIn
	(*PutOrderOut)(nil),              // 39: platform_service_grpc.PutOrderOut
	(*GetBotRelationIn)(nil),         // 40: platform_service_grpc.GetBotRelationIn
	(*GetWebhooksOut)(nil),           // 41: platform_service_grpc.GetWebhooksOut
	(*WebhookProcess)(nil),           // 42: platform_service_grpc.WebhookProcess
	(*WebhookProcessHistory)(nil),    // 43: platform_service_grpc.WebhookProcessHistory
	(*GetBotInfoIn)(nil),             // 44: platform_service_grpc.GetBotInfoIn
	(*GetBotInfoOut)(nil),            // 45: platform_service_grpc.GetBotInfoOut
	(*GetBotInfoData)(nil),           // 46: platform_service_grpc.GetBotInfoData
	(*ExchangeOrder)(nil),            // 47: platform_service_grpc.ExchangeOrder
	(*ExchangeOrderLog)(nil),         // 48: platform_service_grpc.ExchangeOrderLog
	(*GetWebhookInfoIn)(nil),         // 49: platform_service_grpc.GetWebhookInfoIn
	(*GetWebhookInfoOut)(nil),        // 50: platform_service_grpc.GetWebhookInfoOut
	(*GetWebhookInfoData)(nil),       // 51: platform_service_grpc.GetWebhookInfoData
	(*GetUserRelationIn)(nil),        // 52: platform_service_grpc.GetUserRelationIn
	(*StatisticOut)(nil),             // 53: platform_service_grpc.StatisticOut
	(*ExchangeUserKey)(nil),          // 54: platform_service_grpc.ExchangeUserKey
	(*AddOrdersStatisticIn)(nil),     // 55: platform_service_grpc.AddOrdersStatisticIn
	(*ExchangeOrderPointer)(nil),     // 56: platform_service_grpc.ExchangeOrderPointer
	(*GetOrdersOut)(nil),             // 57: platform_service_grpc.GetOrdersOut
	(*Decimal)(nil),                  // 58: platform_service_grpc.Decimal
	(*timestamp.Timestamp)(nil),      // 59: google.protobuf.Timestamp
	(*any1.Any)(nil),                 // 60: google.protobuf.Any
}
var file_platform_proto_depIdxs = []int32{
	2,   // 0: platform_service_grpc.GetTickerOut.Data:type_name -> platform_service_grpc.ExchangeTicker
	5,   // 1: platform_service_grpc.ExchangeListOut.Data:type_name -> platform_service_grpc.ExchangeList
	59,  // 2: platform_service_grpc.ExchangeList.CreatedAt:type_name -> google.protobuf.Timestamp
	59,  // 3: platform_service_grpc.ExchangeList.UpdatedAt:type_name -> google.protobuf.Timestamp
	59,  // 4: platform_service_grpc.ExchangeList.DeletedAt:type_name -> google.protobuf.Timestamp
	13,  // 5: platform_service_grpc.ExchangeUserListOut.Data:type_name -> platform_service_grpc.exchangeUserKeyID
	14,  // 6: platform_service_grpc.exchangeUserKeyID.StatisticData:type_name -> platform_service_grpc.StatisticData
	58,  // 7: platform_service_grpc.StatisticData.SumSell:type_name -> platform_service_grpc.Decimal
	58,  // 8: platform_service_grpc.StatisticData.SumBuy:type_name -> platform_service_grpc.Decimal
	58,  // 9: platform_service_grpc.StatisticData.Profit:type_name -> platform_service_grpc.Decimal
	58,  // 10: platform_service_grpc.StatisticData.ToSell:type_name -> platform_service_grpc.Decimal
	58,  // 11: platform_service_grpc.StatisticData.ToEarn:type_name -> platform_service_grpc.Decimal
	58,  // 12: platform_service_grpc.StatisticData.Earned:type_name -> platform_service_grpc.Decimal
	18,  // 13: platform_service_grpc.WriteOrderIn.ExchangeOrder:type_name -> platform_service_grpc.OrderOut
	19,  // 14: platform_service_grpc.WriteOrderIn.Webhook:type_name -> platform_service_grpc.WebhookProcessDTO
	21,  // 15: platform_service_grpc.WriteOrderIn.Bot:type_name -> platform_service_grpc.Bot
	23,  // 16: platform_service_grpc.WriteOrderIn.BuyOrder:type_name -> platform_service_grpc.ExchangeOrderDTO
	24,  // 17: platform_service_grpc.WriteOrderIn.Signal:type_name -> platform_service_grpc.Signal
	25,  // 18: platform_service_grpc.WriteOrderIn.Key:type_name -> platform_service_grpc.ExchangeUserKeyDTO
	58,  // 19: platform_service_grpc.OrderOut.Price:type_name -> platform_service_grpc.Decimal
	58,  // 20: platform_service_grpc.OrderOut.Amount:type_name -> platform_service_grpc.Decimal
	58,  // 21: platform_service_grpc.OrderOut.Quantity:type_name -> platform_service_grpc.Decimal
	59,  // 22: platform_service_grpc.WebhookProcessDTO.CreatedAt:type_name -> google.protobuf.Timestamp
	59,  // 23: platform_service_grpc.WebhookProcessDTO.UpdatedAt:type_name -> google.protobuf.Timestamp
	20,  // 24: platform_service_grpc.WebhookProcessDTO.DeletedAt:type_name -> platform_service_grpc.NullTime
	59,  // 25: platform_service_grpc.NullTime.Time:type_name -> google.protobuf.Timestamp
	22,  // 26: platform_service_grpc.Bot.Pairs:type_name -> platform_service_grpc.StrategyPair
	59,  // 27: platform_service_grpc.Bot.CreatedAt:type_name -> google.protobuf.Timestamp
	59,  // 28: platform_service_grpc.Bot.UpdatedAt:type_name -> google.protobuf.Timestamp
	59,  // 29: platform_service_grpc.Bot.DeletedAt:type_name -> google.protobuf.Timestamp
	58,  // 30: platform_service_grpc.ExchangeOrderDTO.Amount:type_name -> platform_service_grpc.Decimal
	58,  // 31: platform_service_grpc.ExchangeOrderDTO.Quantity:type_name -> platform_service_grpc.Decimal
	58,  // 32: platform_service_grpc.ExchangeOrderDTO.Price:type_name -> platform_service_grpc.Decimal
	58,  // 33: platform_service_grpc.ExchangeOrderDTO.BuyPrice:type_name -> platform_service_grpc.Decimal
	59,  // 34: platform_service_grpc.ExchangeOrderDTO.CreatedAt:type_name -> google.protobuf.Timestamp
	59,  // 35: platform_service_grpc.ExchangeOrderDTO.UpdatedAt:type_name -> google.protobuf.Timestamp
	20,  // 36: platform_service_grpc.ExchangeOrderDTO.DeletedAt:type_name -> platform_service_grpc.NullTime
	58,  // 37: platform_service_grpc.Signal.PairPrice:type_name -> platform_service_grpc.Decimal
	59,  // 38: platform_service_grpc.ExchangeUserKeyDTO.CreatedAt:type_name -> google.protobuf.Timestamp
	59,  // 39: platform_service_grpc.ExchangeUserKeyDTO.UpdatedAt:type_name -> google.protobuf.Timestamp
	20,  // 40: platform_service_grpc.ExchangeUserKeyDTO.DeletedAt:type_name -> platform_service_grpc.NullTime
	60,  // 41: platform_service_grpc.OrderIn.ExClient:type_name -> google.protobuf.Any
	19,  // 42: platform_service_grpc.OrderIn.Webhook:type_name -> platform_service_grpc.WebhookProcessDTO
	21,  // 43: platform_service_grpc.OrderIn.Bot:type_name -> platform_service_grpc.Bot
	24,  // 44: platform_service_grpc.OrderIn.Signal:type_name -> platform_service_grpc.Signal
	25,  // 45: platform_service_grpc.OrderIn.Key:type_name -> platform_service_grpc.ExchangeUserKeyDTO
	23,  // 46: platform_service_grpc.OrderIn.BuyOrder:type_name -> platform_service_grpc.ExchangeOrderDTO
	18,  // 47: platform_service_grpc.CancelOrderOut.ExchangeOrders:type_name -> platform_service_grpc.OrderOut
	23,  // 48: platform_service_grpc.CancelOrderOut.PlatformOrders:type_name -> platform_service_grpc.ExchangeOrderDTO
	21,  // 49: platform_service_grpc.UpdateWebhookStatusIn.Bot:type_name -> platform_service_grpc.Bot
	19,  // 50: platform_service_grpc.UpdateWebhookStatusIn.WebHook:type_name -> platform_service_grpc.WebhookProcessDTO
	23,  // 51: platform_service_grpc.UpdateWebhookStatusIn.OrderDTO:type_name -> platform_service_grpc.ExchangeOrderDTO
	21,  // 52: platform_service_grpc.GetBotOut.Bot:type_name -> platform_service_grpc.Bot
	21,  // 53: platform_service_grpc.CreateWebhookProcessIn.Bot:type_name -> platform_service_grpc.Bot
	15,  // 54: platform_service_grpc.CreateWebhookProcessIn.WebHookProcessIn:type_name -> platform_service_grpc.WebhookProcessIn
	19,  // 55: platform_service_grpc.CreateWebhookProcessOut.WebhookProcessDTO:type_name -> platform_service_grpc.WebhookProcessDTO
	25,  // 56: platform_service_grpc.GetUserKeysOut.ExchangeUserKeyDTO:type_name -> platform_service_grpc.ExchangeUserKeyDTO
	36,  // 57: platform_service_grpc.WebhookProcessHistoryDTO.Message:type_name -> platform_service_grpc.NullString
	59,  // 58: platform_service_grpc.WebhookProcessHistoryDTO.CreatedAt:type_name -> google.protobuf.Timestamp
	59,  // 59: platform_service_grpc.WebhookProcessHistoryDTO.UpdatedAt:type_name -> google.protobuf.Timestamp
	20,  // 60: platform_service_grpc.WebhookProcessHistoryDTO.DeletedAt:type_name -> platform_service_grpc.NullTime
	58,  // 61: platform_service_grpc.ExchangeOrderLogDTO.Quantity:type_name -> platform_service_grpc.Decimal
	58,  // 62: platform_service_grpc.ExchangeOrderLogDTO.Amount:type_name -> platform_service_grpc.Decimal
	58,  // 63: platform_service_grpc.ExchangeOrderLogDTO.Price:type_name -> platform_service_grpc.Decimal
	59,  // 64: platform_service_grpc.ExchangeOrderLogDTO.CreatedAt:type_name -> google.protobuf.Timestamp
	59,  // 65: platform_service_grpc.ExchangeOrderLogDTO.UpdatedAt:type_name -> google.protobuf.Timestamp
	20,  // 66: platform_service_grpc.ExchangeOrderLogDTO.DeletedAt:type_name -> platform_service_grpc.NullTime
	26,  // 67: platform_service_grpc.OrderSellLimitIn.OrderIn:type_name -> platform_service_grpc.OrderIn
	58,  // 68: platform_service_grpc.OrderSellLimitIn.Quantity:type_name -> platform_service_grpc.Decimal
	58,  // 69: platform_service_grpc.OrderSellLimitIn.Price:type_name -> platform_service_grpc.Decimal
	42,  // 70: platform_service_grpc.GetWebhooksOut.Data:type_name -> platform_service_grpc.WebhookProcess
	43,  // 71: platform_service_grpc.WebhookProcess.History:type_name -> platform_service_grpc.WebhookProcessHistory
	59,  // 72: platform_service_grpc.WebhookProcess.CreatedAt:type_name -> google.protobuf.Timestamp
	59,  // 73: platform_service_grpc.WebhookProcess.UpdatedAt:type_name -> google.protobuf.Timestamp
	59,  // 74: platform_service_grpc.WebhookProcess.DeletedAt:type_name -> google.protobuf.Timestamp
	59,  // 75: platform_service_grpc.WebhookProcessHistory.CreatedAt:type_name -> google.protobuf.Timestamp
	59,  // 76: platform_service_grpc.WebhookProcessHistory.UpdatedAt:type_name -> google.protobuf.Timestamp
	46,  // 77: platform_service_grpc.GetBotInfoOut.Data:type_name -> platform_service_grpc.GetBotInfoData
	21,  // 78: platform_service_grpc.GetBotInfoData.Bot:type_name -> platform_service_grpc.Bot
	47,  // 79: platform_service_grpc.GetBotInfoData.Orders:type_name -> platform_service_grpc.ExchangeOrder
	42,  // 80: platform_service_grpc.GetBotInfoData.Webhooks:type_name -> platform_service_grpc.WebhookProcess
	58,  // 81: platform_service_grpc.ExchangeOrder.Amount:type_name -> platform_service_grpc.Decimal
	58,  // 82: platform_service_grpc.ExchangeOrder.Quantity:type_name -> platform_service_grpc.Decimal
	58,  // 83: platform_service_grpc.ExchangeOrder.Price:type_name -> platform_service_grpc.Decimal
	48,  // 84: platform_service_grpc.ExchangeOrder.History:type_name -> platform_service_grpc.ExchangeOrderLog
	59,  // 85: platform_service_grpc.ExchangeOrder.CreatedAt:type_name -> google.protobuf.Timestamp
	59,  // 86: platform_service_grpc.ExchangeOrder.UpdatedAt:type_name -> google.protobuf.Timestamp
	20,  // 87: platform_service_grpc.ExchangeOrder.DeletedAt:type_name -> platform_service_grpc.NullTime
	58,  // 88: platform_service_grpc.ExchangeOrderLog.Quantity:type_name -> platform_service_grpc.Decimal
	58,  // 89: platform_service_grpc.ExchangeOrderLog.Price:type_name -> platform_service_grpc.Decimal
	59,  // 90: platform_service_grpc.ExchangeOrderLog.CreatedAt:type_name -> google.protobuf.Timestamp
	51,  // 91: platform_service_grpc.GetWebhookInfoOut.Data:type_name -> platform_service_grpc.GetWebhookInfoData
	42,  // 92: platform_service_grpc.GetWebhookInfoData.Webhook:type_name -> platform_service_grpc.WebhookProcess
	47,  // 93: platform_service_grpc.GetWebhookInfoData.Orders:type_name -> platform_service_grpc.ExchangeOrder
	54,  // 94: platform_service_grpc.StatisticOut.Keys:type_name -> platform_service_grpc.ExchangeUserKey
	14,  // 95: platform_service_grpc.ExchangeUserKey.StatisticData:type_name -> platform_service_grpc.StatisticData
	56,  // 96: platform_service_grpc.AddOrdersStatisticIn.Orders:type_name -> platform_service_grpc.ExchangeOrderPointer
	47,  // 97: platform_service_grpc.ExchangeOrderPointer.Order:type_name -> platform_service_grpc.ExchangeOrder
	47,  // 98: platform_service_grpc.GetOrdersOut.Data:type_name -> platform_service_grpc.ExchangeOrder
	0,   // 99: platform_service_grpc.PlatformServiceGRPC.GetTicker:input_type -> platform_service_grpc.Empty
	0,   // 100: platform_service_grpc.PlatformServiceGRPC.ExchangeList:input_type -> platform_service_grpc.Empty
	6,   // 101: platform_service_grpc.PlatformServiceGRPC.ExchangeListDelete:input_type -> platform_service_grpc.exchangeListID
	7,   // 102: platform_service_grpc.PlatformServiceGRPC.ExchangeAdd:input_type -> platform_service_grpc.ExchangeAddIn
	9,   // 103: platform_service_grpc.PlatformServiceGRPC.ExchangeUserKeyAdd:input_type -> platform_service_grpc.ExchangeUserKeyAddIn
	9,   // 104: platform_service_grpc.PlatformServiceGRPC.CheckKeys:input_type -> platform_service_grpc.ExchangeUserKeyAddIn
	10,  // 105: platform_service_grpc.PlatformServiceGRPC.ExchangeUserKeyDelete:input_type -> platform_service_grpc.exchangeUserKeyIDIn
	11,  // 106: platform_service_grpc.PlatformServiceGRPC.ExchangeUserKeyList:input_type -> platform_service_grpc.ExchangeUserListIn
	15,  // 107: platform_service_grpc.PlatformServiceGRPC.WebhookProcess:input_type -> platform_service_grpc.WebhookProcessIn
	26,  // 108: platform_service_grpc.PlatformServiceGRPC.CancelOrder:input_type -> platform_service_grpc.OrderIn
	28,  // 109: platform_service_grpc.PlatformServiceGRPC.UpdateWebhookStatus:input_type -> platform_service_grpc.UpdateWebhookStatusIn
	29,  // 110: platform_service_grpc.PlatformServiceGRPC.GetBot:input_type -> platform_service_grpc.GetBotIn
	31,  // 111: platform_service_grpc.PlatformServiceGRPC.CreateWebhookProcess:input_type -> platform_service_grpc.CreateWebhookProcessIn
	33,  // 112: platform_service_grpc.PlatformServiceGRPC.GetUserKeys:input_type -> platform_service_grpc.GetUserKeysIn
	35,  // 113: platform_service_grpc.PlatformServiceGRPC.WriteWebhookHistory:input_type -> platform_service_grpc.WebhookProcessHistoryDTO
	37,  // 114: platform_service_grpc.PlatformServiceGRPC.WriteOrderLog:input_type -> platform_service_grpc.ExchangeOrderLogDTO
	17,  // 115: platform_service_grpc.PlatformServiceGRPC.WriteOrder:input_type -> platform_service_grpc.WriteOrderIn
	38,  // 116: platform_service_grpc.PlatformServiceGRPC.OrderSellLimit:input_type -> platform_service_grpc.OrderSellLimitIn
	26,  // 117: platform_service_grpc.PlatformServiceGRPC.PutOrder:input_type -> platform_service_grpc.OrderIn
	40,  // 118: platform_service_grpc.PlatformServiceGRPC.GetBotWebhooks:input_type -> platform_service_grpc.GetBotRelationIn
	44,  // 119: platform_service_grpc.PlatformServiceGRPC.GetBotInfo:input_type -> platform_service_grpc.GetBotInfoIn
	49,  // 120: platform_service_grpc.PlatformServiceGRPC.GetWebhookInfo:input_type -> platform_service_grpc.GetWebhookInfoIn
	52,  // 121: platform_service_grpc.PlatformServiceGRPC.GetUserWebhooks:input_type -> platform_service_grpc.GetUserRelationIn
	40,  // 122: platform_service_grpc.PlatformServiceGRPC.GetOrdersStatistic:input_type -> platform_service_grpc.GetBotRelationIn
	55,  // 123: platform_service_grpc.PlatformServiceGRPC.AddOrdersStatistic:input_type -> platform_service_grpc.AddOrdersStatisticIn
	40,  // 124: platform_service_grpc.PlatformServiceGRPC.GetBotOrders:input_type -> platform_service_grpc.GetBotRelationIn
	52,  // 125: platform_service_grpc.PlatformServiceGRPC.GetUserOrders:input_type -> platform_service_grpc.GetUserRelationIn
	40,  // 126: platform_service_grpc.PlatformServiceGRPC.ExchangeOrderList:input_type -> platform_service_grpc.GetBotRelationIn
	52,  // 127: platform_service_grpc.PlatformServiceGRPC.GetAllOrdersStatistic:input_type -> platform_service_grpc.GetUserRelationIn
	3,   // 128: platform_service_grpc.PlatformServiceGRPC.GetTicker:output_type -> platform_service_grpc.GetTickerOut
	4,   // 129: platform_service_grpc.PlatformServiceGRPC.ExchangeList:output_type -> platform_service_grpc.ExchangeListOut
	1,   // 130: platform_service_grpc.PlatformServiceGRPC.ExchangeListDelete:output_type -> platform_service_grpc.Error
	8,   // 131: platform_service_grpc.PlatformServiceGRPC.ExchangeAdd:output_type -> platform_service_grpc.ExchangeOut
	8,   // 132: platform_service_grpc.PlatformServiceGRPC.ExchangeUserKeyAdd:output_type -> platform_service_grpc.ExchangeOut
	1,   // 133: platform_service_grpc.PlatformServiceGRPC.CheckKeys:output_type -> platform_service_grpc.Error
	1,   // 134: platform_service_grpc.PlatformServiceGRPC.ExchangeUserKeyDelete:output_type -> platform_service_grpc.Error
	12,  // 135: platform_service_grpc.PlatformServiceGRPC.ExchangeUserKeyList:output_type -> platform_service_grpc.ExchangeUserListOut
	16,  // 136: platform_service_grpc.PlatformServiceGRPC.WebhookProcess:output_type -> platform_service_grpc.WebhookProcessOut
	27,  // 137: platform_service_grpc.PlatformServiceGRPC.CancelOrder:output_type -> platform_service_grpc.CancelOrderOut
	0,   // 138: platform_service_grpc.PlatformServiceGRPC.UpdateWebhookStatus:output_type -> platform_service_grpc.Empty
	30,  // 139: platform_service_grpc.PlatformServiceGRPC.GetBot:output_type -> platform_service_grpc.GetBotOut
	32,  // 140: platform_service_grpc.PlatformServiceGRPC.CreateWebhookProcess:output_type -> platform_service_grpc.CreateWebhookProcessOut
	34,  // 141: platform_service_grpc.PlatformServiceGRPC.GetUserKeys:output_type -> platform_service_grpc.GetUserKeysOut
	0,   // 142: platform_service_grpc.PlatformServiceGRPC.WriteWebhookHistory:output_type -> platform_service_grpc.Empty
	0,   // 143: platform_service_grpc.PlatformServiceGRPC.WriteOrderLog:output_type -> platform_service_grpc.Empty
	1,   // 144: platform_service_grpc.PlatformServiceGRPC.WriteOrder:output_type -> platform_service_grpc.Error
	0,   // 145: platform_service_grpc.PlatformServiceGRPC.OrderSellLimit:output_type -> platform_service_grpc.Empty
	39,  // 146: platform_service_grpc.PlatformServiceGRPC.PutOrder:output_type -> platform_service_grpc.PutOrderOut
	41,  // 147: platform_service_grpc.PlatformServiceGRPC.GetBotWebhooks:output_type -> platform_service_grpc.GetWebhooksOut
	45,  // 148: platform_service_grpc.PlatformServiceGRPC.GetBotInfo:output_type -> platform_service_grpc.GetBotInfoOut
	50,  // 149: platform_service_grpc.PlatformServiceGRPC.GetWebhookInfo:output_type -> platform_service_grpc.GetWebhookInfoOut
	41,  // 150: platform_service_grpc.PlatformServiceGRPC.GetUserWebhooks:output_type -> platform_service_grpc.GetWebhooksOut
	53,  // 151: platform_service_grpc.PlatformServiceGRPC.GetOrdersStatistic:output_type -> platform_service_grpc.StatisticOut
	53,  // 152: platform_service_grpc.PlatformServiceGRPC.AddOrdersStatistic:output_type -> platform_service_grpc.StatisticOut
	57,  // 153: platform_service_grpc.PlatformServiceGRPC.GetBotOrders:output_type -> platform_service_grpc.GetOrdersOut
	57,  // 154: platform_service_grpc.PlatformServiceGRPC.GetUserOrders:output_type -> platform_service_grpc.GetOrdersOut
	57,  // 155: platform_service_grpc.PlatformServiceGRPC.ExchangeOrderList:output_type -> platform_service_grpc.GetOrdersOut
	53,  // 156: platform_service_grpc.PlatformServiceGRPC.GetAllOrdersStatistic:output_type -> platform_service_grpc.StatisticOut
	128, // [128:157] is the sub-list for method output_type
	99,  // [99:128] is the sub-list for method input_type
	99,  // [99:99] is the sub-list for extension type_name
	99,  // [99:99] is the sub-list for extension extendee
	0,   // [0:99] is the sub-list for field type_name
}

func init() { file_platform_proto_init() }
func file_platform_proto_init() {
	if File_platform_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_platform_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeTicker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTickerOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeListOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeListID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeAddIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeUserKeyAddIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeUserKeyIDIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeUserListIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeUserListOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeUserKeyID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatisticData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebhookProcessIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebhookProcessOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteOrderIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebhookProcessDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NullTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StrategyPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeOrderDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeUserKeyDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelOrderOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWebhookStatusIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBotIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBotOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWebhookProcessIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWebhookProcessOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserKeysIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserKeysOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebhookProcessHistoryDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NullString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeOrderLogDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderSellLimitIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutOrderOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBotRelationIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWebhooksOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebhookProcess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebhookProcessHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBotInfoIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBotInfoOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBotInfoData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeOrderLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWebhookInfoIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWebhookInfoOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWebhookInfoData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserRelationIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatisticOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeUserKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOrdersStatisticIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeOrderPointer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrdersOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Decimal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_platform_proto_msgTypes[56].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_platform_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   59,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_platform_proto_goTypes,
		DependencyIndexes: file_platform_proto_depIdxs,
		MessageInfos:      file_platform_proto_msgTypes,
	}.Build()
	File_platform_proto = out.File
	file_platform_proto_rawDesc = nil
	file_platform_proto_goTypes = nil
	file_platform_proto_depIdxs = nil
}
