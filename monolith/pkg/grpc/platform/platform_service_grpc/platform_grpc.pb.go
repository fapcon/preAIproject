// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: platform.proto

package platform_service_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlatformServiceGRPCClient is the client API for PlatformServiceGRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlatformServiceGRPCClient interface {
	GetTicker(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetTickerOut, error)
	ExchangeList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ExchangeListOut, error)
	ExchangeListDelete(ctx context.Context, in *ExchangeListID, opts ...grpc.CallOption) (*Error, error)
	ExchangeAdd(ctx context.Context, in *ExchangeAddIn, opts ...grpc.CallOption) (*ExchangeOut, error)
	ExchangeUserKeyAdd(ctx context.Context, in *ExchangeUserKeyAddIn, opts ...grpc.CallOption) (*ExchangeOut, error)
	CheckKeys(ctx context.Context, in *ExchangeUserKeyAddIn, opts ...grpc.CallOption) (*Error, error)
	ExchangeUserKeyDelete(ctx context.Context, in *ExchangeUserKeyIDIn, opts ...grpc.CallOption) (*Error, error)
	ExchangeUserKeyList(ctx context.Context, in *ExchangeUserListIn, opts ...grpc.CallOption) (*ExchangeUserListOut, error)
	WebhookProcess(ctx context.Context, in *WebhookProcessIn, opts ...grpc.CallOption) (*WebhookProcessOut, error)
	CancelOrder(ctx context.Context, in *OrderIn, opts ...grpc.CallOption) (*CancelOrderOut, error)
	UpdateWebhookStatus(ctx context.Context, in *UpdateWebhookStatusIn, opts ...grpc.CallOption) (*Empty, error)
	GetBot(ctx context.Context, in *GetBotIn, opts ...grpc.CallOption) (*GetBotOut, error)
	CreateWebhookProcess(ctx context.Context, in *CreateWebhookProcessIn, opts ...grpc.CallOption) (*CreateWebhookProcessOut, error)
	GetUserKeys(ctx context.Context, in *GetUserKeysIn, opts ...grpc.CallOption) (*GetUserKeysOut, error)
	WriteWebhookHistory(ctx context.Context, in *WebhookProcessHistoryDTO, opts ...grpc.CallOption) (*Empty, error)
	WriteOrderLog(ctx context.Context, in *ExchangeOrderLogDTO, opts ...grpc.CallOption) (*Empty, error)
	WriteOrder(ctx context.Context, in *WriteOrderIn, opts ...grpc.CallOption) (*Error, error)
	OrderSellLimit(ctx context.Context, in *OrderSellLimitIn, opts ...grpc.CallOption) (*Empty, error)
	PutOrder(ctx context.Context, in *OrderIn, opts ...grpc.CallOption) (*PutOrderOut, error)
	GetBotWebhooks(ctx context.Context, in *GetBotRelationIn, opts ...grpc.CallOption) (*GetWebhooksOut, error)
	GetBotInfo(ctx context.Context, in *GetBotInfoIn, opts ...grpc.CallOption) (*GetBotInfoOut, error)
	GetWebhookInfo(ctx context.Context, in *GetWebhookInfoIn, opts ...grpc.CallOption) (*GetWebhookInfoOut, error)
	GetUserWebhooks(ctx context.Context, in *GetUserRelationIn, opts ...grpc.CallOption) (*GetWebhooksOut, error)
	GetOrdersStatistic(ctx context.Context, in *GetBotRelationIn, opts ...grpc.CallOption) (*StatisticOut, error)
	AddOrdersStatistic(ctx context.Context, in *AddOrdersStatisticIn, opts ...grpc.CallOption) (*StatisticOut, error)
	GetBotOrders(ctx context.Context, in *GetBotRelationIn, opts ...grpc.CallOption) (*GetOrdersOut, error)
	GetUserOrders(ctx context.Context, in *GetUserRelationIn, opts ...grpc.CallOption) (*GetOrdersOut, error)
	ExchangeOrderList(ctx context.Context, in *GetBotRelationIn, opts ...grpc.CallOption) (*GetOrdersOut, error)
	GetAllOrdersStatistic(ctx context.Context, in *GetUserRelationIn, opts ...grpc.CallOption) (*StatisticOut, error)
}

type platformServiceGRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewPlatformServiceGRPCClient(cc grpc.ClientConnInterface) PlatformServiceGRPCClient {
	return &platformServiceGRPCClient{cc}
}

func (c *platformServiceGRPCClient) GetTicker(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetTickerOut, error) {
	out := new(GetTickerOut)
	err := c.cc.Invoke(ctx, "/platform_service_grpc.PlatformServiceGRPC/GetTicker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformServiceGRPCClient) ExchangeList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ExchangeListOut, error) {
	out := new(ExchangeListOut)
	err := c.cc.Invoke(ctx, "/platform_service_grpc.PlatformServiceGRPC/ExchangeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformServiceGRPCClient) ExchangeListDelete(ctx context.Context, in *ExchangeListID, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/platform_service_grpc.PlatformServiceGRPC/ExchangeListDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformServiceGRPCClient) ExchangeAdd(ctx context.Context, in *ExchangeAddIn, opts ...grpc.CallOption) (*ExchangeOut, error) {
	out := new(ExchangeOut)
	err := c.cc.Invoke(ctx, "/platform_service_grpc.PlatformServiceGRPC/ExchangeAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformServiceGRPCClient) ExchangeUserKeyAdd(ctx context.Context, in *ExchangeUserKeyAddIn, opts ...grpc.CallOption) (*ExchangeOut, error) {
	out := new(ExchangeOut)
	err := c.cc.Invoke(ctx, "/platform_service_grpc.PlatformServiceGRPC/ExchangeUserKeyAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformServiceGRPCClient) CheckKeys(ctx context.Context, in *ExchangeUserKeyAddIn, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/platform_service_grpc.PlatformServiceGRPC/CheckKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformServiceGRPCClient) ExchangeUserKeyDelete(ctx context.Context, in *ExchangeUserKeyIDIn, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/platform_service_grpc.PlatformServiceGRPC/ExchangeUserKeyDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformServiceGRPCClient) ExchangeUserKeyList(ctx context.Context, in *ExchangeUserListIn, opts ...grpc.CallOption) (*ExchangeUserListOut, error) {
	out := new(ExchangeUserListOut)
	err := c.cc.Invoke(ctx, "/platform_service_grpc.PlatformServiceGRPC/ExchangeUserKeyList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformServiceGRPCClient) WebhookProcess(ctx context.Context, in *WebhookProcessIn, opts ...grpc.CallOption) (*WebhookProcessOut, error) {
	out := new(WebhookProcessOut)
	err := c.cc.Invoke(ctx, "/platform_service_grpc.PlatformServiceGRPC/WebhookProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformServiceGRPCClient) CancelOrder(ctx context.Context, in *OrderIn, opts ...grpc.CallOption) (*CancelOrderOut, error) {
	out := new(CancelOrderOut)
	err := c.cc.Invoke(ctx, "/platform_service_grpc.PlatformServiceGRPC/CancelOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformServiceGRPCClient) UpdateWebhookStatus(ctx context.Context, in *UpdateWebhookStatusIn, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/platform_service_grpc.PlatformServiceGRPC/UpdateWebhookStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformServiceGRPCClient) GetBot(ctx context.Context, in *GetBotIn, opts ...grpc.CallOption) (*GetBotOut, error) {
	out := new(GetBotOut)
	err := c.cc.Invoke(ctx, "/platform_service_grpc.PlatformServiceGRPC/GetBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformServiceGRPCClient) CreateWebhookProcess(ctx context.Context, in *CreateWebhookProcessIn, opts ...grpc.CallOption) (*CreateWebhookProcessOut, error) {
	out := new(CreateWebhookProcessOut)
	err := c.cc.Invoke(ctx, "/platform_service_grpc.PlatformServiceGRPC/CreateWebhookProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformServiceGRPCClient) GetUserKeys(ctx context.Context, in *GetUserKeysIn, opts ...grpc.CallOption) (*GetUserKeysOut, error) {
	out := new(GetUserKeysOut)
	err := c.cc.Invoke(ctx, "/platform_service_grpc.PlatformServiceGRPC/GetUserKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformServiceGRPCClient) WriteWebhookHistory(ctx context.Context, in *WebhookProcessHistoryDTO, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/platform_service_grpc.PlatformServiceGRPC/WriteWebhookHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformServiceGRPCClient) WriteOrderLog(ctx context.Context, in *ExchangeOrderLogDTO, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/platform_service_grpc.PlatformServiceGRPC/WriteOrderLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformServiceGRPCClient) WriteOrder(ctx context.Context, in *WriteOrderIn, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/platform_service_grpc.PlatformServiceGRPC/WriteOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformServiceGRPCClient) OrderSellLimit(ctx context.Context, in *OrderSellLimitIn, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/platform_service_grpc.PlatformServiceGRPC/OrderSellLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformServiceGRPCClient) PutOrder(ctx context.Context, in *OrderIn, opts ...grpc.CallOption) (*PutOrderOut, error) {
	out := new(PutOrderOut)
	err := c.cc.Invoke(ctx, "/platform_service_grpc.PlatformServiceGRPC/PutOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformServiceGRPCClient) GetBotWebhooks(ctx context.Context, in *GetBotRelationIn, opts ...grpc.CallOption) (*GetWebhooksOut, error) {
	out := new(GetWebhooksOut)
	err := c.cc.Invoke(ctx, "/platform_service_grpc.PlatformServiceGRPC/GetBotWebhooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformServiceGRPCClient) GetBotInfo(ctx context.Context, in *GetBotInfoIn, opts ...grpc.CallOption) (*GetBotInfoOut, error) {
	out := new(GetBotInfoOut)
	err := c.cc.Invoke(ctx, "/platform_service_grpc.PlatformServiceGRPC/GetBotInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformServiceGRPCClient) GetWebhookInfo(ctx context.Context, in *GetWebhookInfoIn, opts ...grpc.CallOption) (*GetWebhookInfoOut, error) {
	out := new(GetWebhookInfoOut)
	err := c.cc.Invoke(ctx, "/platform_service_grpc.PlatformServiceGRPC/GetWebhookInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformServiceGRPCClient) GetUserWebhooks(ctx context.Context, in *GetUserRelationIn, opts ...grpc.CallOption) (*GetWebhooksOut, error) {
	out := new(GetWebhooksOut)
	err := c.cc.Invoke(ctx, "/platform_service_grpc.PlatformServiceGRPC/GetUserWebhooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformServiceGRPCClient) GetOrdersStatistic(ctx context.Context, in *GetBotRelationIn, opts ...grpc.CallOption) (*StatisticOut, error) {
	out := new(StatisticOut)
	err := c.cc.Invoke(ctx, "/platform_service_grpc.PlatformServiceGRPC/GetOrdersStatistic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformServiceGRPCClient) AddOrdersStatistic(ctx context.Context, in *AddOrdersStatisticIn, opts ...grpc.CallOption) (*StatisticOut, error) {
	out := new(StatisticOut)
	err := c.cc.Invoke(ctx, "/platform_service_grpc.PlatformServiceGRPC/AddOrdersStatistic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformServiceGRPCClient) GetBotOrders(ctx context.Context, in *GetBotRelationIn, opts ...grpc.CallOption) (*GetOrdersOut, error) {
	out := new(GetOrdersOut)
	err := c.cc.Invoke(ctx, "/platform_service_grpc.PlatformServiceGRPC/GetBotOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformServiceGRPCClient) GetUserOrders(ctx context.Context, in *GetUserRelationIn, opts ...grpc.CallOption) (*GetOrdersOut, error) {
	out := new(GetOrdersOut)
	err := c.cc.Invoke(ctx, "/platform_service_grpc.PlatformServiceGRPC/GetUserOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformServiceGRPCClient) ExchangeOrderList(ctx context.Context, in *GetBotRelationIn, opts ...grpc.CallOption) (*GetOrdersOut, error) {
	out := new(GetOrdersOut)
	err := c.cc.Invoke(ctx, "/platform_service_grpc.PlatformServiceGRPC/ExchangeOrderList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformServiceGRPCClient) GetAllOrdersStatistic(ctx context.Context, in *GetUserRelationIn, opts ...grpc.CallOption) (*StatisticOut, error) {
	out := new(StatisticOut)
	err := c.cc.Invoke(ctx, "/platform_service_grpc.PlatformServiceGRPC/GetAllOrdersStatistic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlatformServiceGRPCServer is the server API for PlatformServiceGRPC service.
// All implementations must embed UnimplementedPlatformServiceGRPCServer
// for forward compatibility
type PlatformServiceGRPCServer interface {
	GetTicker(context.Context, *Empty) (*GetTickerOut, error)
	ExchangeList(context.Context, *Empty) (*ExchangeListOut, error)
	ExchangeListDelete(context.Context, *ExchangeListID) (*Error, error)
	ExchangeAdd(context.Context, *ExchangeAddIn) (*ExchangeOut, error)
	ExchangeUserKeyAdd(context.Context, *ExchangeUserKeyAddIn) (*ExchangeOut, error)
	CheckKeys(context.Context, *ExchangeUserKeyAddIn) (*Error, error)
	ExchangeUserKeyDelete(context.Context, *ExchangeUserKeyIDIn) (*Error, error)
	ExchangeUserKeyList(context.Context, *ExchangeUserListIn) (*ExchangeUserListOut, error)
	WebhookProcess(context.Context, *WebhookProcessIn) (*WebhookProcessOut, error)
	CancelOrder(context.Context, *OrderIn) (*CancelOrderOut, error)
	UpdateWebhookStatus(context.Context, *UpdateWebhookStatusIn) (*Empty, error)
	GetBot(context.Context, *GetBotIn) (*GetBotOut, error)
	CreateWebhookProcess(context.Context, *CreateWebhookProcessIn) (*CreateWebhookProcessOut, error)
	GetUserKeys(context.Context, *GetUserKeysIn) (*GetUserKeysOut, error)
	WriteWebhookHistory(context.Context, *WebhookProcessHistoryDTO) (*Empty, error)
	WriteOrderLog(context.Context, *ExchangeOrderLogDTO) (*Empty, error)
	WriteOrder(context.Context, *WriteOrderIn) (*Error, error)
	OrderSellLimit(context.Context, *OrderSellLimitIn) (*Empty, error)
	PutOrder(context.Context, *OrderIn) (*PutOrderOut, error)
	GetBotWebhooks(context.Context, *GetBotRelationIn) (*GetWebhooksOut, error)
	GetBotInfo(context.Context, *GetBotInfoIn) (*GetBotInfoOut, error)
	GetWebhookInfo(context.Context, *GetWebhookInfoIn) (*GetWebhookInfoOut, error)
	GetUserWebhooks(context.Context, *GetUserRelationIn) (*GetWebhooksOut, error)
	GetOrdersStatistic(context.Context, *GetBotRelationIn) (*StatisticOut, error)
	AddOrdersStatistic(context.Context, *AddOrdersStatisticIn) (*StatisticOut, error)
	GetBotOrders(context.Context, *GetBotRelationIn) (*GetOrdersOut, error)
	GetUserOrders(context.Context, *GetUserRelationIn) (*GetOrdersOut, error)
	ExchangeOrderList(context.Context, *GetBotRelationIn) (*GetOrdersOut, error)
	GetAllOrdersStatistic(context.Context, *GetUserRelationIn) (*StatisticOut, error)
	mustEmbedUnimplementedPlatformServiceGRPCServer()
}

// UnimplementedPlatformServiceGRPCServer must be embedded to have forward compatible implementations.
type UnimplementedPlatformServiceGRPCServer struct {
}

func (UnimplementedPlatformServiceGRPCServer) GetTicker(context.Context, *Empty) (*GetTickerOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicker not implemented")
}
func (UnimplementedPlatformServiceGRPCServer) ExchangeList(context.Context, *Empty) (*ExchangeListOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeList not implemented")
}
func (UnimplementedPlatformServiceGRPCServer) ExchangeListDelete(context.Context, *ExchangeListID) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeListDelete not implemented")
}
func (UnimplementedPlatformServiceGRPCServer) ExchangeAdd(context.Context, *ExchangeAddIn) (*ExchangeOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeAdd not implemented")
}
func (UnimplementedPlatformServiceGRPCServer) ExchangeUserKeyAdd(context.Context, *ExchangeUserKeyAddIn) (*ExchangeOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeUserKeyAdd not implemented")
}
func (UnimplementedPlatformServiceGRPCServer) CheckKeys(context.Context, *ExchangeUserKeyAddIn) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckKeys not implemented")
}
func (UnimplementedPlatformServiceGRPCServer) ExchangeUserKeyDelete(context.Context, *ExchangeUserKeyIDIn) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeUserKeyDelete not implemented")
}
func (UnimplementedPlatformServiceGRPCServer) ExchangeUserKeyList(context.Context, *ExchangeUserListIn) (*ExchangeUserListOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeUserKeyList not implemented")
}
func (UnimplementedPlatformServiceGRPCServer) WebhookProcess(context.Context, *WebhookProcessIn) (*WebhookProcessOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebhookProcess not implemented")
}
func (UnimplementedPlatformServiceGRPCServer) CancelOrder(context.Context, *OrderIn) (*CancelOrderOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrder not implemented")
}
func (UnimplementedPlatformServiceGRPCServer) UpdateWebhookStatus(context.Context, *UpdateWebhookStatusIn) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWebhookStatus not implemented")
}
func (UnimplementedPlatformServiceGRPCServer) GetBot(context.Context, *GetBotIn) (*GetBotOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBot not implemented")
}
func (UnimplementedPlatformServiceGRPCServer) CreateWebhookProcess(context.Context, *CreateWebhookProcessIn) (*CreateWebhookProcessOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWebhookProcess not implemented")
}
func (UnimplementedPlatformServiceGRPCServer) GetUserKeys(context.Context, *GetUserKeysIn) (*GetUserKeysOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserKeys not implemented")
}
func (UnimplementedPlatformServiceGRPCServer) WriteWebhookHistory(context.Context, *WebhookProcessHistoryDTO) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteWebhookHistory not implemented")
}
func (UnimplementedPlatformServiceGRPCServer) WriteOrderLog(context.Context, *ExchangeOrderLogDTO) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteOrderLog not implemented")
}
func (UnimplementedPlatformServiceGRPCServer) WriteOrder(context.Context, *WriteOrderIn) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteOrder not implemented")
}
func (UnimplementedPlatformServiceGRPCServer) OrderSellLimit(context.Context, *OrderSellLimitIn) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderSellLimit not implemented")
}
func (UnimplementedPlatformServiceGRPCServer) PutOrder(context.Context, *OrderIn) (*PutOrderOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutOrder not implemented")
}
func (UnimplementedPlatformServiceGRPCServer) GetBotWebhooks(context.Context, *GetBotRelationIn) (*GetWebhooksOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBotWebhooks not implemented")
}
func (UnimplementedPlatformServiceGRPCServer) GetBotInfo(context.Context, *GetBotInfoIn) (*GetBotInfoOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBotInfo not implemented")
}
func (UnimplementedPlatformServiceGRPCServer) GetWebhookInfo(context.Context, *GetWebhookInfoIn) (*GetWebhookInfoOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWebhookInfo not implemented")
}
func (UnimplementedPlatformServiceGRPCServer) GetUserWebhooks(context.Context, *GetUserRelationIn) (*GetWebhooksOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserWebhooks not implemented")
}
func (UnimplementedPlatformServiceGRPCServer) GetOrdersStatistic(context.Context, *GetBotRelationIn) (*StatisticOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrdersStatistic not implemented")
}
func (UnimplementedPlatformServiceGRPCServer) AddOrdersStatistic(context.Context, *AddOrdersStatisticIn) (*StatisticOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrdersStatistic not implemented")
}
func (UnimplementedPlatformServiceGRPCServer) GetBotOrders(context.Context, *GetBotRelationIn) (*GetOrdersOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBotOrders not implemented")
}
func (UnimplementedPlatformServiceGRPCServer) GetUserOrders(context.Context, *GetUserRelationIn) (*GetOrdersOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserOrders not implemented")
}
func (UnimplementedPlatformServiceGRPCServer) ExchangeOrderList(context.Context, *GetBotRelationIn) (*GetOrdersOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeOrderList not implemented")
}
func (UnimplementedPlatformServiceGRPCServer) GetAllOrdersStatistic(context.Context, *GetUserRelationIn) (*StatisticOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllOrdersStatistic not implemented")
}
func (UnimplementedPlatformServiceGRPCServer) mustEmbedUnimplementedPlatformServiceGRPCServer() {}

// UnsafePlatformServiceGRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlatformServiceGRPCServer will
// result in compilation errors.
type UnsafePlatformServiceGRPCServer interface {
	mustEmbedUnimplementedPlatformServiceGRPCServer()
}

func RegisterPlatformServiceGRPCServer(s grpc.ServiceRegistrar, srv PlatformServiceGRPCServer) {
	s.RegisterService(&PlatformServiceGRPC_ServiceDesc, srv)
}

func _PlatformServiceGRPC_GetTicker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServiceGRPCServer).GetTicker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/platform_service_grpc.PlatformServiceGRPC/GetTicker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServiceGRPCServer).GetTicker(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformServiceGRPC_ExchangeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServiceGRPCServer).ExchangeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/platform_service_grpc.PlatformServiceGRPC/ExchangeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServiceGRPCServer).ExchangeList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformServiceGRPC_ExchangeListDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeListID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServiceGRPCServer).ExchangeListDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/platform_service_grpc.PlatformServiceGRPC/ExchangeListDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServiceGRPCServer).ExchangeListDelete(ctx, req.(*ExchangeListID))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformServiceGRPC_ExchangeAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeAddIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServiceGRPCServer).ExchangeAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/platform_service_grpc.PlatformServiceGRPC/ExchangeAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServiceGRPCServer).ExchangeAdd(ctx, req.(*ExchangeAddIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformServiceGRPC_ExchangeUserKeyAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeUserKeyAddIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServiceGRPCServer).ExchangeUserKeyAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/platform_service_grpc.PlatformServiceGRPC/ExchangeUserKeyAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServiceGRPCServer).ExchangeUserKeyAdd(ctx, req.(*ExchangeUserKeyAddIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformServiceGRPC_CheckKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeUserKeyAddIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServiceGRPCServer).CheckKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/platform_service_grpc.PlatformServiceGRPC/CheckKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServiceGRPCServer).CheckKeys(ctx, req.(*ExchangeUserKeyAddIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformServiceGRPC_ExchangeUserKeyDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeUserKeyIDIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServiceGRPCServer).ExchangeUserKeyDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/platform_service_grpc.PlatformServiceGRPC/ExchangeUserKeyDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServiceGRPCServer).ExchangeUserKeyDelete(ctx, req.(*ExchangeUserKeyIDIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformServiceGRPC_ExchangeUserKeyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeUserListIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServiceGRPCServer).ExchangeUserKeyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/platform_service_grpc.PlatformServiceGRPC/ExchangeUserKeyList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServiceGRPCServer).ExchangeUserKeyList(ctx, req.(*ExchangeUserListIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformServiceGRPC_WebhookProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebhookProcessIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServiceGRPCServer).WebhookProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/platform_service_grpc.PlatformServiceGRPC/WebhookProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServiceGRPCServer).WebhookProcess(ctx, req.(*WebhookProcessIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformServiceGRPC_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServiceGRPCServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/platform_service_grpc.PlatformServiceGRPC/CancelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServiceGRPCServer).CancelOrder(ctx, req.(*OrderIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformServiceGRPC_UpdateWebhookStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWebhookStatusIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServiceGRPCServer).UpdateWebhookStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/platform_service_grpc.PlatformServiceGRPC/UpdateWebhookStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServiceGRPCServer).UpdateWebhookStatus(ctx, req.(*UpdateWebhookStatusIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformServiceGRPC_GetBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBotIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServiceGRPCServer).GetBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/platform_service_grpc.PlatformServiceGRPC/GetBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServiceGRPCServer).GetBot(ctx, req.(*GetBotIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformServiceGRPC_CreateWebhookProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWebhookProcessIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServiceGRPCServer).CreateWebhookProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/platform_service_grpc.PlatformServiceGRPC/CreateWebhookProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServiceGRPCServer).CreateWebhookProcess(ctx, req.(*CreateWebhookProcessIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformServiceGRPC_GetUserKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserKeysIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServiceGRPCServer).GetUserKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/platform_service_grpc.PlatformServiceGRPC/GetUserKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServiceGRPCServer).GetUserKeys(ctx, req.(*GetUserKeysIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformServiceGRPC_WriteWebhookHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebhookProcessHistoryDTO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServiceGRPCServer).WriteWebhookHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/platform_service_grpc.PlatformServiceGRPC/WriteWebhookHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServiceGRPCServer).WriteWebhookHistory(ctx, req.(*WebhookProcessHistoryDTO))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformServiceGRPC_WriteOrderLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeOrderLogDTO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServiceGRPCServer).WriteOrderLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/platform_service_grpc.PlatformServiceGRPC/WriteOrderLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServiceGRPCServer).WriteOrderLog(ctx, req.(*ExchangeOrderLogDTO))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformServiceGRPC_WriteOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteOrderIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServiceGRPCServer).WriteOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/platform_service_grpc.PlatformServiceGRPC/WriteOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServiceGRPCServer).WriteOrder(ctx, req.(*WriteOrderIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformServiceGRPC_OrderSellLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderSellLimitIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServiceGRPCServer).OrderSellLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/platform_service_grpc.PlatformServiceGRPC/OrderSellLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServiceGRPCServer).OrderSellLimit(ctx, req.(*OrderSellLimitIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformServiceGRPC_PutOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServiceGRPCServer).PutOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/platform_service_grpc.PlatformServiceGRPC/PutOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServiceGRPCServer).PutOrder(ctx, req.(*OrderIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformServiceGRPC_GetBotWebhooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBotRelationIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServiceGRPCServer).GetBotWebhooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/platform_service_grpc.PlatformServiceGRPC/GetBotWebhooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServiceGRPCServer).GetBotWebhooks(ctx, req.(*GetBotRelationIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformServiceGRPC_GetBotInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBotInfoIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServiceGRPCServer).GetBotInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/platform_service_grpc.PlatformServiceGRPC/GetBotInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServiceGRPCServer).GetBotInfo(ctx, req.(*GetBotInfoIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformServiceGRPC_GetWebhookInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWebhookInfoIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServiceGRPCServer).GetWebhookInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/platform_service_grpc.PlatformServiceGRPC/GetWebhookInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServiceGRPCServer).GetWebhookInfo(ctx, req.(*GetWebhookInfoIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformServiceGRPC_GetUserWebhooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRelationIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServiceGRPCServer).GetUserWebhooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/platform_service_grpc.PlatformServiceGRPC/GetUserWebhooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServiceGRPCServer).GetUserWebhooks(ctx, req.(*GetUserRelationIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformServiceGRPC_GetOrdersStatistic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBotRelationIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServiceGRPCServer).GetOrdersStatistic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/platform_service_grpc.PlatformServiceGRPC/GetOrdersStatistic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServiceGRPCServer).GetOrdersStatistic(ctx, req.(*GetBotRelationIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformServiceGRPC_AddOrdersStatistic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrdersStatisticIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServiceGRPCServer).AddOrdersStatistic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/platform_service_grpc.PlatformServiceGRPC/AddOrdersStatistic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServiceGRPCServer).AddOrdersStatistic(ctx, req.(*AddOrdersStatisticIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformServiceGRPC_GetBotOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBotRelationIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServiceGRPCServer).GetBotOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/platform_service_grpc.PlatformServiceGRPC/GetBotOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServiceGRPCServer).GetBotOrders(ctx, req.(*GetBotRelationIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformServiceGRPC_GetUserOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRelationIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServiceGRPCServer).GetUserOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/platform_service_grpc.PlatformServiceGRPC/GetUserOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServiceGRPCServer).GetUserOrders(ctx, req.(*GetUserRelationIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformServiceGRPC_ExchangeOrderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBotRelationIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServiceGRPCServer).ExchangeOrderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/platform_service_grpc.PlatformServiceGRPC/ExchangeOrderList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServiceGRPCServer).ExchangeOrderList(ctx, req.(*GetBotRelationIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformServiceGRPC_GetAllOrdersStatistic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRelationIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServiceGRPCServer).GetAllOrdersStatistic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/platform_service_grpc.PlatformServiceGRPC/GetAllOrdersStatistic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServiceGRPCServer).GetAllOrdersStatistic(ctx, req.(*GetUserRelationIn))
	}
	return interceptor(ctx, in, info, handler)
}

// PlatformServiceGRPC_ServiceDesc is the grpc.ServiceDesc for PlatformServiceGRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlatformServiceGRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "platform_service_grpc.PlatformServiceGRPC",
	HandlerType: (*PlatformServiceGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTicker",
			Handler:    _PlatformServiceGRPC_GetTicker_Handler,
		},
		{
			MethodName: "ExchangeList",
			Handler:    _PlatformServiceGRPC_ExchangeList_Handler,
		},
		{
			MethodName: "ExchangeListDelete",
			Handler:    _PlatformServiceGRPC_ExchangeListDelete_Handler,
		},
		{
			MethodName: "ExchangeAdd",
			Handler:    _PlatformServiceGRPC_ExchangeAdd_Handler,
		},
		{
			MethodName: "ExchangeUserKeyAdd",
			Handler:    _PlatformServiceGRPC_ExchangeUserKeyAdd_Handler,
		},
		{
			MethodName: "CheckKeys",
			Handler:    _PlatformServiceGRPC_CheckKeys_Handler,
		},
		{
			MethodName: "ExchangeUserKeyDelete",
			Handler:    _PlatformServiceGRPC_ExchangeUserKeyDelete_Handler,
		},
		{
			MethodName: "ExchangeUserKeyList",
			Handler:    _PlatformServiceGRPC_ExchangeUserKeyList_Handler,
		},
		{
			MethodName: "WebhookProcess",
			Handler:    _PlatformServiceGRPC_WebhookProcess_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _PlatformServiceGRPC_CancelOrder_Handler,
		},
		{
			MethodName: "UpdateWebhookStatus",
			Handler:    _PlatformServiceGRPC_UpdateWebhookStatus_Handler,
		},
		{
			MethodName: "GetBot",
			Handler:    _PlatformServiceGRPC_GetBot_Handler,
		},
		{
			MethodName: "CreateWebhookProcess",
			Handler:    _PlatformServiceGRPC_CreateWebhookProcess_Handler,
		},
		{
			MethodName: "GetUserKeys",
			Handler:    _PlatformServiceGRPC_GetUserKeys_Handler,
		},
		{
			MethodName: "WriteWebhookHistory",
			Handler:    _PlatformServiceGRPC_WriteWebhookHistory_Handler,
		},
		{
			MethodName: "WriteOrderLog",
			Handler:    _PlatformServiceGRPC_WriteOrderLog_Handler,
		},
		{
			MethodName: "WriteOrder",
			Handler:    _PlatformServiceGRPC_WriteOrder_Handler,
		},
		{
			MethodName: "OrderSellLimit",
			Handler:    _PlatformServiceGRPC_OrderSellLimit_Handler,
		},
		{
			MethodName: "PutOrder",
			Handler:    _PlatformServiceGRPC_PutOrder_Handler,
		},
		{
			MethodName: "GetBotWebhooks",
			Handler:    _PlatformServiceGRPC_GetBotWebhooks_Handler,
		},
		{
			MethodName: "GetBotInfo",
			Handler:    _PlatformServiceGRPC_GetBotInfo_Handler,
		},
		{
			MethodName: "GetWebhookInfo",
			Handler:    _PlatformServiceGRPC_GetWebhookInfo_Handler,
		},
		{
			MethodName: "GetUserWebhooks",
			Handler:    _PlatformServiceGRPC_GetUserWebhooks_Handler,
		},
		{
			MethodName: "GetOrdersStatistic",
			Handler:    _PlatformServiceGRPC_GetOrdersStatistic_Handler,
		},
		{
			MethodName: "AddOrdersStatistic",
			Handler:    _PlatformServiceGRPC_AddOrdersStatistic_Handler,
		},
		{
			MethodName: "GetBotOrders",
			Handler:    _PlatformServiceGRPC_GetBotOrders_Handler,
		},
		{
			MethodName: "GetUserOrders",
			Handler:    _PlatformServiceGRPC_GetUserOrders_Handler,
		},
		{
			MethodName: "ExchangeOrderList",
			Handler:    _PlatformServiceGRPC_ExchangeOrderList_Handler,
		},
		{
			MethodName: "GetAllOrdersStatistic",
			Handler:    _PlatformServiceGRPC_GetAllOrdersStatistic_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "platform.proto",
}
