// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: auth.proto

package auth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthServiceGRPCClient is the client API for AuthServiceGRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServiceGRPCClient interface {
	Register(ctx context.Context, in *RegisterIn, opts ...grpc.CallOption) (*RegisterOut, error)
	AuthorizeEmail(ctx context.Context, in *AuthorizeEmailIn, opts ...grpc.CallOption) (*AuthorizeOut, error)
	AuthorizeRefresh(ctx context.Context, in *AuthorizeRefreshIn, opts ...grpc.CallOption) (*AuthorizeOut, error)
	AuthorizePhone(ctx context.Context, in *AuthorizePhoneIn, opts ...grpc.CallOption) (*AuthorizeOut, error)
	SendPhoneCode(ctx context.Context, in *SendPhoneCodeIn, opts ...grpc.CallOption) (*SendPhoneCodeOut, error)
	VerifyEmail(ctx context.Context, in *VerifyEmailIn, opts ...grpc.CallOption) (*VerifyEmailOut, error)
	SocialCallback(ctx context.Context, in *SocialCallbackIn, opts ...grpc.CallOption) (*AuthorizeOut, error)
	SocialGetRedirectURL(ctx context.Context, in *SocialGetRedirectUrlIn, opts ...grpc.CallOption) (*SocialGetRedirectUrlOut, error)
}

type authServiceGRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceGRPCClient(cc grpc.ClientConnInterface) AuthServiceGRPCClient {
	return &authServiceGRPCClient{cc}
}

func (c *authServiceGRPCClient) Register(ctx context.Context, in *RegisterIn, opts ...grpc.CallOption) (*RegisterOut, error) {
	out := new(RegisterOut)
	err := c.cc.Invoke(ctx, "/auth.AuthServiceGRPC/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceGRPCClient) AuthorizeEmail(ctx context.Context, in *AuthorizeEmailIn, opts ...grpc.CallOption) (*AuthorizeOut, error) {
	out := new(AuthorizeOut)
	err := c.cc.Invoke(ctx, "/auth.AuthServiceGRPC/AuthorizeEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceGRPCClient) AuthorizeRefresh(ctx context.Context, in *AuthorizeRefreshIn, opts ...grpc.CallOption) (*AuthorizeOut, error) {
	out := new(AuthorizeOut)
	err := c.cc.Invoke(ctx, "/auth.AuthServiceGRPC/AuthorizeRefresh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceGRPCClient) AuthorizePhone(ctx context.Context, in *AuthorizePhoneIn, opts ...grpc.CallOption) (*AuthorizeOut, error) {
	out := new(AuthorizeOut)
	err := c.cc.Invoke(ctx, "/auth.AuthServiceGRPC/AuthorizePhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceGRPCClient) SendPhoneCode(ctx context.Context, in *SendPhoneCodeIn, opts ...grpc.CallOption) (*SendPhoneCodeOut, error) {
	out := new(SendPhoneCodeOut)
	err := c.cc.Invoke(ctx, "/auth.AuthServiceGRPC/SendPhoneCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceGRPCClient) VerifyEmail(ctx context.Context, in *VerifyEmailIn, opts ...grpc.CallOption) (*VerifyEmailOut, error) {
	out := new(VerifyEmailOut)
	err := c.cc.Invoke(ctx, "/auth.AuthServiceGRPC/VerifyEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceGRPCClient) SocialCallback(ctx context.Context, in *SocialCallbackIn, opts ...grpc.CallOption) (*AuthorizeOut, error) {
	out := new(AuthorizeOut)
	err := c.cc.Invoke(ctx, "/auth.AuthServiceGRPC/SocialCallback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceGRPCClient) SocialGetRedirectURL(ctx context.Context, in *SocialGetRedirectUrlIn, opts ...grpc.CallOption) (*SocialGetRedirectUrlOut, error) {
	out := new(SocialGetRedirectUrlOut)
	err := c.cc.Invoke(ctx, "/auth.AuthServiceGRPC/SocialGetRedirectURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceGRPCServer is the server API for AuthServiceGRPC service.
// All implementations must embed UnimplementedAuthServiceGRPCServer
// for forward compatibility
type AuthServiceGRPCServer interface {
	Register(context.Context, *RegisterIn) (*RegisterOut, error)
	AuthorizeEmail(context.Context, *AuthorizeEmailIn) (*AuthorizeOut, error)
	AuthorizeRefresh(context.Context, *AuthorizeRefreshIn) (*AuthorizeOut, error)
	AuthorizePhone(context.Context, *AuthorizePhoneIn) (*AuthorizeOut, error)
	SendPhoneCode(context.Context, *SendPhoneCodeIn) (*SendPhoneCodeOut, error)
	VerifyEmail(context.Context, *VerifyEmailIn) (*VerifyEmailOut, error)
	SocialCallback(context.Context, *SocialCallbackIn) (*AuthorizeOut, error)
	SocialGetRedirectURL(context.Context, *SocialGetRedirectUrlIn) (*SocialGetRedirectUrlOut, error)
	mustEmbedUnimplementedAuthServiceGRPCServer()
}

// UnimplementedAuthServiceGRPCServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServiceGRPCServer struct {
}

func (UnimplementedAuthServiceGRPCServer) Register(context.Context, *RegisterIn) (*RegisterOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAuthServiceGRPCServer) AuthorizeEmail(context.Context, *AuthorizeEmailIn) (*AuthorizeOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorizeEmail not implemented")
}
func (UnimplementedAuthServiceGRPCServer) AuthorizeRefresh(context.Context, *AuthorizeRefreshIn) (*AuthorizeOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorizeRefresh not implemented")
}
func (UnimplementedAuthServiceGRPCServer) AuthorizePhone(context.Context, *AuthorizePhoneIn) (*AuthorizeOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorizePhone not implemented")
}
func (UnimplementedAuthServiceGRPCServer) SendPhoneCode(context.Context, *SendPhoneCodeIn) (*SendPhoneCodeOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPhoneCode not implemented")
}
func (UnimplementedAuthServiceGRPCServer) VerifyEmail(context.Context, *VerifyEmailIn) (*VerifyEmailOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyEmail not implemented")
}
func (UnimplementedAuthServiceGRPCServer) SocialCallback(context.Context, *SocialCallbackIn) (*AuthorizeOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SocialCallback not implemented")
}
func (UnimplementedAuthServiceGRPCServer) SocialGetRedirectURL(context.Context, *SocialGetRedirectUrlIn) (*SocialGetRedirectUrlOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SocialGetRedirectURL not implemented")
}
func (UnimplementedAuthServiceGRPCServer) mustEmbedUnimplementedAuthServiceGRPCServer() {}

// UnsafeAuthServiceGRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceGRPCServer will
// result in compilation errors.
type UnsafeAuthServiceGRPCServer interface {
	mustEmbedUnimplementedAuthServiceGRPCServer()
}

func RegisterAuthServiceGRPCServer(s grpc.ServiceRegistrar, srv AuthServiceGRPCServer) {
	s.RegisterService(&AuthServiceGRPC_ServiceDesc, srv)
}

func _AuthServiceGRPC_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceGRPCServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthServiceGRPC/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceGRPCServer).Register(ctx, req.(*RegisterIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServiceGRPC_AuthorizeEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizeEmailIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceGRPCServer).AuthorizeEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthServiceGRPC/AuthorizeEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceGRPCServer).AuthorizeEmail(ctx, req.(*AuthorizeEmailIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServiceGRPC_AuthorizeRefresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizeRefreshIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceGRPCServer).AuthorizeRefresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthServiceGRPC/AuthorizeRefresh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceGRPCServer).AuthorizeRefresh(ctx, req.(*AuthorizeRefreshIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServiceGRPC_AuthorizePhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizePhoneIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceGRPCServer).AuthorizePhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthServiceGRPC/AuthorizePhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceGRPCServer).AuthorizePhone(ctx, req.(*AuthorizePhoneIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServiceGRPC_SendPhoneCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPhoneCodeIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceGRPCServer).SendPhoneCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthServiceGRPC/SendPhoneCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceGRPCServer).SendPhoneCode(ctx, req.(*SendPhoneCodeIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServiceGRPC_VerifyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyEmailIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceGRPCServer).VerifyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthServiceGRPC/VerifyEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceGRPCServer).VerifyEmail(ctx, req.(*VerifyEmailIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServiceGRPC_SocialCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SocialCallbackIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceGRPCServer).SocialCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthServiceGRPC/SocialCallback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceGRPCServer).SocialCallback(ctx, req.(*SocialCallbackIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServiceGRPC_SocialGetRedirectURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SocialGetRedirectUrlIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceGRPCServer).SocialGetRedirectURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthServiceGRPC/SocialGetRedirectURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceGRPCServer).SocialGetRedirectURL(ctx, req.(*SocialGetRedirectUrlIn))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthServiceGRPC_ServiceDesc is the grpc.ServiceDesc for AuthServiceGRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthServiceGRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.AuthServiceGRPC",
	HandlerType: (*AuthServiceGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _AuthServiceGRPC_Register_Handler,
		},
		{
			MethodName: "AuthorizeEmail",
			Handler:    _AuthServiceGRPC_AuthorizeEmail_Handler,
		},
		{
			MethodName: "AuthorizeRefresh",
			Handler:    _AuthServiceGRPC_AuthorizeRefresh_Handler,
		},
		{
			MethodName: "AuthorizePhone",
			Handler:    _AuthServiceGRPC_AuthorizePhone_Handler,
		},
		{
			MethodName: "SendPhoneCode",
			Handler:    _AuthServiceGRPC_SendPhoneCode_Handler,
		},
		{
			MethodName: "VerifyEmail",
			Handler:    _AuthServiceGRPC_VerifyEmail_Handler,
		},
		{
			MethodName: "SocialCallback",
			Handler:    _AuthServiceGRPC_SocialCallback_Handler,
		},
		{
			MethodName: "SocialGetRedirectURL",
			Handler:    _AuthServiceGRPC_SocialGetRedirectURL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}
