// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package bot

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BotServiceGRPCClient is the client API for BotServiceGRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BotServiceGRPCClient interface {
	Create(ctx context.Context, in *BotCreateIn, opts ...grpc.CallOption) (*BotOut, error)
	Delete(ctx context.Context, in *BotDeleteIn, opts ...grpc.CallOption) (*BOut, error)
	Update(ctx context.Context, in *BotUpdateIn, opts ...grpc.CallOption) (*BOut, error)
	Get(ctx context.Context, in *BotGetIn, opts ...grpc.CallOption) (*BotOut, error)
	Toggle(ctx context.Context, in *BotToggleIn, opts ...grpc.CallOption) (*BOut, error)
	Subscribe(ctx context.Context, in *BotSubscribeIn, opts ...grpc.CallOption) (*BOut, error)
	Unsubscribe(ctx context.Context, in *BotSubscribeIn, opts ...grpc.CallOption) (*BOut, error)
	List(ctx context.Context, in *BotListIn, opts ...grpc.CallOption) (*BotListOut, error)
	WebhookSignal(ctx context.Context, in *WebhookSignalIn, opts ...grpc.CallOption) (*WebhookSignalOut, error)
}

type botServiceGRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewBotServiceGRPCClient(cc grpc.ClientConnInterface) BotServiceGRPCClient {
	return &botServiceGRPCClient{cc}
}

func (c *botServiceGRPCClient) Create(ctx context.Context, in *BotCreateIn, opts ...grpc.CallOption) (*BotOut, error) {
	out := new(BotOut)
	err := c.cc.Invoke(ctx, "/bot.BotServiceGRPC/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServiceGRPCClient) Delete(ctx context.Context, in *BotDeleteIn, opts ...grpc.CallOption) (*BOut, error) {
	out := new(BOut)
	err := c.cc.Invoke(ctx, "/bot.BotServiceGRPC/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServiceGRPCClient) Update(ctx context.Context, in *BotUpdateIn, opts ...grpc.CallOption) (*BOut, error) {
	out := new(BOut)
	err := c.cc.Invoke(ctx, "/bot.BotServiceGRPC/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServiceGRPCClient) Get(ctx context.Context, in *BotGetIn, opts ...grpc.CallOption) (*BotOut, error) {
	out := new(BotOut)
	err := c.cc.Invoke(ctx, "/bot.BotServiceGRPC/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServiceGRPCClient) Toggle(ctx context.Context, in *BotToggleIn, opts ...grpc.CallOption) (*BOut, error) {
	out := new(BOut)
	err := c.cc.Invoke(ctx, "/bot.BotServiceGRPC/Toggle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServiceGRPCClient) Subscribe(ctx context.Context, in *BotSubscribeIn, opts ...grpc.CallOption) (*BOut, error) {
	out := new(BOut)
	err := c.cc.Invoke(ctx, "/bot.BotServiceGRPC/Subscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServiceGRPCClient) Unsubscribe(ctx context.Context, in *BotSubscribeIn, opts ...grpc.CallOption) (*BOut, error) {
	out := new(BOut)
	err := c.cc.Invoke(ctx, "/bot.BotServiceGRPC/Unsubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServiceGRPCClient) List(ctx context.Context, in *BotListIn, opts ...grpc.CallOption) (*BotListOut, error) {
	out := new(BotListOut)
	err := c.cc.Invoke(ctx, "/bot.BotServiceGRPC/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServiceGRPCClient) WebhookSignal(ctx context.Context, in *WebhookSignalIn, opts ...grpc.CallOption) (*WebhookSignalOut, error) {
	out := new(WebhookSignalOut)
	err := c.cc.Invoke(ctx, "/bot.BotServiceGRPC/WebhookSignal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BotServiceGRPCServer is the server API for BotServiceGRPC service.
// All implementations must embed UnimplementedBotServiceGRPCServer
// for forward compatibility
type BotServiceGRPCServer interface {
	Create(context.Context, *BotCreateIn) (*BotOut, error)
	Delete(context.Context, *BotDeleteIn) (*BOut, error)
	Update(context.Context, *BotUpdateIn) (*BOut, error)
	Get(context.Context, *BotGetIn) (*BotOut, error)
	Toggle(context.Context, *BotToggleIn) (*BOut, error)
	Subscribe(context.Context, *BotSubscribeIn) (*BOut, error)
	Unsubscribe(context.Context, *BotSubscribeIn) (*BOut, error)
	List(context.Context, *BotListIn) (*BotListOut, error)
	WebhookSignal(context.Context, *WebhookSignalIn) (*WebhookSignalOut, error)
	mustEmbedUnimplementedBotServiceGRPCServer()
}

// UnimplementedBotServiceGRPCServer must be embedded to have forward compatible implementations.
type UnimplementedBotServiceGRPCServer struct {
}

func (UnimplementedBotServiceGRPCServer) Create(context.Context, *BotCreateIn) (*BotOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedBotServiceGRPCServer) Delete(context.Context, *BotDeleteIn) (*BOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedBotServiceGRPCServer) Update(context.Context, *BotUpdateIn) (*BOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedBotServiceGRPCServer) Get(context.Context, *BotGetIn) (*BotOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedBotServiceGRPCServer) Toggle(context.Context, *BotToggleIn) (*BOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Toggle not implemented")
}
func (UnimplementedBotServiceGRPCServer) Subscribe(context.Context, *BotSubscribeIn) (*BOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedBotServiceGRPCServer) Unsubscribe(context.Context, *BotSubscribeIn) (*BOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unsubscribe not implemented")
}
func (UnimplementedBotServiceGRPCServer) List(context.Context, *BotListIn) (*BotListOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedBotServiceGRPCServer) WebhookSignal(context.Context, *WebhookSignalIn) (*WebhookSignalOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebhookSignal not implemented")
}
func (UnimplementedBotServiceGRPCServer) mustEmbedUnimplementedBotServiceGRPCServer() {}

// UnsafeBotServiceGRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BotServiceGRPCServer will
// result in compilation errors.
type UnsafeBotServiceGRPCServer interface {
	mustEmbedUnimplementedBotServiceGRPCServer()
}

func RegisterBotServiceGRPCServer(s grpc.ServiceRegistrar, srv BotServiceGRPCServer) {
	s.RegisterService(&BotServiceGRPC_ServiceDesc, srv)
}

func _BotServiceGRPC_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotCreateIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceGRPCServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bot.BotServiceGRPC/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceGRPCServer).Create(ctx, req.(*BotCreateIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotServiceGRPC_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotDeleteIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceGRPCServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bot.BotServiceGRPC/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceGRPCServer).Delete(ctx, req.(*BotDeleteIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotServiceGRPC_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotUpdateIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceGRPCServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bot.BotServiceGRPC/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceGRPCServer).Update(ctx, req.(*BotUpdateIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotServiceGRPC_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotGetIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceGRPCServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bot.BotServiceGRPC/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceGRPCServer).Get(ctx, req.(*BotGetIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotServiceGRPC_Toggle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotToggleIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceGRPCServer).Toggle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bot.BotServiceGRPC/Toggle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceGRPCServer).Toggle(ctx, req.(*BotToggleIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotServiceGRPC_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotSubscribeIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceGRPCServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bot.BotServiceGRPC/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceGRPCServer).Subscribe(ctx, req.(*BotSubscribeIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotServiceGRPC_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotSubscribeIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceGRPCServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bot.BotServiceGRPC/Unsubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceGRPCServer).Unsubscribe(ctx, req.(*BotSubscribeIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotServiceGRPC_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotListIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceGRPCServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bot.BotServiceGRPC/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceGRPCServer).List(ctx, req.(*BotListIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotServiceGRPC_WebhookSignal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebhookSignalIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceGRPCServer).WebhookSignal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bot.BotServiceGRPC/WebhookSignal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceGRPCServer).WebhookSignal(ctx, req.(*WebhookSignalIn))
	}
	return interceptor(ctx, in, info, handler)
}

// BotServiceGRPC_ServiceDesc is the grpc.ServiceDesc for BotServiceGRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BotServiceGRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bot.BotServiceGRPC",
	HandlerType: (*BotServiceGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _BotServiceGRPC_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _BotServiceGRPC_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _BotServiceGRPC_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _BotServiceGRPC_Get_Handler,
		},
		{
			MethodName: "Toggle",
			Handler:    _BotServiceGRPC_Toggle_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _BotServiceGRPC_Subscribe_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _BotServiceGRPC_Unsubscribe_Handler,
		},
		{
			MethodName: "List",
			Handler:    _BotServiceGRPC_List_Handler,
		},
		{
			MethodName: "WebhookSignal",
			Handler:    _BotServiceGRPC_WebhookSignal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bot.proto",
}
