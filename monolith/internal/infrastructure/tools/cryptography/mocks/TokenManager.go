// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	cryptography "studentgit.kata.academy/eazzyearn/students/mono/monolith/internal/infrastructure/tools/cryptography"

	time "time"
)

// TokenManager is an autogenerated mocks type for the TokenManager type
type TokenManager struct {
	mock.Mock
}

// CreateToken provides a mocks function with given fields: userID, role, groups, ttl, kind
func (_m *TokenManager) CreateToken(userID string, role string, groups string, ttl time.Duration, kind int) (string, error) {
	ret := _m.Called(userID, role, groups, ttl, kind)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, time.Duration, int) (string, error)); ok {
		return rf(userID, role, groups, ttl, kind)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, time.Duration, int) string); ok {
		r0 = rf(userID, role, groups, ttl, kind)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, string, time.Duration, int) error); ok {
		r1 = rf(userID, role, groups, ttl, kind)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseToken provides a mocks function with given fields: inputToken, kind
func (_m *TokenManager) ParseToken(inputToken string, kind int) (cryptography.UserClaims, error) {
	ret := _m.Called(inputToken, kind)

	var r0 cryptography.UserClaims
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int) (cryptography.UserClaims, error)); ok {
		return rf(inputToken, kind)
	}
	if rf, ok := ret.Get(0).(func(string, int) cryptography.UserClaims); ok {
		r0 = rf(inputToken, kind)
	} else {
		r0 = ret.Get(0).(cryptography.UserClaims)
	}

	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(inputToken, kind)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTokenManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewTokenManager creates a new instance of TokenManager. It also registers a testing interface on the mocks and a cleanup function to assert the mocks expectations.
func NewTokenManager(t mockConstructorTestingTNewTokenManager) *TokenManager {
	mock := &TokenManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
