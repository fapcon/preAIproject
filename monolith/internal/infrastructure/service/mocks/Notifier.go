// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	service "studentgit.kata.academy/eazzyearn/students/mono/monolith/internal/infrastructure/service"
)

// Notifier is an autogenerated mocks type for the Notifier type
type Notifier struct {
	mock.Mock
}

// Push provides a mocks function with given fields: in
func (_m *Notifier) Push(in service.PushIn) service.PushOut {
	ret := _m.Called(in)

	var r0 service.PushOut
	if rf, ok := ret.Get(0).(func(service.PushIn) service.PushOut); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Get(0).(service.PushOut)
	}

	return r0
}

type mockConstructorTestingTNewNotifier interface {
	mock.TestingT
	Cleanup(func())
}

// NewNotifier creates a new instance of Notifier. It also registers a testing interface on the mocks and a cleanup function to assert the mocks expectations.
func NewNotifier(t mockConstructorTestingTNewNotifier) *Notifier {
	mock := &Notifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
