// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "studentgit.kata.academy/eazzyearn/students/mono/monolith/internal/models"
)

// Verifier is an autogenerated mock type for the Verifier type
type Verifier struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, email, hash, userID
func (_m *Verifier) Create(ctx context.Context, email string, hash string, userID int) error {
	ret := _m.Called(ctx, email, hash, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int) error); ok {
		r0 = rf(ctx, email, hash, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByEmail provides a mock function with given fields: ctx, email, hash
func (_m *Verifier) GetByEmail(ctx context.Context, email string, hash string) (models.EmailVerifyDTO, error) {
	ret := _m.Called(ctx, email, hash)

	var r0 models.EmailVerifyDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (models.EmailVerifyDTO, error)); ok {
		return rf(ctx, email, hash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) models.EmailVerifyDTO); ok {
		r0 = rf(ctx, email, hash)
	} else {
		r0 = ret.Get(0).(models.EmailVerifyDTO)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUserID provides a mock function with given fields: ctx, userID
func (_m *Verifier) GetByUserID(ctx context.Context, userID int) (models.EmailVerifyDTO, error) {
	ret := _m.Called(ctx, userID)

	var r0 models.EmailVerifyDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (models.EmailVerifyDTO, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) models.EmailVerifyDTO); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(models.EmailVerifyDTO)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Verify provides a mock function with given fields: ctx, userID
func (_m *Verifier) Verify(ctx context.Context, userID int) error {
	ret := _m.Called(ctx, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerifyEmail provides a mock function with given fields: ctx, email, hash
func (_m *Verifier) VerifyEmail(ctx context.Context, email string, hash string) error {
	ret := _m.Called(ctx, email, hash)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, email, hash)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewVerifier interface {
	mock.TestingT
	Cleanup(func())
}

// NewVerifier creates a new instance of Verifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewVerifier(t mockConstructorTestingTNewVerifier) *Verifier {
	mock := &Verifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
