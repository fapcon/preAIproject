// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	service "studentgit.kata.academy/eazzyearn/students/mono/monolith/internal/modules/auth/service"
)

// Auther is an autogenerated mock type for the Auther type
type Auther struct {
	mock.Mock
}

// AuthorizeEmail provides a mock function with given fields: ctx, in
func (_m *Auther) AuthorizeEmail(ctx context.Context, in service.AuthorizeEmailIn) service.AuthorizeOut {
	ret := _m.Called(ctx, in)

	var r0 service.AuthorizeOut
	if rf, ok := ret.Get(0).(func(context.Context, service.AuthorizeEmailIn) service.AuthorizeOut); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(service.AuthorizeOut)
	}

	return r0
}

// AuthorizePhone provides a mock function with given fields: ctx, in
func (_m *Auther) AuthorizePhone(ctx context.Context, in service.AuthorizePhoneIn) service.AuthorizeOut {
	ret := _m.Called(ctx, in)

	var r0 service.AuthorizeOut
	if rf, ok := ret.Get(0).(func(context.Context, service.AuthorizePhoneIn) service.AuthorizeOut); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(service.AuthorizeOut)
	}

	return r0
}

// AuthorizeRefresh provides a mock function with given fields: ctx, in
func (_m *Auther) AuthorizeRefresh(ctx context.Context, in service.AuthorizeRefreshIn) service.AuthorizeOut {
	ret := _m.Called(ctx, in)

	var r0 service.AuthorizeOut
	if rf, ok := ret.Get(0).(func(context.Context, service.AuthorizeRefreshIn) service.AuthorizeOut); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(service.AuthorizeOut)
	}

	return r0
}

// Register provides a mock function with given fields: ctx, in, field
func (_m *Auther) Register(ctx context.Context, in service.RegisterIn, field int) service.RegisterOut {
	ret := _m.Called(ctx, in, field)

	var r0 service.RegisterOut
	if rf, ok := ret.Get(0).(func(context.Context, service.RegisterIn, int) service.RegisterOut); ok {
		r0 = rf(ctx, in, field)
	} else {
		r0 = ret.Get(0).(service.RegisterOut)
	}

	return r0
}

// SendPhoneCode provides a mock function with given fields: ctx, in
func (_m *Auther) SendPhoneCode(ctx context.Context, in service.SendPhoneCodeIn) service.SendPhoneCodeOut {
	ret := _m.Called(ctx, in)

	var r0 service.SendPhoneCodeOut
	if rf, ok := ret.Get(0).(func(context.Context, service.SendPhoneCodeIn) service.SendPhoneCodeOut); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(service.SendPhoneCodeOut)
	}

	return r0
}

// VerifyEmail provides a mock function with given fields: ctx, in
func (_m *Auther) VerifyEmail(ctx context.Context, in service.VerifyEmailIn) service.VerifyEmailOut {
	ret := _m.Called(ctx, in)

	var r0 service.VerifyEmailOut
	if rf, ok := ret.Get(0).(func(context.Context, service.VerifyEmailIn) service.VerifyEmailOut); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(service.VerifyEmailOut)
	}

	return r0
}

type mockConstructorTestingTNewAuther interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuther creates a new instance of Auther. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuther(t mockConstructorTestingTNewAuther) *Auther {
	mock := &Auther{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
