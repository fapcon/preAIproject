// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "studentgit.kata.academy/eazzyearn/students/mono/monolith/internal/models"
)

// Commenter is an autogenerated mock type for the Commenter type
type Commenter struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, dto
func (_m *Commenter) Create(ctx context.Context, dto models.CommentDTO) error {
	ret := _m.Called(ctx, dto)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.CommentDTO) error); ok {
		r0 = rf(ctx, dto)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, commentID
func (_m *Commenter) Delete(ctx context.Context, commentID int) error {
	ret := _m.Called(ctx, commentID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, commentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, commentID
func (_m *Commenter) GetByID(ctx context.Context, commentID int) (models.CommentDTO, error) {
	ret := _m.Called(ctx, commentID)

	var r0 models.CommentDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (models.CommentDTO, error)); ok {
		return rf(ctx, commentID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) models.CommentDTO); ok {
		r0 = rf(ctx, commentID)
	} else {
		r0 = ret.Get(0).(models.CommentDTO)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, commentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetList provides a mock function with given fields: ctx
func (_m *Commenter) GetList(ctx context.Context) ([]models.CommentDTO, error) {
	ret := _m.Called(ctx)

	var r0 []models.CommentDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.CommentDTO, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.CommentDTO); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.CommentDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, dto
func (_m *Commenter) Update(ctx context.Context, dto models.CommentDTO) error {
	ret := _m.Called(ctx, dto)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.CommentDTO) error); ok {
		r0 = rf(ctx, dto)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewCommenter interface {
	mock.TestingT
	Cleanup(func())
}

// NewCommenter creates a new instance of Commenter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCommenter(t mockConstructorTestingTNewCommenter) *Commenter {
	mock := &Commenter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
