// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	service "studentgit.kata.academy/eazzyearn/students/mono/monolith/internal/modules/comments/service"
)

// CommentService is an autogenerated mock type for the CommentService type
type CommentService struct {
	mock.Mock
}

// CreateComment provides a mock function with given fields: ctx, in
func (_m *CommentService) CreateComment(ctx context.Context, in service.CommentCreateIn) service.CommentCreateOut {
	ret := _m.Called(ctx, in)

	var r0 service.CommentCreateOut
	if rf, ok := ret.Get(0).(func(context.Context, service.CommentCreateIn) service.CommentCreateOut); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(service.CommentCreateOut)
	}

	return r0
}

// DeleteComment provides a mock function with given fields: ctx, in
func (_m *CommentService) DeleteComment(ctx context.Context, in service.CommentDeleteIn) service.CommentDeleteOut {
	ret := _m.Called(ctx, in)

	var r0 service.CommentDeleteOut
	if rf, ok := ret.Get(0).(func(context.Context, service.CommentDeleteIn) service.CommentDeleteOut); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(service.CommentDeleteOut)
	}

	return r0
}

// GetCommentByID provides a mock function with given fields: ctx, in
func (_m *CommentService) GetCommentByID(ctx context.Context, in service.CommentGetByIdIn) service.CommentGetByIdOut {
	ret := _m.Called(ctx, in)

	var r0 service.CommentGetByIdOut
	if rf, ok := ret.Get(0).(func(context.Context, service.CommentGetByIdIn) service.CommentGetByIdOut); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(service.CommentGetByIdOut)
	}

	return r0
}

// GetCommentList provides a mock function with given fields: ctx
func (_m *CommentService) GetCommentList(ctx context.Context) service.CommentGetTapeOut {
	ret := _m.Called(ctx)

	var r0 service.CommentGetTapeOut
	if rf, ok := ret.Get(0).(func(context.Context) service.CommentGetTapeOut); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(service.CommentGetTapeOut)
	}

	return r0
}

// UpdateComment provides a mock function with given fields: ctx, in
func (_m *CommentService) UpdateComment(ctx context.Context, in service.CommentUpdateIn) service.CommentUpdateOut {
	ret := _m.Called(ctx, in)

	var r0 service.CommentUpdateOut
	if rf, ok := ret.Get(0).(func(context.Context, service.CommentUpdateIn) service.CommentUpdateOut); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(service.CommentUpdateOut)
	}

	return r0
}

type mockConstructorTestingTNewCommentService interface {
	mock.TestingT
	Cleanup(func())
}

// NewCommentService creates a new instance of CommentService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCommentService(t mockConstructorTestingTNewCommentService) *CommentService {
	mock := &CommentService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
