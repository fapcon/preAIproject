// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	decimal "github.com/shopspring/decimal"
	mock "github.com/stretchr/testify/mock"

	models "studentgit.kata.academy/eazzyearn/students/mono/monolith/internal/models"

	service "studentgit.kata.academy/eazzyearn/students/mono/monolith/internal/modules/exchange_order/service"

	utils "gitlab.com/golight/orm/utils"
)

// ExchangeOrderer is an autogenerated mock type for the ExchangeOrderer type
type ExchangeOrderer struct {
	mock.Mock
}

// AddOrdersStatistic provides a mock function with given fields: ctx, orders
func (_m *ExchangeOrderer) AddOrdersStatistic(ctx context.Context, orders *[]models.ExchangeOrder) service.StatisticOut {
	ret := _m.Called(ctx, orders)

	var r0 service.StatisticOut
	if rf, ok := ret.Get(0).(func(context.Context, *[]models.ExchangeOrder) service.StatisticOut); ok {
		r0 = rf(ctx, orders)
	} else {
		r0 = ret.Get(0).(service.StatisticOut)
	}

	return r0
}

// CancelOrder provides a mock function with given fields: ctx, in
func (_m *ExchangeOrderer) CancelOrder(ctx context.Context, in service.OrderIn) (service.CancelOrderOut, error) {
	ret := _m.Called(ctx, in)

	var r0 service.CancelOrderOut
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, service.OrderIn) (service.CancelOrderOut, error)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, service.OrderIn) service.CancelOrderOut); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(service.CancelOrderOut)
	}

	if rf, ok := ret.Get(1).(func(context.Context, service.OrderIn) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExchangeOrderList provides a mock function with given fields: ctx, in
func (_m *ExchangeOrderer) ExchangeOrderList(ctx context.Context, in service.GetBotRelationIn) service.GetOrdersOut {
	ret := _m.Called(ctx, in)

	var r0 service.GetOrdersOut
	if rf, ok := ret.Get(0).(func(context.Context, service.GetBotRelationIn) service.GetOrdersOut); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(service.GetOrdersOut)
	}

	return r0
}

// GetAllOrdersStatistic provides a mock function with given fields: ctx, in
func (_m *ExchangeOrderer) GetAllOrdersStatistic(ctx context.Context, in service.GetUserRelationIn) service.StatisticOut {
	ret := _m.Called(ctx, in)

	var r0 service.StatisticOut
	if rf, ok := ret.Get(0).(func(context.Context, service.GetUserRelationIn) service.StatisticOut); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(service.StatisticOut)
	}

	return r0
}

// GetBotOrders provides a mock function with given fields: ctx, in
func (_m *ExchangeOrderer) GetBotOrders(ctx context.Context, in service.GetBotRelationIn) service.GetOrdersOut {
	ret := _m.Called(ctx, in)

	var r0 service.GetOrdersOut
	if rf, ok := ret.Get(0).(func(context.Context, service.GetBotRelationIn) service.GetOrdersOut); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(service.GetOrdersOut)
	}

	return r0
}

// GetOrderList provides a mock function with given fields: ctx, condition
func (_m *ExchangeOrderer) GetOrderList(ctx context.Context, condition utils.Condition) ([]models.ExchangeOrderDTO, error) {
	ret := _m.Called(ctx, condition)

	var r0 []models.ExchangeOrderDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, utils.Condition) ([]models.ExchangeOrderDTO, error)); ok {
		return rf(ctx, condition)
	}
	if rf, ok := ret.Get(0).(func(context.Context, utils.Condition) []models.ExchangeOrderDTO); ok {
		r0 = rf(ctx, condition)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ExchangeOrderDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, utils.Condition) error); ok {
		r1 = rf(ctx, condition)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrdersCondition provides a mock function with given fields: ctx, condition
func (_m *ExchangeOrderer) GetOrdersCondition(ctx context.Context, condition utils.Condition) ([]models.ExchangeOrder, error) {
	ret := _m.Called(ctx, condition)

	var r0 []models.ExchangeOrder
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, utils.Condition) ([]models.ExchangeOrder, error)); ok {
		return rf(ctx, condition)
	}
	if rf, ok := ret.Get(0).(func(context.Context, utils.Condition) []models.ExchangeOrder); ok {
		r0 = rf(ctx, condition)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ExchangeOrder)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, utils.Condition) error); ok {
		r1 = rf(ctx, condition)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrdersStatistic provides a mock function with given fields: ctx, in
func (_m *ExchangeOrderer) GetOrdersStatistic(ctx context.Context, in service.GetBotRelationIn) service.StatisticOut {
	ret := _m.Called(ctx, in)

	var r0 service.StatisticOut
	if rf, ok := ret.Get(0).(func(context.Context, service.GetBotRelationIn) service.StatisticOut); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(service.StatisticOut)
	}

	return r0
}

// GetUserOrders provides a mock function with given fields: ctx, in
func (_m *ExchangeOrderer) GetUserOrders(ctx context.Context, in service.GetUserRelationIn) service.GetOrdersOut {
	ret := _m.Called(ctx, in)

	var r0 service.GetOrdersOut
	if rf, ok := ret.Get(0).(func(context.Context, service.GetUserRelationIn) service.GetOrdersOut); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(service.GetOrdersOut)
	}

	return r0
}

// OrderSellLimit provides a mock function with given fields: ctx, in, quantity, price, unitedOrders
func (_m *ExchangeOrderer) OrderSellLimit(ctx context.Context, in service.OrderIn, quantity decimal.Decimal, price decimal.Decimal, unitedOrders int) {
	_m.Called(ctx, in, quantity, price, unitedOrders)
}

// PutOrder provides a mock function with given fields: ctx, in
func (_m *ExchangeOrderer) PutOrder(ctx context.Context, in service.OrderIn) service.PutOrderOut {
	ret := _m.Called(ctx, in)

	var r0 service.PutOrderOut
	if rf, ok := ret.Get(0).(func(context.Context, service.OrderIn) service.PutOrderOut); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(service.PutOrderOut)
	}

	return r0
}

// UpdateOrder provides a mock function with given fields: ctx, dto
func (_m *ExchangeOrderer) UpdateOrder(ctx context.Context, dto models.ExchangeOrderDTO) error {
	ret := _m.Called(ctx, dto)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.ExchangeOrderDTO) error); ok {
		r0 = rf(ctx, dto)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WriteOrder provides a mock function with given fields: ctx, in
func (_m *ExchangeOrderer) WriteOrder(ctx context.Context, in service.WriteOrderIn) error {
	ret := _m.Called(ctx, in)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, service.WriteOrderIn) error); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WriteOrderLog provides a mock function with given fields: ctx, orderLogDTO
func (_m *ExchangeOrderer) WriteOrderLog(ctx context.Context, orderLogDTO models.ExchangeOrderLogDTO) {
	_m.Called(ctx, orderLogDTO)
}

type mockConstructorTestingTNewExchangeOrderer interface {
	mock.TestingT
	Cleanup(func())
}

// NewExchangeOrderer creates a new instance of ExchangeOrderer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewExchangeOrderer(t mockConstructorTestingTNewExchangeOrderer) *ExchangeOrderer {
	mock := &ExchangeOrderer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
