// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "studentgit.kata.academy/eazzyearn/students/mono/monolith/internal/models"

	utils "gitlab.com/golight/orm/utils"
)

// ExchangeOrderer is an autogenerated mock type for the ExchangeOrderer type
type ExchangeOrderer struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, dto
func (_m *ExchangeOrderer) Create(ctx context.Context, dto models.ExchangeOrderDTO) error {
	ret := _m.Called(ctx, dto)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.ExchangeOrderDTO) error); ok {
		r0 = rf(ctx, dto)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, exchangeOrderUUID
func (_m *ExchangeOrderer) Delete(ctx context.Context, exchangeOrderUUID string) error {
	ret := _m.Called(ctx, exchangeOrderUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, exchangeOrderUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByBotUUID provides a mock function with given fields: ctx, condition
func (_m *ExchangeOrderer) GetByBotUUID(ctx context.Context, condition utils.Condition) ([]models.ExchangeOrderDTO, error) {
	ret := _m.Called(ctx, condition)

	var r0 []models.ExchangeOrderDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, utils.Condition) ([]models.ExchangeOrderDTO, error)); ok {
		return rf(ctx, condition)
	}
	if rf, ok := ret.Get(0).(func(context.Context, utils.Condition) []models.ExchangeOrderDTO); ok {
		r0 = rf(ctx, condition)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ExchangeOrderDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, utils.Condition) error); ok {
		r1 = rf(ctx, condition)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUUID provides a mock function with given fields: ctx, exchangeOrderUUID
func (_m *ExchangeOrderer) GetByUUID(ctx context.Context, exchangeOrderUUID string) (models.ExchangeOrderDTO, error) {
	ret := _m.Called(ctx, exchangeOrderUUID)

	var r0 models.ExchangeOrderDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.ExchangeOrderDTO, error)); ok {
		return rf(ctx, exchangeOrderUUID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.ExchangeOrderDTO); ok {
		r0 = rf(ctx, exchangeOrderUUID)
	} else {
		r0 = ret.Get(0).(models.ExchangeOrderDTO)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, exchangeOrderUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetList provides a mock function with given fields: ctx, condition
func (_m *ExchangeOrderer) GetList(ctx context.Context, condition utils.Condition) ([]models.ExchangeOrderDTO, error) {
	ret := _m.Called(ctx, condition)

	var r0 []models.ExchangeOrderDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, utils.Condition) ([]models.ExchangeOrderDTO, error)); ok {
		return rf(ctx, condition)
	}
	if rf, ok := ret.Get(0).(func(context.Context, utils.Condition) []models.ExchangeOrderDTO); ok {
		r0 = rf(ctx, condition)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ExchangeOrderDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, utils.Condition) error); ok {
		r1 = rf(ctx, condition)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, dto
func (_m *ExchangeOrderer) Update(ctx context.Context, dto models.ExchangeOrderDTO) error {
	ret := _m.Called(ctx, dto)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.ExchangeOrderDTO) error); ok {
		r0 = rf(ctx, dto)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewExchangeOrderer interface {
	mock.TestingT
	Cleanup(func())
}

// NewExchangeOrderer creates a new instance of ExchangeOrderer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewExchangeOrderer(t mockConstructorTestingTNewExchangeOrderer) *ExchangeOrderer {
	mock := &ExchangeOrderer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
