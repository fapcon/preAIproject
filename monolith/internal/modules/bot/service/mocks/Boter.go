// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	service "studentgit.kata.academy/eazzyearn/students/mono/monolith/internal/modules/bot/service"
)

// Boter is an autogenerated mocks type for the Boter type
type Boter struct {
	mock.Mock
}

// Create provides a mocks function with given fields: ctx, in
func (_m *Boter) Create(ctx context.Context, in service.BotCreateIn) service.BotOut {
	ret := _m.Called(ctx, in)

	var r0 service.BotOut
	if rf, ok := ret.Get(0).(func(context.Context, service.BotCreateIn) service.BotOut); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(service.BotOut)
	}

	return r0
}

// Delete provides a mocks function with given fields: ctx, in
func (_m *Boter) Delete(ctx context.Context, in service.BotDeleteIn) service.BOut {
	ret := _m.Called(ctx, in)

	var r0 service.BOut
	if rf, ok := ret.Get(0).(func(context.Context, service.BotDeleteIn) service.BOut); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(service.BOut)
	}

	return r0
}

// Get provides a mocks function with given fields: ctx, in
func (_m *Boter) Get(ctx context.Context, in service.BotGetIn) service.BotOut {
	ret := _m.Called(ctx, in)

	var r0 service.BotOut
	if rf, ok := ret.Get(0).(func(context.Context, service.BotGetIn) service.BotOut); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(service.BotOut)
	}

	return r0
}

// List provides a mocks function with given fields: ctx, in
func (_m *Boter) List(ctx context.Context, in service.BotListIn) service.BotListOut {
	ret := _m.Called(ctx, in)

	var r0 service.BotListOut
	if rf, ok := ret.Get(0).(func(context.Context, service.BotListIn) service.BotListOut); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(service.BotListOut)
	}

	return r0
}

// Subscribe provides a mocks function with given fields: ctx, in
func (_m *Boter) Subscribe(ctx context.Context, in service.BotSubscribeIn) service.BOut {
	ret := _m.Called(ctx, in)

	var r0 service.BOut
	if rf, ok := ret.Get(0).(func(context.Context, service.BotSubscribeIn) service.BOut); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(service.BOut)
	}

	return r0
}

// Toggle provides a mocks function with given fields: ctx, in
func (_m *Boter) Toggle(ctx context.Context, in service.BotToggleIn) service.BOut {
	ret := _m.Called(ctx, in)

	var r0 service.BOut
	if rf, ok := ret.Get(0).(func(context.Context, service.BotToggleIn) service.BOut); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(service.BOut)
	}

	return r0
}

// Unsubscribe provides a mocks function with given fields: ctx, in
func (_m *Boter) Unsubscribe(ctx context.Context, in service.BotSubscribeIn) service.BOut {
	ret := _m.Called(ctx, in)

	var r0 service.BOut
	if rf, ok := ret.Get(0).(func(context.Context, service.BotSubscribeIn) service.BOut); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(service.BOut)
	}

	return r0
}

// Update provides a mocks function with given fields: ctx, in
func (_m *Boter) Update(ctx context.Context, in service.BotUpdateIn) service.BOut {
	ret := _m.Called(ctx, in)

	var r0 service.BOut
	if rf, ok := ret.Get(0).(func(context.Context, service.BotUpdateIn) service.BOut); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(service.BOut)
	}

	return r0
}

// WebhookSignal provides a mocks function with given fields: ctx, in
func (_m *Boter) WebhookSignal(ctx context.Context, in service.WebhookSignalIn) service.WebhookSignalOut {
	ret := _m.Called(ctx, in)

	var r0 service.WebhookSignalOut
	if rf, ok := ret.Get(0).(func(context.Context, service.WebhookSignalIn) service.WebhookSignalOut); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(service.WebhookSignalOut)
	}

	return r0
}

type mockConstructorTestingTNewBoter interface {
	mock.TestingT
	Cleanup(func())
}

// NewBoter creates a new instance of Boter. It also registers a testing interface on the mocks and a cleanup function to assert the mocks expectations.
func NewBoter(t mockConstructorTestingTNewBoter) *Boter {
	mock := &Boter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
