// Code generated by MockGen. DO NOT EDIT.
// Source: user_interface.go

package mock_storage

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	models "studentgit.kata.academy/eazzyearn/students/mono/monolith/internal/models"
)

// MockUserer is a mock of Userer interface
type MockUserer struct {
	ctrl     *gomock.Controller
	recorder *MockUsererMockRecorder
}

// MockUsererMockRecorder is the mock recorder for MockUserer
type MockUsererMockRecorder struct {
	mock *MockUserer
}

// NewMockUserer creates a new mock instance
func NewMockUserer(ctrl *gomock.Controller) *MockUserer {
	mock := &MockUserer{ctrl: ctrl}
	mock.recorder = &MockUsererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockUserer) EXPECT() *MockUsererMockRecorder {
	return _m.recorder
}

// Create mocks base method
func (_m *MockUserer) Create(ctx context.Context, u models.UserDTO) (int, error) {
	ret := _m.ctrl.Call(_m, "Create", ctx, u)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (_mr *MockUsererMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Create", reflect.TypeOf((*MockUserer)(nil).Create), arg0, arg1)
}

// Update mocks base method
func (_m *MockUserer) Update(ctx context.Context, u models.UserDTO) error {
	ret := _m.ctrl.Call(_m, "Update", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (_mr *MockUsererMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Update", reflect.TypeOf((*MockUserer)(nil).Update), arg0, arg1)
}

// GetByID mocks base method
func (_m *MockUserer) GetByID(ctx context.Context, userID int) (models.UserDTO, error) {
	ret := _m.ctrl.Call(_m, "GetByID", ctx, userID)
	ret0, _ := ret[0].(models.UserDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (_mr *MockUsererMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetByID", reflect.TypeOf((*MockUserer)(nil).GetByID), arg0, arg1)
}

// GetByIDs mocks base method
func (_m *MockUserer) GetByIDs(ctx context.Context) ([]models.UserDTO, error) {
	ret := _m.ctrl.Call(_m, "GetByIDs", ctx)
	ret0, _ := ret[0].([]models.UserDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDs indicates an expected call of GetByIDs
func (_mr *MockUsererMockRecorder) GetByIDs(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetByIDs", reflect.TypeOf((*MockUserer)(nil).GetByIDs), arg0)
}

// GetByEmail mocks base method
func (_m *MockUserer) GetByEmail(ctx context.Context, email string) (models.UserDTO, error) {
	ret := _m.ctrl.Call(_m, "GetByEmail", ctx, email)
	ret0, _ := ret[0].(models.UserDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail
func (_mr *MockUsererMockRecorder) GetByEmail(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetByEmail", reflect.TypeOf((*MockUserer)(nil).GetByEmail), arg0, arg1)
}

// GetByFilter mocks base method
func (_m *MockUserer) GetByFilter(ctx context.Context) ([]models.UserDTO, error) {
	ret := _m.ctrl.Call(_m, "GetByFilter", ctx)
	ret0, _ := ret[0].([]models.UserDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByFilter indicates an expected call of GetByFilter
func (_mr *MockUsererMockRecorder) GetByFilter(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetByFilter", reflect.TypeOf((*MockUserer)(nil).GetByFilter), arg0)
}
