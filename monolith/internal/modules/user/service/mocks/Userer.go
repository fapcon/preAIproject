// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	service "studentgit.kata.academy/eazzyearn/students/mono/monolith/internal/modules/user/service"
)

// Userer is an autogenerated mock type for the Userer type
type Userer struct {
	mock.Mock
}

// ChangePassword provides a mock function with given fields: ctx, in
func (_m *Userer) ChangePassword(ctx context.Context, in service.ChangePasswordIn) service.ChangePasswordOut {
	ret := _m.Called(ctx, in)

	var r0 service.ChangePasswordOut
	if rf, ok := ret.Get(0).(func(context.Context, service.ChangePasswordIn) service.ChangePasswordOut); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(service.ChangePasswordOut)
	}

	return r0
}

// Create provides a mock function with given fields: ctx, in
func (_m *Userer) Create(ctx context.Context, in service.UserCreateIn) service.UserCreateOut {
	ret := _m.Called(ctx, in)

	var r0 service.UserCreateOut
	if rf, ok := ret.Get(0).(func(context.Context, service.UserCreateIn) service.UserCreateOut); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(service.UserCreateOut)
	}

	return r0
}

// GetByEmail provides a mock function with given fields: ctx, in
func (_m *Userer) GetByEmail(ctx context.Context, in service.GetByEmailIn) service.UserOut {
	ret := _m.Called(ctx, in)

	var r0 service.UserOut
	if rf, ok := ret.Get(0).(func(context.Context, service.GetByEmailIn) service.UserOut); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(service.UserOut)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, in
func (_m *Userer) GetByID(ctx context.Context, in service.GetByIDIn) service.UserOut {
	ret := _m.Called(ctx, in)

	var r0 service.UserOut
	if rf, ok := ret.Get(0).(func(context.Context, service.GetByIDIn) service.UserOut); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(service.UserOut)
	}

	return r0
}

// GetByIDs provides a mock function with given fields: ctx, in
func (_m *Userer) GetByIDs(ctx context.Context, in service.GetByIDsIn) service.UsersOut {
	ret := _m.Called(ctx, in)

	var r0 service.UsersOut
	if rf, ok := ret.Get(0).(func(context.Context, service.GetByIDsIn) service.UsersOut); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(service.UsersOut)
	}

	return r0
}

// GetByPhone provides a mock function with given fields: ctx, in
func (_m *Userer) GetByPhone(ctx context.Context, in service.GetByPhoneIn) service.UserOut {
	ret := _m.Called(ctx, in)

	var r0 service.UserOut
	if rf, ok := ret.Get(0).(func(context.Context, service.GetByPhoneIn) service.UserOut); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(service.UserOut)
	}

	return r0
}

// ResetPassword provides a mock function with given fields: ctx, in
func (_m *Userer) ResetPassword(ctx context.Context, in service.ResetPasswordIn) service.ResetPasswordOut {
	ret := _m.Called(ctx, in)

	var r0 service.ResetPasswordOut
	if rf, ok := ret.Get(0).(func(context.Context, service.ResetPasswordIn) service.ResetPasswordOut); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(service.ResetPasswordOut)
	}

	return r0
}

// SendResetCodeEmail provides a mock function with given fields: ctx, in
func (_m *Userer) SendResetCodeEmail(ctx context.Context, in service.SendResetCodeEmailIn) service.SendResetCodeEmailOut {
	ret := _m.Called(ctx, in)

	var r0 service.SendResetCodeEmailOut
	if rf, ok := ret.Get(0).(func(context.Context, service.SendResetCodeEmailIn) service.SendResetCodeEmailOut); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(service.SendResetCodeEmailOut)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, in
func (_m *Userer) Update(ctx context.Context, in service.UserUpdateIn) service.UserUpdateOut {
	ret := _m.Called(ctx, in)

	var r0 service.UserUpdateOut
	if rf, ok := ret.Get(0).(func(context.Context, service.UserUpdateIn) service.UserUpdateOut); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(service.UserUpdateOut)
	}

	return r0
}

// VerifyEmail provides a mock function with given fields: ctx, in
func (_m *Userer) VerifyEmail(ctx context.Context, in service.UserVerifyEmailIn) service.UserUpdateOut {
	ret := _m.Called(ctx, in)

	var r0 service.UserUpdateOut
	if rf, ok := ret.Get(0).(func(context.Context, service.UserVerifyEmailIn) service.UserUpdateOut); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(service.UserUpdateOut)
	}

	return r0
}

type mockConstructorTestingTNewUserer interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserer creates a new instance of Userer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserer(t mockConstructorTestingTNewUserer) *Userer {
	mock := &Userer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
