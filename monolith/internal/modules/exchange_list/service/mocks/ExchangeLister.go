// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	service "studentgit.kata.academy/eazzyearn/students/mono/monolith/internal/modules/exchange_list/service"
)

// ExchangeLister is an autogenerated mock type for the ExchangeLister type
type ExchangeLister struct {
	mock.Mock
}

// ExchangeListAdd provides a mock function with given fields: ctx, in
func (_m *ExchangeLister) ExchangeListAdd(ctx context.Context, in service.ExchangeAddIn) service.ExchangeOut {
	ret := _m.Called(ctx, in)

	var r0 service.ExchangeOut
	if rf, ok := ret.Get(0).(func(context.Context, service.ExchangeAddIn) service.ExchangeOut); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(service.ExchangeOut)
	}

	return r0
}

// ExchangeListDelete provides a mock function with given fields: ctx, exchangeListID
func (_m *ExchangeLister) ExchangeListDelete(ctx context.Context, exchangeListID int) error {
	ret := _m.Called(ctx, exchangeListID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, exchangeListID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExchangeListList provides a mock function with given fields: ctx
func (_m *ExchangeLister) ExchangeListList(ctx context.Context) service.ExchangeListOut {
	ret := _m.Called(ctx)

	var r0 service.ExchangeListOut
	if rf, ok := ret.Get(0).(func(context.Context) service.ExchangeListOut); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(service.ExchangeListOut)
	}

	return r0
}

type mockConstructorTestingTNewExchangeLister interface {
	mock.TestingT
	Cleanup(func())
}

// NewExchangeLister creates a new instance of ExchangeLister. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewExchangeLister(t mockConstructorTestingTNewExchangeLister) *ExchangeLister {
	mock := &ExchangeLister{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
