// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "studentgit.kata.academy/eazzyearn/students/mono/monolith/internal/models"

	service "studentgit.kata.academy/eazzyearn/students/mono/monolith/internal/modules/exchange_ticker/service"

	utils "gitlab.com/golight/orm/utils"
)

// ExchangeTicker is an autogenerated mock type for the ExchangeTicker type
type ExchangeTicker struct {
	mock.Mock
}

// GetByID provides a mock function with given fields: ctx, tickerID
func (_m *ExchangeTicker) GetByID(ctx context.Context, tickerID int) (models.ExchangeTicker, error) {
	ret := _m.Called(ctx, tickerID)

	var r0 models.ExchangeTicker
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (models.ExchangeTicker, error)); ok {
		return rf(ctx, tickerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) models.ExchangeTicker); ok {
		r0 = rf(ctx, tickerID)
	} else {
		r0 = ret.Get(0).(models.ExchangeTicker)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, tickerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetList provides a mock function with given fields: ctx, condition
func (_m *ExchangeTicker) GetList(ctx context.Context, condition utils.Condition) ([]models.ExchangeTicker, error) {
	ret := _m.Called(ctx, condition)

	var r0 []models.ExchangeTicker
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, utils.Condition) ([]models.ExchangeTicker, error)); ok {
		return rf(ctx, condition)
	}
	if rf, ok := ret.Get(0).(func(context.Context, utils.Condition) []models.ExchangeTicker); ok {
		r0 = rf(ctx, condition)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ExchangeTicker)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, utils.Condition) error); ok {
		r1 = rf(ctx, condition)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTicker provides a mock function with given fields: ctx
func (_m *ExchangeTicker) GetTicker(ctx context.Context) service.GetTickerOut {
	ret := _m.Called(ctx)

	var r0 service.GetTickerOut
	if rf, ok := ret.Get(0).(func(context.Context) service.GetTickerOut); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(service.GetTickerOut)
	}

	return r0
}

// Save provides a mock function with given fields: ctx, tickers
func (_m *ExchangeTicker) Save(ctx context.Context, tickers []models.ExchangeTicker) error {
	ret := _m.Called(ctx, tickers)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []models.ExchangeTicker) error); ok {
		r0 = rf(ctx, tickers)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewExchangeTicker interface {
	mock.TestingT
	Cleanup(func())
}

// NewExchangeTicker creates a new instance of ExchangeTicker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewExchangeTicker(t mockConstructorTestingTNewExchangeTicker) *ExchangeTicker {
	mock := &ExchangeTicker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
