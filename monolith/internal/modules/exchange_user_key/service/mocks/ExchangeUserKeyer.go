// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "studentgit.kata.academy/eazzyearn/students/mono/monolith/internal/models"

	service "studentgit.kata.academy/eazzyearn/students/mono/monolith/internal/modules/exchange_user_key/service"
)

// ExchangeUserKeyer is an autogenerated mock type for the ExchangeUserKeyer type
type ExchangeUserKeyer struct {
	mock.Mock
}

// CheckKeys provides a mock function with given fields: ctx, in
func (_m *ExchangeUserKeyer) CheckKeys(ctx context.Context, in service.ExchangeUserKeyAddIn) error {
	ret := _m.Called(ctx, in)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, service.ExchangeUserKeyAddIn) error); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExchangeUserKeyAdd provides a mock function with given fields: ctx, in
func (_m *ExchangeUserKeyer) ExchangeUserKeyAdd(ctx context.Context, in service.ExchangeUserKeyAddIn) service.ExchangeOut {
	ret := _m.Called(ctx, in)

	var r0 service.ExchangeOut
	if rf, ok := ret.Get(0).(func(context.Context, service.ExchangeUserKeyAddIn) service.ExchangeOut); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(service.ExchangeOut)
	}

	return r0
}

// ExchangeUserKeyDelete provides a mock function with given fields: ctx, exchangeUserKeyID, userID
func (_m *ExchangeUserKeyer) ExchangeUserKeyDelete(ctx context.Context, exchangeUserKeyID int, userID int) error {
	ret := _m.Called(ctx, exchangeUserKeyID, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) error); ok {
		r0 = rf(ctx, exchangeUserKeyID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExchangeUserKeyGetByID provides a mock function with given fields: ctx, exchangeUserKeyID
func (_m *ExchangeUserKeyer) ExchangeUserKeyGetByID(ctx context.Context, exchangeUserKeyID int) (models.ExchangeUserKeyDTO, error) {
	ret := _m.Called(ctx, exchangeUserKeyID)

	var r0 models.ExchangeUserKeyDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (models.ExchangeUserKeyDTO, error)); ok {
		return rf(ctx, exchangeUserKeyID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) models.ExchangeUserKeyDTO); ok {
		r0 = rf(ctx, exchangeUserKeyID)
	} else {
		r0 = ret.Get(0).(models.ExchangeUserKeyDTO)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, exchangeUserKeyID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExchangeUserKeyGetByUserID provides a mock function with given fields: ctx, userID
func (_m *ExchangeUserKeyer) ExchangeUserKeyGetByUserID(ctx context.Context, userID int) ([]models.ExchangeUserKeyDTO, error) {
	ret := _m.Called(ctx, userID)

	var r0 []models.ExchangeUserKeyDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]models.ExchangeUserKeyDTO, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []models.ExchangeUserKeyDTO); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ExchangeUserKeyDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExchangeUserKeyList provides a mock function with given fields: ctx, in
func (_m *ExchangeUserKeyer) ExchangeUserKeyList(ctx context.Context, in service.ExchangeUserListIn) service.ExchangeUserListOut {
	ret := _m.Called(ctx, in)

	var r0 service.ExchangeUserListOut
	if rf, ok := ret.Get(0).(func(context.Context, service.ExchangeUserListIn) service.ExchangeUserListOut); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(service.ExchangeUserListOut)
	}

	return r0
}

// ExchangeUserKeyListByIDs provides a mock function with given fields: ctx, exchangeID, userID
func (_m *ExchangeUserKeyer) ExchangeUserKeyListByIDs(ctx context.Context, exchangeID int, userID int) ([]models.ExchangeUserKeyDTO, error) {
	ret := _m.Called(ctx, exchangeID, userID)

	var r0 []models.ExchangeUserKeyDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]models.ExchangeUserKeyDTO, error)); ok {
		return rf(ctx, exchangeID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []models.ExchangeUserKeyDTO); ok {
		r0 = rf(ctx, exchangeID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ExchangeUserKeyDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, exchangeID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewExchangeUserKeyer interface {
	mock.TestingT
	Cleanup(func())
}

// NewExchangeUserKeyer creates a new instance of ExchangeUserKeyer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewExchangeUserKeyer(t mockConstructorTestingTNewExchangeUserKeyer) *ExchangeUserKeyer {
	mock := &ExchangeUserKeyer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
