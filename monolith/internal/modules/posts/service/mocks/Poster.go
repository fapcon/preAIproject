// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	service "studentgit.kata.academy/eazzyearn/students/mono/monolith/internal/modules/posts/service"
)

// Poster is an autogenerated mock type for the Poster type
type Poster struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, in
func (_m *Poster) Create(ctx context.Context, in service.PostCreateIn) service.PostCreateOut {
	ret := _m.Called(ctx, in)

	var r0 service.PostCreateOut
	if rf, ok := ret.Get(0).(func(context.Context, service.PostCreateIn) service.PostCreateOut); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(service.PostCreateOut)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, in
func (_m *Poster) Delete(ctx context.Context, in service.PostDeleteIn) service.PostDeleteOut {
	ret := _m.Called(ctx, in)

	var r0 service.PostDeleteOut
	if rf, ok := ret.Get(0).(func(context.Context, service.PostDeleteIn) service.PostDeleteOut); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(service.PostDeleteOut)
	}

	return r0
}

// GetById provides a mock function with given fields: ctx, in
func (_m *Poster) GetById(ctx context.Context, in service.PostGetByIdIn) service.PostGetByIdOut {
	ret := _m.Called(ctx, in)

	var r0 service.PostGetByIdOut
	if rf, ok := ret.Get(0).(func(context.Context, service.PostGetByIdIn) service.PostGetByIdOut); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(service.PostGetByIdOut)
	}

	return r0
}

// GetListTape provides a mock function with given fields: ctx, in
func (_m *Poster) GetListTape(ctx context.Context, in service.PostGetTapeIn) service.PostGetTapeOut {
	ret := _m.Called(ctx, in)

	var r0 service.PostGetTapeOut
	if rf, ok := ret.Get(0).(func(context.Context, service.PostGetTapeIn) service.PostGetTapeOut); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(service.PostGetTapeOut)
	}

	return r0
}

// UpdatePost provides a mock function with given fields: ctx, in
func (_m *Poster) UpdatePost(ctx context.Context, in service.PostUpdateIn) service.PostUpdateOut {
	ret := _m.Called(ctx, in)

	var r0 service.PostUpdateOut
	if rf, ok := ret.Get(0).(func(context.Context, service.PostUpdateIn) service.PostUpdateOut); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(service.PostUpdateOut)
	}

	return r0
}

type mockConstructorTestingTNewPoster interface {
	mock.TestingT
	Cleanup(func())
}

// NewPoster creates a new instance of Poster. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPoster(t mockConstructorTestingTNewPoster) *Poster {
	mock := &Poster{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
