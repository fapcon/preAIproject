// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "studentgit.kata.academy/eazzyearn/students/mono/monolith/internal/models"
)

// Poster is an autogenerated mock type for the Poster type
type Poster struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, dto
func (_m *Poster) Create(ctx context.Context, dto models.PostDTO) error {
	ret := _m.Called(ctx, dto)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.PostDTO) error); ok {
		r0 = rf(ctx, dto)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetById provides a mock function with given fields: ctx, id
func (_m *Poster) GetById(ctx context.Context, id int) (models.PostDTO, error) {
	ret := _m.Called(ctx, id)

	var r0 models.PostDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (models.PostDTO, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) models.PostDTO); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.PostDTO)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetList provides a mock function with given fields: ctx
func (_m *Poster) GetList(ctx context.Context) ([]models.PostDTO, error) {
	ret := _m.Called(ctx)

	var r0 []models.PostDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.PostDTO, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.PostDTO); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.PostDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, dto
func (_m *Poster) Update(ctx context.Context, dto models.PostDTO) error {
	ret := _m.Called(ctx, dto)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.PostDTO) error); ok {
		r0 = rf(ctx, dto)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewPoster interface {
	mock.TestingT
	Cleanup(func())
}

// NewPoster creates a new instance of Poster. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPoster(t mockConstructorTestingTNewPoster) *Poster {
	mock := &Poster{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
