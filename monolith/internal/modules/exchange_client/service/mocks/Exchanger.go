// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	service "studentgit.kata.academy/eazzyearn/students/mono/monolith/internal/modules/exchange_client/service"
)

// Exchanger is an autogenerated mock type for the Exchanger type
type Exchanger struct {
	mock.Mock
}

// BuyLimit provides a mock function with given fields: in
func (_m *Exchanger) BuyLimit(in service.LimitIn) service.OrderOut {
	ret := _m.Called(in)

	var r0 service.OrderOut
	if rf, ok := ret.Get(0).(func(service.LimitIn) service.OrderOut); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Get(0).(service.OrderOut)
	}

	return r0
}

// BuyMarket provides a mock function with given fields: in
func (_m *Exchanger) BuyMarket(in service.MarketIn) service.OrderOut {
	ret := _m.Called(in)

	var r0 service.OrderOut
	if rf, ok := ret.Get(0).(func(service.MarketIn) service.OrderOut); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Get(0).(service.OrderOut)
	}

	return r0
}

// CancelOrder provides a mock function with given fields: ctx, in
func (_m *Exchanger) CancelOrder(ctx context.Context, in service.CancelOrderIn) service.OrderOut {
	ret := _m.Called(ctx, in)

	var r0 service.OrderOut
	if rf, ok := ret.Get(0).(func(context.Context, service.CancelOrderIn) service.OrderOut); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(service.OrderOut)
	}

	return r0
}

// CreateOrder provides a mock function with given fields: in
func (_m *Exchanger) CreateOrder(in service.CreateOrderIn) service.OrderOut {
	ret := _m.Called(in)

	var r0 service.OrderOut
	if rf, ok := ret.Get(0).(func(service.CreateOrderIn) service.OrderOut); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Get(0).(service.OrderOut)
	}

	return r0
}

// GetAccount provides a mock function with given fields: ctx
func (_m *Exchanger) GetAccount(ctx context.Context) service.GetAccountOut {
	ret := _m.Called(ctx)

	var r0 service.GetAccountOut
	if rf, ok := ret.Get(0).(func(context.Context) service.GetAccountOut); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(service.GetAccountOut)
	}

	return r0
}

// GetBalances provides a mock function with given fields: ctx
func (_m *Exchanger) GetBalances(ctx context.Context) service.GetAccountBalanceOut {
	ret := _m.Called(ctx)

	var r0 service.GetAccountBalanceOut
	if rf, ok := ret.Get(0).(func(context.Context) service.GetAccountBalanceOut); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(service.GetAccountBalanceOut)
	}

	return r0
}

// GetCandles provides a mock function with given fields: ctx, in
func (_m *Exchanger) GetCandles(ctx context.Context, in service.GetCandlesIn) service.CandlesOut {
	ret := _m.Called(ctx, in)

	var r0 service.CandlesOut
	if rf, ok := ret.Get(0).(func(context.Context, service.GetCandlesIn) service.CandlesOut); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(service.CandlesOut)
	}

	return r0
}

// GetOpenOrders provides a mock function with given fields: in
func (_m *Exchanger) GetOpenOrders(in service.EIn) service.EOut {
	ret := _m.Called(in)

	var r0 service.EOut
	if rf, ok := ret.Get(0).(func(service.EIn) service.EOut); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Get(0).(service.EOut)
	}

	return r0
}

// GetOrder provides a mock function with given fields: ctx, in
func (_m *Exchanger) GetOrder(ctx context.Context, in service.GetOrderIn) service.OrderOut {
	ret := _m.Called(ctx, in)

	var r0 service.OrderOut
	if rf, ok := ret.Get(0).(func(context.Context, service.GetOrderIn) service.OrderOut); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(service.OrderOut)
	}

	return r0
}

// GetOrdersHistory provides a mock function with given fields: in
func (_m *Exchanger) GetOrdersHistory(in service.EIn) service.EOut {
	ret := _m.Called(in)

	var r0 service.EOut
	if rf, ok := ret.Get(0).(func(service.EIn) service.EOut); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Get(0).(service.EOut)
	}

	return r0
}

// GetTicker provides a mock function with given fields: ctx, in
func (_m *Exchanger) GetTicker(ctx context.Context, in service.GetTickerIn) service.GetTickerOut {
	ret := _m.Called(ctx, in)

	var r0 service.GetTickerOut
	if rf, ok := ret.Get(0).(func(context.Context, service.GetTickerIn) service.GetTickerOut); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(service.GetTickerOut)
	}

	return r0
}

// OrderLimit provides a mock function with given fields: in
func (_m *Exchanger) OrderLimit(in service.OrderLimitIn) service.OrderOut {
	ret := _m.Called(in)

	var r0 service.OrderOut
	if rf, ok := ret.Get(0).(func(service.OrderLimitIn) service.OrderOut); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Get(0).(service.OrderOut)
	}

	return r0
}

// OrderMarket provides a mock function with given fields: in
func (_m *Exchanger) OrderMarket(in service.OrderMarketIn) service.OrderOut {
	ret := _m.Called(in)

	var r0 service.OrderOut
	if rf, ok := ret.Get(0).(func(service.OrderMarketIn) service.OrderOut); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Get(0).(service.OrderOut)
	}

	return r0
}

// SellLimit provides a mock function with given fields: in
func (_m *Exchanger) SellLimit(in service.LimitIn) service.OrderOut {
	ret := _m.Called(in)

	var r0 service.OrderOut
	if rf, ok := ret.Get(0).(func(service.LimitIn) service.OrderOut); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Get(0).(service.OrderOut)
	}

	return r0
}

// SellMarket provides a mock function with given fields: in
func (_m *Exchanger) SellMarket(in service.MarketIn) service.OrderOut {
	ret := _m.Called(in)

	var r0 service.OrderOut
	if rf, ok := ret.Get(0).(func(service.MarketIn) service.OrderOut); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Get(0).(service.OrderOut)
	}

	return r0
}

type mockConstructorTestingTNewExchanger interface {
	mock.TestingT
	Cleanup(func())
}

// NewExchanger creates a new instance of Exchanger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewExchanger(t mockConstructorTestingTNewExchanger) *Exchanger {
	mock := &Exchanger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
