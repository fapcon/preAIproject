// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	service "studentgit.kata.academy/eazzyearn/students/mono/monolith/internal/modules/strategy/service"
)

// Strateger is an autogenerated mock type for the Strateger type
type Strateger struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, in
func (_m *Strateger) Create(ctx context.Context, in service.StrategyCreateIn) service.StrategyCreateOut {
	ret := _m.Called(ctx, in)

	var r0 service.StrategyCreateOut
	if rf, ok := ret.Get(0).(func(context.Context, service.StrategyCreateIn) service.StrategyCreateOut); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(service.StrategyCreateOut)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, in
func (_m *Strateger) Delete(ctx context.Context, in service.StrategyDeleteIn) service.StrategyDeleteOut {
	ret := _m.Called(ctx, in)

	var r0 service.StrategyDeleteOut
	if rf, ok := ret.Get(0).(func(context.Context, service.StrategyDeleteIn) service.StrategyDeleteOut); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(service.StrategyDeleteOut)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, in
func (_m *Strateger) GetByID(ctx context.Context, in service.StrategyGetByIDIn) service.StrategyOut {
	ret := _m.Called(ctx, in)

	var r0 service.StrategyOut
	if rf, ok := ret.Get(0).(func(context.Context, service.StrategyGetByIDIn) service.StrategyOut); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(service.StrategyOut)
	}

	return r0
}

// GetByName provides a mock function with given fields: ctx, in
func (_m *Strateger) GetByName(ctx context.Context, in service.StrategyGetByNameIn) service.StrategyOut {
	ret := _m.Called(ctx, in)

	var r0 service.StrategyOut
	if rf, ok := ret.Get(0).(func(context.Context, service.StrategyGetByNameIn) service.StrategyOut); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(service.StrategyOut)
	}

	return r0
}

// GetList provides a mock function with given fields: ctx
func (_m *Strateger) GetList(ctx context.Context) service.StrategiesOut {
	ret := _m.Called(ctx)

	var r0 service.StrategiesOut
	if rf, ok := ret.Get(0).(func(context.Context) service.StrategiesOut); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(service.StrategiesOut)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, in
func (_m *Strateger) Update(ctx context.Context, in service.StrategyUpdateIn) service.StrategyUpdateOut {
	ret := _m.Called(ctx, in)

	var r0 service.StrategyUpdateOut
	if rf, ok := ret.Get(0).(func(context.Context, service.StrategyUpdateIn) service.StrategyUpdateOut); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(service.StrategyUpdateOut)
	}

	return r0
}

type mockConstructorTestingTNewStrateger interface {
	mock.TestingT
	Cleanup(func())
}

// NewStrateger creates a new instance of Strateger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStrateger(t mockConstructorTestingTNewStrateger) *Strateger {
	mock := &Strateger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
