// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "studentgit.kata.academy/eazzyearn/students/mono/monolith/internal/models"

	service "studentgit.kata.academy/eazzyearn/students/mono/monolith/internal/modules/webhook_process/service"
)

// WebhookProcesser is an autogenerated mock type for the WebhookProcesser type
type WebhookProcesser struct {
	mock.Mock
}

// CreateWebhookProcess provides a mock function with given fields: ctx, bot, in
func (_m *WebhookProcesser) CreateWebhookProcess(ctx context.Context, bot models.Bot, in service.WebhookProcessIn) (models.WebhookProcessDTO, error) {
	ret := _m.Called(ctx, bot, in)

	var r0 models.WebhookProcessDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Bot, service.WebhookProcessIn) (models.WebhookProcessDTO, error)); ok {
		return rf(ctx, bot, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Bot, service.WebhookProcessIn) models.WebhookProcessDTO); ok {
		r0 = rf(ctx, bot, in)
	} else {
		r0 = ret.Get(0).(models.WebhookProcessDTO)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Bot, service.WebhookProcessIn) error); ok {
		r1 = rf(ctx, bot, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBotInfo provides a mock function with given fields: ctx, in
func (_m *WebhookProcesser) GetBotInfo(ctx context.Context, in service.GetBotInfoIn) service.GetBotInfoOut {
	ret := _m.Called(ctx, in)

	var r0 service.GetBotInfoOut
	if rf, ok := ret.Get(0).(func(context.Context, service.GetBotInfoIn) service.GetBotInfoOut); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(service.GetBotInfoOut)
	}

	return r0
}

// GetBotWebhooks provides a mock function with given fields: ctx, in
func (_m *WebhookProcesser) GetBotWebhooks(ctx context.Context, in service.GetBotRelationIn) service.GetWebhooksOut {
	ret := _m.Called(ctx, in)

	var r0 service.GetWebhooksOut
	if rf, ok := ret.Get(0).(func(context.Context, service.GetBotRelationIn) service.GetWebhooksOut); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(service.GetWebhooksOut)
	}

	return r0
}

// GetUserWebhooks provides a mock function with given fields: ctx, in
func (_m *WebhookProcesser) GetUserWebhooks(ctx context.Context, in service.GetUserRelationIn) service.GetWebhooksOut {
	ret := _m.Called(ctx, in)

	var r0 service.GetWebhooksOut
	if rf, ok := ret.Get(0).(func(context.Context, service.GetUserRelationIn) service.GetWebhooksOut); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(service.GetWebhooksOut)
	}

	return r0
}

// GetWebhookInfo provides a mock function with given fields: ctx, in
func (_m *WebhookProcesser) GetWebhookInfo(ctx context.Context, in service.GetWebhookInfoIn) service.GetWebhookInfoOut {
	ret := _m.Called(ctx, in)

	var r0 service.GetWebhookInfoOut
	if rf, ok := ret.Get(0).(func(context.Context, service.GetWebhookInfoIn) service.GetWebhookInfoOut); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(service.GetWebhookInfoOut)
	}

	return r0
}

// UpdateWebhookStatus provides a mock function with given fields: ctx, bot, webhook, message, status
func (_m *WebhookProcesser) UpdateWebhookStatus(ctx context.Context, bot models.Bot, webhook models.WebhookProcessDTO, message string, status int) {
	_m.Called(ctx, bot, webhook, message, status)
}

// WebhookProcess provides a mock function with given fields: ctx, in
func (_m *WebhookProcesser) WebhookProcess(ctx context.Context, in service.WebhookProcessIn) service.WebhookProcessOut {
	ret := _m.Called(ctx, in)

	var r0 service.WebhookProcessOut
	if rf, ok := ret.Get(0).(func(context.Context, service.WebhookProcessIn) service.WebhookProcessOut); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(service.WebhookProcessOut)
	}

	return r0
}

// WriteWebhookHistory provides a mock function with given fields: ctx, dto
func (_m *WebhookProcesser) WriteWebhookHistory(ctx context.Context, dto models.WebhookProcessHistoryDTO) {
	_m.Called(ctx, dto)
}

type mockConstructorTestingTNewWebhookProcesser interface {
	mock.TestingT
	Cleanup(func())
}

// NewWebhookProcesser creates a new instance of WebhookProcesser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWebhookProcesser(t mockConstructorTestingTNewWebhookProcesser) *WebhookProcesser {
	mock := &WebhookProcesser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
