// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "studentgit.kata.academy/eazzyearn/students/mono/monolith/internal/models"

	utils "gitlab.com/golight/orm/utils"
)

// WebhookProcesser is an autogenerated mock type for the WebhookProcesser type
type WebhookProcesser struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, dto
func (_m *WebhookProcesser) Create(ctx context.Context, dto models.WebhookProcessDTO) error {
	ret := _m.Called(ctx, dto)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.WebhookProcessDTO) error); ok {
		r0 = rf(ctx, dto)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, WebhookProcessID
func (_m *WebhookProcesser) Delete(ctx context.Context, WebhookProcessID int) error {
	ret := _m.Called(ctx, WebhookProcessID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, WebhookProcessID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, exchangeID
func (_m *WebhookProcesser) GetByID(ctx context.Context, exchangeID int) (models.WebhookProcessDTO, error) {
	ret := _m.Called(ctx, exchangeID)

	var r0 models.WebhookProcessDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (models.WebhookProcessDTO, error)); ok {
		return rf(ctx, exchangeID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) models.WebhookProcessDTO); ok {
		r0 = rf(ctx, exchangeID)
	} else {
		r0 = ret.Get(0).(models.WebhookProcessDTO)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, exchangeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetList provides a mock function with given fields: ctx, condition
func (_m *WebhookProcesser) GetList(ctx context.Context, condition utils.Condition) ([]models.WebhookProcessDTO, error) {
	ret := _m.Called(ctx, condition)

	var r0 []models.WebhookProcessDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, utils.Condition) ([]models.WebhookProcessDTO, error)); ok {
		return rf(ctx, condition)
	}
	if rf, ok := ret.Get(0).(func(context.Context, utils.Condition) []models.WebhookProcessDTO); ok {
		r0 = rf(ctx, condition)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.WebhookProcessDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, utils.Condition) error); ok {
		r1 = rf(ctx, condition)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, dto
func (_m *WebhookProcesser) Update(ctx context.Context, dto models.WebhookProcessDTO) error {
	ret := _m.Called(ctx, dto)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.WebhookProcessDTO) error); ok {
		r0 = rf(ctx, dto)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewWebhookProcesser interface {
	mock.TestingT
	Cleanup(func())
}

// NewWebhookProcesser creates a new instance of WebhookProcesser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWebhookProcesser(t mockConstructorTestingTNewWebhookProcesser) *WebhookProcesser {
	mock := &WebhookProcesser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
